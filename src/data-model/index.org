#+TITLE: Data Model for Lab Data Service
#+AUTHOR: VLEAD
#+DATE: [2016-11-30 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Introduction
  The application or the system is abstracted as the data model.  The model
  captures: the entities that comprise the system; relations and constraints
  between these entities; and operations that entail a change in the state of
  the system.

  The purpose of this document is to describe the expected behaviour of the lab
  data service. It is a specification for the requirements of this service.


* Notation
  The system is defined as the data model.  There is a certain notation that is
  used for defining the data model. 

** Sets, cardinality and relations

If =A= is a set, then
    1. =A!= denotes exactly one element of =A=.
    2. =A?= denotes at most one element of =A=.
    3. =A+= denotes  one or more elements of =A=
    4. =A*=  denotes at zero or more elements of =A=.  Often
       abbreviated as =A=.

    5. =A > B= denotes a relation /from/ =A= /to/ =B=.

** Relations and their cardinality type

A relation =r:A > B= could relate each element of =A= to
zero, one or more elements of =B=.

|--------------------------------+-----------|
| Cardinality of B               | Notation  |
|--------------------------------+-----------|
| at least zero elements of =B=. | r: A > B  |
|--------------------------------+-----------|
| at most one element of =B=     | r: A > B? |
|--------------------------------+-----------|
| at least one element of =B=    | r: A > B+ |
|--------------------------------+-----------|
| exactly one element of =B=     | r: A > B! |
|--------------------------------+-----------|
   


* Informal abstraction of the data model

** Abstract Entity Types
  The following are the abstract data types in our system.
*** Lab
:PROPERTIES:
:CUSTOM_ID: entity_lab
:END: 
  Requirement satisfied: [[../requirements/index.org::#lab][Lab]]
#+BEGIN_SRC spec :tangle spec.txt
;;; Entity Types
TYPE Lab
#+END_SRC
 
*** Experiment
:PROPERTIES:
:CUSTOM_ID: entity_experiment
:END: 
  Requirement satisfied: [[../requirements/index.org::#experiment][Experiment]]
#+BEGIN_SRC spec :tangle spec.txt
;;; Entity Types
TYPE Experiment
#+END_SRC

*** Institute
:PROPERTIES:
:CUSTOM_ID: entity_institute
:END: 
  Requirement satisfied: [[../requirements/index.org::#institute][Institute]]
#+BEGIN_SRC spec :tangle spec.txt
;;; Entity Types
TYPE Institute
#+END_SRC

*** Discipline
:PROPERTIES:
:CUSTOM_ID: entity_discipline
:END: 
  Requirement satisfied: [[../requirements/index.org::#discipline][Discipline]]
#+BEGIN_SRC spec :tangle spec.txt
;;; Entity Types
TYPE Discipline
#+END_SRC

*** Developer
:PROPERTIES:
:CUSTOM_ID: entity_developer
:END: 
  Requirement satisfied: [[../requirements/index.org::#developer][Developer]]

#+BEGIN_SRC spec :tangle spec.txt
;;; Entity Types
TYPE Developer
#+END_SRC

*** Name
:PROPERTIES:
:CUSTOM_ID: entity_developer
:END: 
  Requirement satisfied: [[../requirements/index.org::#name][Name]]

#+BEGIN_SRC spec :tangle spec.txt
;;; Entity Types
TYPE Name
#+END_SRC

*** Email
:PROPERTIES:
:CUSTOM_ID: entity_developer
:END: 
  Requirement satisfied: [[../requirements/index.org::#email][Email]]

#+BEGIN_SRC spec :tangle spec.txt
;;; Entity Types
TYPE Email
#+END_SRC


* Relations and cardinality constraints over entity types 
  :PROPERTIES:
  :CUSTOM_ID: cardinal_constraints
  :END: 
  The constraints are defined both in terms of formal notation and also in
  diagrams for visual clarity. 

** Relations
   For each relation, we define its inverse next to it.
#+BEGIN_SRC spec :tangle spec.txt

;;; Relations with cardinality constraints

[developer, lab]          : Developer +  >    Lab +
[discipline, lab]         : Discipline +  >    Lab +
[institute, lab]          : Institute !  >    Lab +
[experiment, lab]         : Experiment +  >    Lab !

#+END_SRC


** Diagrams
   The following diagram summarizes all the cardinality constraints across all
   entities.

#+BEGIN_HTML
<img src="https://docs.google.com/drawings/d/e/2PACX-1vQX1QRUkVjjW4hjHaUowOevT6_boqdslQfR0_awXAZmLPSx_UL8Qh_P5fYDoiCCm-IXzPX8LHs2pvId/pub?w=960&h=720">
<p align="center"> Data Service Model </p>

#+END_HTML
  To edit the Data Service Model image click [[https://docs.google.com/a/vlabs.ac.in/drawings/d/1Pc5ywXvy3RC4lws4KwBiv_qpukm_Fz6JPH4wh_CYjMo/edit?usp=sharing][here]]


* Keys

An entity =K= is called a /key for/ an entity =A= if there
is a relation =r: A? > K!=.

|----+------------+--------|
|    | Entity     | Key    |
|----+------------+--------|
| 1. | Institute  | Name   |
|----+------------+--------|
| 2. | Discipline | Name   |
|----+------------+--------|
| 3. | Developer  | Email  |
|----+------------+--------|


* Assumptions

* System state
  The system's state is captured by a set of /state variables/.

** Primary Entity sets
:PROPERTIES:
:CUSTOM_ID: primary_entity_sets
:END:    
#+BEGIN_SRC spec :tangle spec.txt
;;; Primary state variables
Sets
  lab-set  : set[Lab]  ; set of all labs in the system

 #+END_SRC


** Derived Entity sets
:PROPERTIES:
:CUSTOM_ID: derived_entity_sets
:END: 
#+BEGIN_SRC spec :tangle spec.txt
  experiment-set  : lab-set.experiment         ; set of experiments in the system
  institute-set   : lab-set.institute          ; set of institutes in the system
  discipline-set  : lab-set.discipline         ; set of disciplines in the system
  developer-set   : lab-set.developer          ; set of developers in the system
  institute-set   : discipline-set.institute   ; set of institutes in the system
  developer-set   : discipline-set.developer   ; set of developers in the system
  lab-set         : discipline-set.lab         ; set of labs in the system
  discipline-set  : institute-set.discipline   ; set of disciplines in the syste
  developer-set   : institute-set.developer    ; set of developers in the system
  lab-set         : institute-set.lab          ; set of labs in the system
  institute-set   : developer-set.institute    ; set of institutes in the system
  discpline-set   : developer-set.discipline   ; set of disciplines in the system
  lab-set         : developer-set.lab          ; set of labs in the system

#+END_SRC


* Referential Integrity over primary and derived entity sets
:PROPERTIES:
:CUSTOM_ID: referential_integrity_relations
:END: 
#+BEGIN_SRC spec :tangle spec.txt
[discipline, institute]   : Discipline +  >    Institute +
[developer, institute]    : Developer +  >    Institute !
[developer, discipline]   : Developer +  >    Discipline +

#+END_SRC
  The relation =feedbacks : workshop-set > feedback-set += is ascertained by the
  fact that workshop-set is [[./index.org::#derived_entity_sets][derived entity set]].


* Operations 

CRUD operations.  

Each operation is performed on an entity instance or an
entity-set.   The operation may take additional parameters.

 - C  create a user      
 - R  read from a user   
 - U  update a user      
 - D  delete a user      

** Add Lab
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    l: Lab, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    l: ~lab-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    l = new lab
    lab-set = lab-set U {l}
#+END_SRC   



** Add Experiment
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    e: Experimet, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    e: ~experiment-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    e = new experiment
    experiment-set = experiment-set U {e}
#+END_SRC   


** Add Institute
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    i: institute, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    i: ~institute-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    i = new institute
    institute-set = institute-set U {i}
#+END_SRC   



** Add Discipline
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    d: discipline, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    d: ~discipline-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    d = new discipline
    discipline-set = discipline-set U {d}
#+END_SRC


** Add Developer
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    r: developer, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    r: ~developer-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    r = new developer
    developer-set = developer-set U {r}
#+END_SRC 


** Update Lab
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    n: Name, li: Lab_id, l: Lab, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    l : lab-set
    s : session-set
    n : name-set
    li:~lab_id-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    The lab details are updated.
#+END_SRC


** Update Experiment
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    n: Name, ei: Exp_id, e: Experiment, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    e : experiment-set
    s : session-set
    n : name-set
    ei:~exp_id-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    The experiment details are updated.
#+END_SRC


** Update Institute
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    n: Name, ii: Inst_id, i: Institute, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    i : institute-set
    s : session-set
    n : name-set
    ii:~inst_id-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    The institute details are updated.
#+END_SRC


** Update Discipline
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    n: Name, di: Disc_id, d: Discipline, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    d : discipline-set
    s : session-set
    n : name-set
    di:~disc_id-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    The discipline details are updated.
#+END_SRC


** Update Developer
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    n: Name, e: Email_id, r: Developer, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    r : developer-set
    s : session-set
    n : name-set
    e :~email-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    The developer details are updated.
#+END_SRC


** Delete Lab
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    l: Lab, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    l : ~lab-set
    s : session-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    l.activeStatus=false
    lab-set = lab-set - {l}
#+END_SRC


** Delete Experiment
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    e: Experiment, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    e : ~experiment-set
    s : session-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    e.activeStatus=false
    experiment-set = experiment-set - {e}
#+END_SRC


** Delete Institute
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    i: Institute, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    i : ~institute-set
    s : session-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    i.activeStatus=false
    institute-set = institute-set - {i}
#+END_SRC


** Discipline Lab
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    d: Discipline, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    d : ~discipline-set
    s : session-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    d.activeStatus=false
    discipline-set = discipline-set - {d}
#+END_SRC


** Delete Developer
*** Parameters
#+BEGIN_SRC spec :tangle spec.txt
    r: Developer, s: Session
#+END_SRC   
*** Actor credentials
#+BEGIN_SRC spec :tangle spec.txt
    s.key == system configured key
#+END_SRC   
*** Referential Integrity
#+BEGIN_SRC spec :tangle spec.txt
    r : ~developer-set
    s : session-set
#+END_SRC   
*** Effect
#+BEGIN_SRC spec :tangle spec.txt
    r.activeStatus=false
    developer-set = developer-set - {r}
#+END_SRC

