#+TITLE: Entities
#+AUTHOR: VLEAD
#+DATE: [2016-08-31 Wed]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
In the object implementation of the Lab data Service, 
all entities are Objects.  In addition, there is an object 
called =System= that holds the state of the application 
(=user-set=, =session-set=, etc.).

Each of the entities of the data model is implemented as
an object.  Each entity is defined via a class definition, a
constructor and getter and setter methods that access and
mutate the fields of the entity. 

The main idea in the object model is that certain relations
of the data model (those that are total functions) are
implemented as /fields/.  For example the =Lab= object has
a field called =name= that holds an object of type =Name=.

As a start, we do not implement all relations of the data
model.  For example, the relation =lab: Name > Lab?= is
not implemented.  It should be, if we desire to have an
implementation that is /complete/ with respect to the data
model.  Which elements of the data model are implemented and
which are not are decisions based on the end user
requirements of the application.


* Base Classes
#+NAME: base_classes
#+BEGIN_SRC python
Lab = ClassTemplate.mk_class("Lab")
Experiment = ClassTemplate.mk_class("Experiment")
Discipline =  ClassTemplate.mk_class("Discipline")
Session = ClassTemplate.mk_class("Session")
Section = ClassTemplate.mk_class("Section")
#+END_SRC


* Type Predicates
#+NAME: type_predicates
#+BEGIN_SRC python
is_session = is_inst(Session)
check_session = check_pred(is_session)

is_lab = is_inst(Lab)
check_lab = check_pred(is_lab)

is_section = is_inst(Section)
check_section = check_pred(is_section)

def are_labs(labs):
    ret_val = True
    if is_list(labs):
        for lab in labs:
            if not is_lab(lab):
                ret_val = False
    else:
        ret_val = False

    return ret_val

is_experiment = is_inst(Experiment)
check_experiment = check_pred(is_experiment)

def are_experiments(experiments):
    ret_val = True
    if is_list(experiments):
        for experiment in experiments:
            if not is_experiment(experiment):
                ret_val = False
    else:
        ret_val = False

    return ret_val

def are_sections(sections):
    ret_val = True
    if is_list(sections):
        for section in sections:
            if not is_section(section):
                ret_val = False
    else:
        ret_val = False

    return ret_val

#+END_SRC


* Lab
   =Lab= is an entity that has a field =name= and =lab_id= which are string
#+NAME: class_Lab
#+begin_src python
Lab.add_attributes(lab_name=is_str,
                    lab_id=is_str,
                    overview=is_str,
                    experiments=are_experiments)

Lab.__eq__ = lambda self, other: \
                  isinstance(other, self.__class__) and \
                  self.get("lab_name") == other.get("lab_name") and \
                  self.get("lab_id") == other.get("lab_id") and \
                  self.get("overview") == other.get("overview") and \
                  self.get("experiments") == other.get("experiments")

#+end_src

*** Test Lab
#+NAME: class_TestLab
#+BEGIN_SRC python
class TestLab(TestCase):
    TESTING = True
    def test_object_lab(self):
        print "test_object_lab"
        exp_name = "Number Systems"
        exp_id = "EE99777"
        overview = "This is array exp"
        experiment = Experiment(exp_name=exp_name, exp_id=exp_id, \
                                    overview=overview, sections=[])

        lab_name = "Computer Programming"
        lab_id = "CSE01"
        overview = "This is data structures lab which deals about array,stack and ques..etc"
        lab = Lab(lab_name=lab_name, lab_id=lab_id, overview=overview,\
                      experiments=[experiment])

        self.assertEqual(lab.get("lab_name"), lab_name)
        self.assertEqual(lab.get("lab_id"), lab_id)
        self.assertEqual(lab.get("overview"), overview)
        self.assertEqual(lab.get("experiments")[0].get("exp_name"), 
                             experiment.get("exp_name"))

#+END_SRC


* Experiment
   =Experiment= is an entity that has a field =exp_name= and =exp_id= which are string
#+NAME: class_Experiment
#+begin_src python
Experiment.add_attributes(exp_name=is_str, exp_id=is_str, overview=is_str, \
                              sections=are_sections)
Experiment.__eq__ = lambda self, other: \
                  isinstance(other, self.__class__) and \
                  self.get("exp_name") == other.get("exp_name") and \
                  self.get("exp_id") == other.get("exp_id") and \
                  self.get("overview") == other.get("overview") and\
                  self.get("sections") == other.get("sections")

#+end_src

*** Test Experiment
#+NAME: class_TestExperiment
#+BEGIN_SRC python
class TestExperiment(TestCase):
    TESTING = True

    def test_object_experiment(self):
        print "test_object_experiment"
        exp_name = "Number Systems"
        exp_id = "EE99777"
        overview = "This is linked list experiment"
        experiment = Experiment(exp_name=exp_name, exp_id=exp_id,
                                    overview=overview, sections=[])
        self.assertEqual(experiment.get("exp_name"), exp_name)
        self.assertEqual(experiment.get("overview"), overview)
        self.assertEqual(experiment.get("exp_id"), exp_id)
        self.assertEqual(experiment.get("sections"), [])

#+END_SRC


* Section
   =Section= is an entity that has a field =name= which are string
#+NAME: class_Section
#+begin_src python
Section.add_attributes(name=is_str)

Section.__eq__ = lambda self, other: \
                  isinstance(other, self.__class__) and \
                  self.get("name") == other.get("name")

#+end_src

*** Test Section
#+NAME: class_TestSection
#+BEGIN_SRC python
class TestSection(TestCase):
    TESTING = True
    def test_object_section(self):
        print "test_object_section"
        name = "Theory"
        section = Section(name="Theory")

        self.assertEqual(section.get("name"), name)

#+END_SRC


* Session
   =Session= is an entity that has a field =key= which is a string
#+NAME: class_Session
#+begin_src python
Session.add_attributes(key=is_str)
Session.__eq__ = lambda self, other: \
                  isinstance(other, self.__class__) and \
                  self.get("key") == other.get("key")

#+end_src

*** Test Session
#+NAME: class_TestSession
#+BEGIN_SRC python
class TestSession(TestCase):
    TESTING = True

    def test_object_session(self):
        print "test_object_session"
        key = "dkjhfkjdhfkjadhfkjhdafkjh"
        session = Session(key=key)
        self.assertEqual(session.get("key"), key)

#+END_SRC
    

* Discipline
   =Discipline= is an entity that has a field =dis_name= and =dis_id= which are string
#+NAME: class_Discipline
#+begin_src python

Discipline.add_attributes(dis_name=is_str, dis_id=is_str)
Discipline.__eq__ = lambda self, other: \
                  isinstance(other, self.__class__) and \
                  self.get("dis_name") == other.get("dis_name") and \
                  self.get("dis_id") == other.get("dis_id")

#+end_src

*** Test Discipline 
#+NAME: class_TestDiscipline
#+BEGIN_SRC python
class TestDiscipline(TestCase):
    TESTING = True
    def test_object_discipline(self):
        print "test_object_discipline"
        dis_name = "IIT Delhi"
        dis_id = "ECE08"
        discipline = Discipline(dis_name=dis_name, dis_id=dis_id)
        self.assertEqual(discipline.get("dis_name"), dis_name)
        self.assertEqual(discipline.get("dis_id"), dis_id)

#+END_SRC



* Infra                                                         :boilerplate:
   
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.utils.type_utils import *
from runtime.utils.class_templates import *
from runtime.exceptions.custom_exceptions import *

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from entities import *

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle entities.py :eval no :noweb yes
<<imports_for_sources>>
<<base_classes>>
<<type_predicates>>
<<class_Session>>
<<class_Lab>>
<<class_Experiment>>
<<class_Discipline>>
<<class_Section>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_entities.py :eval no :noweb yes
<<imports_for_tests>>
<<class_TestSession>>
<<class_TestLab>>
<<class_TestExperiment>>
<<class_TestDiscipline>>
<<class_TestSection>>
<<run_test_cases>>

#+end_src
