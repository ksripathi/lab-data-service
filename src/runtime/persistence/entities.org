#+TITLE: Persistent Entities
#+AUTHOR: VLEAD
#+DATE: [2016-08-31 Wed]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  Persistence is added to all the entities defined in [[../objects/entities.org][=objects=]].

  
* Lab
=Lab= is a class with an attribute =lab_name= of type alphabetic string and
=lab_id= of alphabetic string.

#+NAME: class_Lab
#+begin_src python
args = {"__tablename__": "lab",
        "id": db.Column(db.Integer, primary_key=True),
        "lab_id": db.Column(db.String(255), unique=True, nullable=False),
        "lab_name": db.Column(db.String(255), unique=False, 
                                       nullable=True),
        "overview": db.Column(db.String(1000), unique=False, 
                                       nullable=True),
        "experiments": db.relationship('Experiment', backref=db.backref('lb'))

        }

Lab = ClassPersistenceTemplate.mk_persistent(Lab, ['lab_id', 'experiments'],\
                                                 **args)

#+end_src

*** Test Lab
#+NAME: class_TestLab
#+BEGIN_SRC python
class TestPersistentLab(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_lab(self):
        print "test_persistent_lab"

        exp_name = "Number Systems"
        exp_id = "EE99777"
        overview = "This is linked list experiment"
        experiment = Experiment(exp_name=exp_name, exp_id=exp_id, overview=overview, sections=[])
        experiment.save()

        lab_name1="Computer Programming"
        lab_id1="CSE01"
        overview1 = "This is data structures lab which deals about array,stack and ques..etc"
        lab1 = Lab(lab_name=lab_name1, lab_id=lab_id1, overview=overview1, experiments=[experiment])
        lab1.save()
        
        lab_name2="Data Structures"
        lab_id2="CSE02"
        overview2 = "This is data structures lab which deals about array,stack and ques..etc"
        lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2, overview=overview2, experiments=[])
        lab2.save()

        lab1 = Lab.get_by_id(1)
        lab2 = Lab.get_by_id(2)
        lab3 = Lab.get_by_id(3)

        self.assertEqual(lab1.get("lab_name"), lab_name1)
        self.assertEqual(lab1.get("lab_id"), lab_id1)
        self.assertEqual(lab1.get("overview"), overview1)
        self.assertEqual(lab1.get("experiments")[0].get("exp_name"), 
                             experiment.get("exp_name"))

        self.assertEqual(lab2.get("lab_name"), lab_name2)
        self.assertEqual(lab2.get("lab_id"), lab_id2)
        self.assertEqual(lab2.get("overview"), overview2)
        self.assertEqual(lab2.get("experiments"), [])

        self.assertEqual(lab3,None)

#+END_SRC


* Experiment

  =Experiment= is a class with attributes =exp_name= and =exp_id= of type =is_email_str=.

#+NAME: class_association_Table
#+BEGIN_SRC python
experiments_sections = db.Table('experiments_sections',
		      db.Column('experiment_id', db.Integer, 
                            db.ForeignKey('experiment.id')),
		      db.Column('section_id', db.Integer,
                            db.ForeignKey('section.id')))

#+END_SRC

#+NAME: class_Experiment
#+begin_src python
args = {"__tablename__": "experiment",
        "id": db.Column(db.Integer, primary_key=True),
        "exp_name": db.Column(db.String(255), unique=False, nullable=True),
        "exp_id": db.Column(db.String(255), unique=True, nullable=False),
        "overview": db.Column(db.String(1000), unique=False, nullable=True),
        "lb_id": db.Column(db.Integer, 
                                db.ForeignKey('lab.id'), 
                                unique=False),

        "sections": db.relationship('Section',
                    secondary=experiments_sections, 
                    backref='experiments')

        }

Experiment = ClassPersistenceTemplate.mk_persistent(Experiment, ['exp_id'], **args)

#+end_src

** Test Experiment
#+NAME: class_TestExperiment
#+BEGIN_SRC python
class TestPersistenceExperiment(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_experiment(self):
        print "test_persistance_experiment"
        exp_name = "Number Systems"
        exp_id = "EE99777"
        overview = "This is linked list experiment"
        exp = Experiment(exp_name=exp_name, exp_id=exp_id, overview=overview, sections=[])
        exp.save()
        experiment = Experiment.get_by_id(1)
        experiment1 = Experiment.get_by_id(2)
        self.assertEqual(experiment.get("exp_name"), exp_name)
        self.assertEqual(experiment.get("exp_id"), exp_id)
        self.assertEqual(experiment.get("overview"), overview)
        self.assertEqual(experiment1,None)

#+END_SRC




* Section

=Section= is a class with an attribute =name= of type alphabetic string 

#+NAME: class_Section
#+begin_src python
args = {"__tablename__": "section",
        "id": db.Column(db.Integer, primary_key=True),
        "name": db.Column(db.String(255), unique=False)
        }

Section = ClassPersistenceTemplate.mk_persistent(Section, ['name'], **args)

#+end_src

** Test Section
#+NAME: class_TestSection
#+BEGIN_SRC python

class TestPersistentSection(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_section(self):
        print "test_persistent_section"
        name = "Theory"
        section = Section(name=name)
        section.save()
        section1 = Section.get_by_id(1)
        section2 = Section.get_by_id(2)
        self.assertEqual(section1.get("name"), name)
        self.assertEqual(section2,None)

#+END_SRC

* Name
=Name= is a class with an attribute =name= of type alphabetic string.

#+NAME: class_Name
#+begin_src python
args = {"__tablename__": "name",
        "id": db.Column(db.Integer, primary_key=True),
        "name": db.Column(db.String(255), unique=False,
                                       nullable=True)
        }

Name = ClassPersistenceTemplate.mk_persistent(Name, [], **args)
#+end_src

*** Test Name
#+NAME: class_TestName
#+BEGIN_SRC python
class TestPersistentName(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_dev(self):
        print "test_persistent_name"

        name = "Mohit tahiliani"
        name1 = Name(name=name)
        name1.save()
        
        name1 = Name.get_by_id(1)

        self.assertEqual(name1.get("name"), name)

#+END_SRC

* Email
=Email= is a class with an attribute =email= of type alphabetic string.

#+NAME: class_Email
#+begin_src python
args = {"__tablename__": "email",
        "id": db.Column(db.Integer, primary_key=True),
        "email": db.Column(db.String(255), unique=True, nullable=False)
        }

Email = ClassPersistenceTemplate.mk_persistent(Email, ['email'], **args)
#+end_src

*** Test Email
#+NAME: class_TestEmail
#+BEGIN_SRC python
class TestPersistentEmail(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_email(self):
        print "test_persistent_email"

        email_id = "mohit.tahiliani@gmail.com"
        email1 = Email(email=email_id)
        email1.save()
        
        email1 = Email.get_by_id(1)

        self.assertEqual(email1.get("email"), email_id)

#+END_SRC


* Developer
=Developer= is a class with an attribute =name= of type alphabetic string and =email= of alphabetic string.

#+NAME: class_Developer
#+begin_src python
args = {"__tablename__": "dev",
        "id": db.Column(db.Integer, primary_key=True),
        "name_id": db.Column(db.Integer, db.ForeignKey('name.id'),
                                 nullable=False),
        "email_id": db.Column(db.Integer,db.ForeignKey('email.id'),
                                 unique=True, nullable=False)
        }

Developer = ClassPersistenceTemplate.mk_persistent(Developer, [], **args)
#+end_src

*** Test Developer
#+NAME: class_TestDeveloper
#+BEGIN_SRC python
class TestPersistentDeveloper(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_dev(self):
        print "test_persistent_dev"
        dev_name = Name(name="Mohit Tahiliani")
        dev_name.save()
        email_id = Email(email="mohit.tahiliani@gmail.com")
        email_id.save()
        dev = Developer(name_id=dev_name, email_id=email_id)
        dev.save()
        
        dev = Developer.get_by_id(1)

        self.assertEqual(dev.get("name").get("name"), dev_name.get("name"))
        self.assertEqual(dev.get("email").get("email"), email_id.get("email"))

#+END_SRC


* Infra                                                         :boilerplate:
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.objects.entities import *
from runtime.utils.class_persistence_template import *
import datetime

#+end_src


** Tests
*** Imports for tests 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.persistence.entities import *
#from flask import create_app
from runtime.rest.app import create_app

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()
#+END_SRC


* Tangling                                                      :boilerplate:
** sources
#+BEGIN_SRC python :tangle entities.py :eval no :noweb yes
<<imports_for_sources>>
<<class_Lab>>
<<class_association_Table>>
<<class_Experiment>>
<<class_Section>>
<<class_Name>>
<<class_Email>>
<<class_Developer>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_entities.py :eval no :noweb yes
<<imports_for_tests>>
<<class_TestExperiment>>
<<class_TestLab>>
<<class_TestSection>>
<<class_TestName>>
<<class_TestEmail>>
<<class_TestDeveloper>>
<<run_test_cases>>
#+end_src
