#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END: 
  This document illustrates building of the REST API.

  
* REST

** Get Labs, Get Lab, Get Labs by institute, lab_name and discipline
*** API Designs 
**** Get all labs
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_labs
  :END:    
  - URL :: /labs

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
  {
    "discipline": {
      "dis_id": "cse",
      "id": 1,
      "dis_name": "Computer Science"
    },
    "lab_id": "cse09",
    "institute": {
      "inst_name": "IIIT Hyderabad",
      "id": 1,
      "inst_id": "iiith"
    },
    "overview": "overview",
    "lab_name": "Data Structures",
    "experiments": [
      {
        "overview": "overview",
        "exp_name": "arrays",
        "sections": [
          {
            "name": "Procedure",
            "id": 2
          },
          {
            "name": "Theory",
            "id": 1
          }
        ],
        "id": 1,
        "exp_id": "exp9"
      }
    ],
    "id": 1
  }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs
#+END_EXAMPLE  

**** Get lab by lab_id
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?lab_id=<lab_id>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
  {
    "discipline": {
      "dis_id": "cse",
      "id": 1,
      "dis_name": "Computer Science"
    },
    "lab_id": "cse09",
    "institute": {
      "inst_name": "IIIT Hyderabad",
      "id": 1,
      "inst_id": "iiith"
    },
    "overview": "overview",
    "lab_name": "Data Structures",
    "experiments": [
      {
        "overview": "overview",
        "exp_name": "arrays",
        "sections": [
          {
            "name": "Procedure",
            "id": 2
          },
          {
            "name": "Theory",
            "id": 1
          }
        ],
        "id": 1,
        "exp_id": "exp9"
      }
    ],
    "id": 1
  }
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?lab_id=cse09
#+END_EXAMPLE  

**** Get labs by institute
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?institute_name=<inst_name>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[ 
 {
    "discipline": {
      "dis_id": "cse",
      "id": 1,
      "dis_name": "Computer Science"
    },
    "lab_id": "cse09",
    "institute": {
      "inst_name": "IIIT Hyderabad",
      "id": 1,
      "inst_id": "iiith"
    },
    "overview": "overview",
    "lab_name": "Data Structures",
    "experiments": [
      {
        "overview": "overview",
        "exp_name": "arrays",
        "sections": [
          {
            "name": "Procedure",
            "id": 2
          },
          {
            "name": "Theory",
            "id": 1
          }
        ],
        "id": 1,
        "exp_id": "exp9"
      }
    ],
    "id": 1
  }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?institute_name=IIIT Hyderabad
#+END_EXAMPLE  

**** Get labs by discipline
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?discipline_name=<discipline_name>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[ 
 {
    "discipline": {
      "dis_id": "cse",
      "id": 1,
      "dis_name": "Computer Science"
    },
    "lab_id": "cse09",
    "institute": {
      "inst_name": "IIIT Hyderabad",
      "id": 1,
      "inst_id": "iiith"
    },
    "overview": "overview",
    "lab_name": "Data Structures",
    "experiments": [
      {
        "overview": "overview",
        "exp_name": "arrays",
        "sections": [
          {
            "name": "Procedure",
            "id": 2
          },
          {
            "name": "Theory",
            "id": 1
          }
        ],
        "id": 1,
        "exp_id": "exp9"
      }
    ],
    "id": 1
  }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?discipline_name=Computer Science
#+END_EXAMPLE  

**** Get labs by lab_name
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?lab_name=<lab_name>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
  {
    "discipline": {
      "dis_id": "cse",
      "id": 1,
      "dis_name": "Computer Science"
    },
    "lab_id": "cse09",
    "institute": {
      "inst_name": "IIIT Hyderabad",
      "id": 1,
      "inst_id": "iiith"
    },
    "overview": "overview",
    "lab_name": "Data Structures",
    "experiments": [
      {
        "overview": "overview",
        "exp_name": "arrays",
        "sections": [
          {
            "name": "Procedure",
            "id": 2
          },
          {
            "name": "Theory",
            "id": 1
          }
        ],
        "id": 1,
        "exp_id": "exp9"
      }
    ],
    "id": 1
  }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?lab_name=Data Structures
#+END_EXAMPLE  

*** Implementation
#+NAME: get_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['GET'])
def get_lab():
    if request.method == 'GET':
        if 'lab_id' in request.args:
            lab_id  = request.args['lab_id']
            try:
                lab = SystemInterface.get_lab(lab_id)
                return jsonify(lab)
                
            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except Exception as err:
                error_message = 'error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)        
        elif 'lab_name' in request.args:
            lab_name  = request.args['lab_name']
            try:
                labs = SystemInterface.get_labs_by_lab_name(lab_name)
                return jsonify(labs)
                
            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except Exception as err:
                error_message = 'error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)        

        elif 'institute_name' in request.args:
            institute_name  = request.args['institute_name']
            try:
                labs = SystemInterface.get_labs_by_institute(institute_name)
                return jsonify_list(labs)
                
            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except Exception as err:
                error_message = 'error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)        

        elif 'discipline_name' in request.args:
            discipline_name  = request.args['discipline_name']
            try:
                labs = SystemInterface.get_labs_by_discipline(discipline_name)
                return jsonify_list(labs)
                
            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except Exception as err:
                error_message = 'error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)        

        else:
            try:
                labs = SystemInterface.get_labs()
                return jsonify_list(labs)
         
            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html',
                            data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))

#+END_SRC

*** Test Cases
**** TestGetLab
#+NAME: test_get_labs
#+BEGIN_SRC python
class TestGetLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs(self):
        print "test_get_labs_in_rest"

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'key': KEY,
                   'experiments': ['exp1']
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/labs", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetLabbyLabId
#+NAME: test_get_lab_by_labid
#+BEGIN_SRC python
class TestGetLabbyLabId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab_by_labid(self):
        print "test_get_lab_by_labid_in_rest"

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'key': KEY,
                   'experiments': ['exp1'],
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/labs?lab_id=cse01", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabsbyInstitute
#+NAME: test_get_labs_by_institute
#+BEGIN_SRC python
class TestGetLabsbyInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_institute(self):
        print "test_get_labs_by_institute_in_rest"

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'key': KEY,
                   'experiments': ['exp1'],
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/labs?institute_name=IIT Kanpur", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabsbyDiscipline
#+NAME: test_get_labs_by_discipline
#+BEGIN_SRC python
class TestGetLabsbyDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_discipline(self):
        print "test_get_labs_by_discipline_in_rest"

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'key': KEY,
                   'experiments': ['exp1'],
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/labs?discipline_name=Computer Science",
                                       headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabsbyLabName
#+NAME: test_get_labs_by_lab_name
#+BEGIN_SRC python
class TestGetLabsbyLabName(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_lab_name(self):
        print "test_get_labs_by_lab_name_in_rest"

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'key': KEY,
                   'experiments': ['exp1'],
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/labs?lab_name=Data Structures", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC


** Add Lab 
*** API Designs 
**** Add Lab
  :PROPERTIES:
  :CUSTOM_ID: api_add_lab
  :END:    
  - URL :: /labs

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
  "experiments": ["exp9"], 
  "lab_id": "cse09", 
  "lab_name": "Data Structures", 
  "overview": "overview",
  "key": "<key>",
  "inst_id": "iiith",
  "dis_id": "cse"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "discipline": {
    "dis_id": "cse", 
    "dis_name": "Computer Science", 
    "id": 1
  }, 
  "experiments": [
    {
      "exp_id": "exp9", 
      "exp_name": "arrays", 
      "id": 1, 
      "overview": "overview", 
      "sections": [
        {
          "id": 2, 
          "name": "Procedure"
        }, 
        {
          "id": 1, 
          "name": "Theory"
        }
      ]
    }
  ], 
  "id": 1, 
  "institute": {
    "id": 1, 
    "inst_id": "iiith", 
    "inst_name": "IIIT Hyderabad"
  }, 
  "lab_id": "cse09", 
  "lab_name": "Data Structures", 
  "overview": "overview"
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs
#+END_EXAMPLE 

*** Implementation
#+NAME: add_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['POST'])
def add_lab():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            lab = SystemInterface.add_lab(data_dict)
            return jsonify(lab)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            return jsonify(msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            return jsonify(msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            return jsonify(msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            return jsonify(msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            return jsonify(msg)

#+END_SRC

*** Test Cases
**** TestAddLab

#+NAME: test_add_lab
#+BEGIN_SRC python
class TestAddLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_lab(self):
        print "test_add_lab_in_rest"

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'overview' : 'overview',
                   'experiments': ['exp1']
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)


 #+END_SRC
   

** Get Institutes and Get Institute
*** API Design
**** Get all Institutes
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_institutes
  :END:    
  - URL :: /institutes

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[{"inst_name": "IIIT Hyderabad", "id": 1, "inst_id": "iiith"}]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/institutes
#+END_EXAMPLE

**** Get Institute by Inst id
  :PROPERTIES:
  :CUSTOM_ID: api_get_institute_by_inst_id
  :END:    
  - URL :: /institutes?inst_id=<inst_id>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{"inst_name": "IIIT Hyderabad", "id": 1, "inst_id": "iiith"}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/institutes?inst_id=iiith
#+END_EXAMPLE

*** Implementation
REST API to get all institutes and get institute by inst id.
#+NAME: get_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['GET'])
def get_institute():
    if request.method == 'GET':
       if 'inst_id' in request.args:
           inst_id  = request.args['inst_id']
           try:
               institute = SystemInterface.get_institute(inst_id)
               return jsonify(institute)

           except NotAuthorizedError as err:
               error_message = 'Not Authorized error: %s' % str(err)
               current_app.logger.error("%s" %(error_message))
               return render_template('error.html',
                                       data=error_message)
           except TypeError as err:
               error_message = 'Malformed arguments, error: %s' % str(err)
               current_app.logger.error("%s" %(error_message))
               return render_template('error.html',
                                       data=error_message)
           except Exception as err:
               error_message = 'error: %s' % str(err)
               current_app.logger.error("%s" %(error_message))
               return render_template('error.html',
                                        data=error_message)
       else:
           try:
               institutes = SystemInterface.get_institutes()
               return jsonify_list(institutes)

           except TypeError as err:
               error_message = 'Malformed arguments, error: %s' % str(err)

               return render_template('error.html',
                                           data=error_message)

           except Exception as err:
               abort(500, 'error: %s' % str(err))
            
#+END_SRC

*** Test Cases
**** TestGetInstitute 
 #+NAME: test_get_Institute
 #+BEGIN_SRC python
class TestGetInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institutes(self):
        print "test_get_institutes_in_rest"

        payload = {'inst_name': 'IIIT Hyderabad',
                   'inst_id': 'IIITH',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/institutes", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetInstitutebyInstituteid
#+NAME: test_get_institute_by_instituteid
#+BEGIN_SRC python
class TestGetInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institute_by_instituteid(self):
        print "test_get_institute_by_instituteid_in_rest"

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/institutes?inst_id=IITK", headers=headers)
        self.assertEqual(response.status_code, 200)
#+END_SRC


** Add Institute 
*** API Design
**** Add Institute
  :PROPERTIES:
  :CUSTOM_ID: api_add_institute
  :END:    
  - URL :: /institutes

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"inst_id": "iiith",
"inst_name": "IIIT Hyderabad",
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "inst_id": "iiith", 
  "inst_name": "IIIT Hyderabad"
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/disciplines
#+END_EXAMPLE
    
*** Implementation
REST API to add an institute.
#+NAME: add_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['POST'])
def add_institute():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            institute = SystemInterface.add_institute(data_dict)
            return jsonify(institute)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC

*** Test Cases
**** TestAddInstitute 
 #+NAME: test_add_institute
 #+BEGIN_SRC python
class TestAddInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_institute(self):
        print "test_add_institute_in_rest"
        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Disciplines and Get Discipline
*** API Design
**** Get all Disciplines
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_disciplines
  :END:    
  - URL :: /disciplines

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
{
  "dis_id": "cse", 
  "dis_name": "Computer Science and Engineering", 
  "id": 1
}
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/disciplines
#+END_EXAMPLE

**** Get Discipline by dis_id
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_disciplines
  :END:    
  - URL :: /disciplines?dis_id=<dis_id>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
  "dis_id": "cse", 
  "dis_name": "Computer Science and Engineering", 
  "id": 1
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/disciplines?dis_id=cse
#+END_EXAMPLE

*** Implementation  
    REST API to get discipline.
#+NAME: get_disciplines
#+BEGIN_SRC python
@api.route('/disciplines', methods=['GET'])
def get_discipline():
    if request.method == 'GET':
        if 'dis_id' in request.args:
            dis_id  = request.args['dis_id']
            try:
                discipline = SystemInterface.get_discipline(dis_id)
                return jsonify(discipline)
                
            except NotAuthorizedError as err:
                error_message =  'Not Authorized error: %s' % str(err)
                """
                if request.headers['Content-Type'] == "application/json":
                    abort(401, error_message)
                else:
                """
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except Exception as err:
                error_message = 'error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)        
        else:

            try:
                disciplines = SystemInterface.get_disciplines()
                return jsonify_list(disciplines)

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', 
                        data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))
       
#+END_SRC

*** Test Cases
**** TestGetDiscipline
 #+NAME: test_get_discipline
 #+BEGIN_SRC python
class TestGetDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_disciplines(self):
        print "test_get_discipline_in_rest"

        payload = {'dis_name': 'IIT Delhi',
                   'dis_id': 'EEE10',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/disciplines", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetDisciplinebyDisId
 #+NAME: test_get_discipline_by_disid
 #+BEGIN_SRC python
class TestGetDisciplineByDisId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_discipline_by_disid(self):
        print "test_get_discipline_by_disid_in_rest"

        payload = {'dis_name': 'IIT Delhi',
                   'dis_id': 'EEE10',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/disciplines?dis_id=EEE10",
                                       headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Add Discipline
*** API Design
**** Add Discipline
  :PROPERTIES:
  :CUSTOM_ID: api_add_discipline
  :END:    
  - URL :: /disciplines

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"dis_id": "cse",
"dis_name": "Computer Science",
  "key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "dis_id": "cse", 
  "dis_name": "Computer Science", 
  "id": 1
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/discipline
#+END_EXAMPLE

*** Implementation  
    REST API to add discipline.
#+NAME: add_discipline
#+BEGIN_SRC python
@api.route('/disciplines', methods=['POST'])
def add_discipline():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            dis = SystemInterface.add_discipline(data_dict)
            return jsonify(dis)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC

*** Test Cases
**** TestAddDiscipline
 #+NAME: test_add_discipline
 #+BEGIN_SRC python
class TestAddDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_discipline(self):
        print "test_add_discipline_in_rest"
        payload = {'dis_name': 'IIT Delhi',
                   'dis_id': 'EEE10',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Experiments and Get Experiment
*** API Designs
**** Get all experiments
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_experiments
  :END:    
  - URL :: /experiments

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE

[
  {
    "overview": "overview",
    "exp_name": "arrays",
    "sections": [
      {
        "name": "Procedure",
        "id": 2
      },
      {
        "name": "Theory",
        "id": 1
      }
    ],
    "id": 1,
    "exp_id": "exp9"
  }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments
#+END_EXAMPLE

**** Get experiment by exp_id
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_experiments
  :END:    
  - URL :: /experiments?exp_id=<exp_id>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
  {
    "overview": "overview",
    "exp_name": "arrays",
    "sections": [
      {
        "name": "Procedure",
        "id": 2
      },
      {
        "name": "Theory",
        "id": 1
      }
    ],
    "id": 1,
    "exp_id": "exp9"
  }
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments?exp_id=exp9
#+END_EXAMPLE

*** Implementation
 REST API to get single experiment by exp_id and get all experiments.
#+NAME: get_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['GET'])
def get_experiment():
    if request.method == 'GET':
        if 'exp_id' in request.args:
            exp_id  = request.args['exp_id']
            try:
                current_app.logger.debug("execute get_exp_by_expid")
                exp = SystemInterface.get_experiment(exp_id)
                current_app.logger.debug("executed get_exp_by_expid")
                return jsonify(exp)
                
            except NotAuthorizedError as err:
                error_message =  'Not Authorized error: %s' % str(err)
                """
                if request.headers['Content-Type'] == "application/json":
                    abort(401, error_message)
                else:
                """
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except Exception as err:
                error_message = 'error: %s' % str(err)
                """
                if request.headers['Content-Type'] == "application/json":
                abort(400, error_message)
                else:
                """
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
        else:
            try:
                experiments = SystemInterface.get_experiments()

                return jsonify_list(experiments)

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))
       
#+END_SRC

*** Test Cases
**** TestGetExperiment
 #+NAME: test_get_Experiment
 #+BEGIN_SRC python
class TestGetExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiments(self):
        print "test_get_experiments_in_rest"

        payload = {'exp_name': 'stack',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections' : [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetExperimentbyExpid
#+NAME: test_get_exp_by_expid
#+BEGIN_SRC python
class TestGetExp(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiment_by_expid(self):
        print "test_get_experiment_by_expid_in_rest"

        payload = {'exp_name': 'stack',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections' : [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments?exp_id=cse01", \
                                       headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC


** Add Experiment 
*** API Designs
**** Add Experiment
  :PROPERTIES:
  :CUSTOM_ID: api_add_experiment
  :END:    
  - URL :: /experiments

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
  "exp_id": "exp9", 
  "exp_name": "arrays", 
  "key":"<key>",
  "overview": "overview", 
  "sections": ["Theory", "Procedure"]
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "exp_id": "exp9", 
  "exp_name": "arrays", 
  "id": 1, 
  "overview": "overview", 
  "sections": [
    {
      "id": 1, 
      "name": "Theory"
    }, 
    {
      "id": 2, 
      "name": "Procedure"
    }
  ]
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments
#+END_EXAMPLE

*** Implementation
 REST API to add an experiment.
#+NAME: add_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['POST'])
def get_add_experiment():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            exp = SystemInterface.add_experiment(data_dict)
            return jsonify(exp)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC

*** Test Cases
**** TestAddExperiment
 #+NAME: test_add_experiment
 #+BEGIN_SRC python
class TestAddExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_experiment(self):
        print "test_add_experiment_in_rest"
        payload = {'exp_name': 'arrays',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Section
*** API Design
**** Get all Sections
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_sections
  :END:    
  - URL :: /sections

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
  {
    "overview": "overview",
    "exp_name": "arrays",
    "sections": [
      {
        "name": "Procedure",
        "id": 2
      },
      {
        "name": "Theory",
        "id": 1
      }
    ],
    "id": 1,
    "exp_id": "exp9"
  }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/sections
#+END_EXAMPLE
    
*** Implementation 
REST API to get Section.
#+NAME: get_section
#+BEGIN_SRC python
@api.route('/sections', methods=['GET'])
def get_section():
    if request.method == 'GET':
        try:
            sections = SystemInterface.get_sections()

            return jsonify_list(sections)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC

*** Test Cases
**** TestGetSection
 #+NAME: test_get_Section
 #+BEGIN_SRC python
class TestGetSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_section(self):
        print "test_get_section_in_rest"

        payload = {'name': 'Theory',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/section", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/sections", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Add Section
*** API Design
**** Add sections
  :PROPERTIES:
  :CUSTOM_ID: api_add_sections
  :END:    
  - URL :: /sections

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE

{
  "key": "<key>",
  "name" : "Theory"
}

#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
              {"status" : "successfully added records"}

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/save_lab_spec_data
#+END_EXAMPLE 

*** Implementation 
REST API to  add Section.
#+NAME: add_section
#+BEGIN_SRC python
@api.route('/sections', methods=['POST'])
def add_section():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            section = SystemInterface.add_section(data_dict)
            return jsonify(section)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC

*** Test Cases
**** TestAddSection
 #+NAME: test_add_section
 #+BEGIN_SRC python
class TestAddSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_experiment(self):
        print "test_add_section_in_rest"
        payload = {'name': 'Quiz',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get HostingInfos and Get HostingInfo
*** API Design
**** Get all HostingInfos
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_hostinginfos
  :END:    
  - URL :: /hostinginfos

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[{"hosting_status": "hosted", "id": 1, "hosted_url": "http://cse14-iiith.vlabs.ac.in", "hosted_on": "cloud"}]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/hostinginfos
#+END_EXAMPLE

*** Implementation
REST API to get all hostinginfos.
#+NAME: get_hostinginfo
#+BEGIN_SRC python
@api.route('/hostinginfos', methods=['GET'])
def get_hostinginfo():
    if request.method == 'GET':
       if 'hosted_url' in request.args:
           hosted_url  = request.args['hosted_url']
           try:
               hostinginfo = SystemInterface.get_hostinginfo(hosted_url)
               return jsonify(hostinginfo)

           except NotAuthorizedError as err:
               error_message = 'Not Authorized error: %s' % str(err)
               current_app.logger.error("%s" %(error_message))
               return render_template('error.html',
                                       data=error_message)
           except TypeError as err:
               error_message = 'Malformed arguments, error: %s' % str(err)
               current_app.logger.error("%s" %(error_message))
               return render_template('error.html',
                                       data=error_message)
           except Exception as err:
               error_message = 'error: %s' % str(err)
               current_app.logger.error("%s" %(error_message))
               return render_template('error.html',
                                        data=error_message)
       else:
           try:
               hostinginfos = SystemInterface.get_hostinginfos()
               return jsonify_list(hostinginfos)

           except TypeError as err:
               error_message = 'Malformed arguments, error: %s' % str(err)

               return render_template('error.html',
                                           data=error_message)

           except Exception as err:
               abort(500, 'error: %s' % str(err))
            
#+END_SRC

*** Test Cases
**** TestGetHostingInfo 
 #+NAME: test_get_HostingInfo
 #+BEGIN_SRC python
class TestGetHostingInfo(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_hostinginfos(self):
        print "test_get_hostinginfos_in_rest"

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hostinginfos", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/hostinginfos", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Add HostingInfo
*** API Design
**** Add HostingInfo
  :PROPERTIES:
  :CUSTOM_ID: api_add_hostinginfo
  :END:    
  - URL :: /hostinginfos

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"hosted_url": "http://cse14-iiith.vlabs.ac.in",
"hosting_status": "hosted",
"hosted_on": "cloud",
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "hosted_url": "http://cse14-iiith.vlabs.ac.in", 
  "hosting_status": "hosted",
  "hosted_on": "cloud"
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/hostinginfos
#+END_EXAMPLE
    
*** Implementation
REST API to add an hostinginfo.
#+NAME: add_hostinginfo
#+BEGIN_SRC python
@api.route('/hostinginfos', methods=['POST'])
def add_hostinginfo():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            hostinginfo = SystemInterface.add_hostinginfo(data_dict)
            return jsonify(hostinginfo)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC

*** Test Cases
**** TestAddInstitute 
 #+NAME: test_add_hostinginfo
 #+BEGIN_SRC python
class TestAddHostingInfo(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_hostinginfo(self):
        print "test_add_hostinginfo_in_rest"
        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hostinginfos", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get IntegrationStatuss and Get IntegrationStatus
*** API Design
**** Get all IntegrationStatuss
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_integrationstatuss
  :END:    
  - URL :: /integrationstatuss

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[{"integration_level": 4, "id": 1}]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/integrationstatuss
#+END_EXAMPLE

*** Implementation
REST API to get all integrationstatuss.
#+NAME: get_integrationstatus
#+BEGIN_SRC python
@api.route('/integrationstatuss', methods=['GET'])
def get_integrationstatus():
    if request.method == 'GET':
       if 'integration_level' in request.args:
           integration_level  = request.args['integration_level']
           try:
               integrationstatus = SystemInterface.get_integrationstatus(integration_level)
               return jsonify(integrationstatus)

           except NotAuthorizedError as err:
               error_message = 'Not Authorized error: %s' % str(err)
               current_app.logger.error("%s" %(error_message))
               return render_template('error.html',
                                       data=error_message)
           except TypeError as err:
               error_message = 'Malformed arguments, error: %s' % str(err)
               current_app.logger.error("%s" %(error_message))
               return render_template('error.html',
                                       data=error_message)
           except Exception as err:
               error_message = 'error: %s' % str(err)
               current_app.logger.error("%s" %(error_message))
               return render_template('error.html',
                                        data=error_message)
       else:
           try:
               integrationstatuss = SystemInterface.get_integrationstatuss()
               return jsonify_list(integrationstatuss)

           except TypeError as err:
               error_message = 'Malformed arguments, error: %s' % str(err)

               return render_template('error.html',
                                           data=error_message)

           except Exception as err:
               abort(500, 'error: %s' % str(err))
            
#+END_SRC

*** Test Cases
**** TestGetIntegrationStatus 
 #+NAME: test_get_IntegrationStatus
 #+BEGIN_SRC python
class TestGetIntegrationStatus(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_integrationstatuss(self):
        print "test_get_integrationstatuss_in_rest"

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integrationstatuss", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/integrationstatuss", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Add IntegrationStatus 
*** API Design
**** Add IntegrationStatus
  :PROPERTIES:
  :CUSTOM_ID: api_add_integrationstatus
  :END:    
  - URL :: /integrationstatuss

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"integration_level": 4,
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "integration_level": 4
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/integrationstatuss
#+END_EXAMPLE
    
*** Implementation
REST API to add an integrationstatus.
#+NAME: add_integrationstatus
#+BEGIN_SRC python
@api.route('/integrationstatuss', methods=['POST'])
def add_integrationstatus():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            integrationstatus = SystemInterface.add_integrationstatus(data_dict)
            return jsonify(integrationstatus)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC

*** Test Cases
**** TestAddIntegrationStatus 
 #+NAME: test_add_integrationstatus
 #+BEGIN_SRC python
class TestAddIntegrationStatus(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_integrationstatus(self):
        print "test_add_integrationstatus_in_rest"
        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integrationstatuss", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Lab
   
*** API Design
**** Update lab by labid
  :PROPERTIES:
  :CUSTOM_ID: api_update_lab_by_labid
  :END:    
  - URL :: /labs/<lab_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
  "lab_name": "Databases", 
  "overview": "overview of Databases",
  "key": "<key>"
}
#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "discipline": {
    "dis_id": "cse", 
    "dis_name": "Computer Science", 
    "id": 1
  }, 
  "experiments": [
    {
      "exp_id": "exp9", 
      "exp_name": "arrays", 
      "id": 1, 
      "overview": "overview", 
      "sections": [
        {
          "id": 2, 
          "name": "Procedure"
        }, 
        {
          "id": 1, 
          "name": "Theory"
        }
      ]
    }
  ], 
  "id": 1, 
  "institute": {
    "id": 1, 
    "inst_id": "iiith", 
    "inst_name": "IIIT Hyderabad"
  }, 
  "lab_id": "cse09", 
  "lab_name": "Databases", 
  "overview": "overview of Databases"
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
 http://localhost:5000/labs?lab_id=cse09
#+END_EXAMPLE
   
*** Implementation
#+NAME: update_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['PUT'])
def update():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'lab_id' in request.args:
            data_dict['lab_id']  = request.args['lab_id']
        else:
            abort(500, "Please provide the 'lab_id' to update the lab")
        
        try:
            lab = SystemInterface.update_lab(data_dict)
            return jsonify(lab)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

#+END_SRC
*** Test Cases
**** TestUpdateLab
#+NAME: test_update_lab
#+BEGIN_SRC python
class TestUpdateLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_lab(self):
        print "test_update_lab"

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'experiments':['exp1'],
                   'key': KEY}

        payload1 = {'lab_name': 'Computer Programming',
                   'key': KEY,
                   'overview' : 'cp overview'
                   }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/labs?lab_id=cse01", 
                                       data=json.dumps(payload1),
                                       headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Lab
*** API Design
**** Delete lab by lab_id
  :PROPERTIES:
  :CUSTOM_ID: api_delete_lab_by_lab_id
  :END:    
  - URL :: /labs?<lab_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/labs?lab_id=cse09&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['DELETE'])
def delete_lab():
    if request.method == 'DELETE':
        if 'lab_id' in request.args and 'key' in request.args:
            lab_id  = request.args['lab_id']
            key = request.args['key']
            try:
                lab = SystemInterface.delete_lab(lab_id, key)
                return jsonify({"status":"sucess"})

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))

#+END_SRC
*** Test Cases
**** TestDeleteLab
 #+NAME: test_delete_lab
 #+BEGIN_SRC python
class TestDeleteLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_lab(self):
        print "test_delete_lab"

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kharagpur',
                   'inst_id': 'IITK',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data structures',
                   'lab_id': 'cse02',
                   'key': KEY,
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'experiments': ['exp1']
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/labs?lab_id=cse02&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Experiment
*** API Design
**** Update experiment by expid
  :PROPERTIES:
  :CUSTOM_ID: api_update_experiment_by_expid
  :END:    
  - URL :: /experiments/<exp_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
  "exp_name": "2D arrays", 
  "key":"<key>",
  "overview": "2D Arrays overview"
}

#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "exp_id": "exp9", 
  "exp_name": "2D arrays", 
  "id": 1, 
  "overview": "2D Arrays overview", 
  "sections": [
    {
      "id": 2, 
      "name": "Procedure"
    }, 
    {
      "id": 1, 
      "name": "Theory"
    }
  ]
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/experiments?exp_id=exp9
#+END_EXAMPLE

*** Implementation
#+NAME: update_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['PUT'])
def update_experiment():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'exp_id' in request.args:
            data_dict['exp_id']  = request.args['exp_id']
        else:
            abort(500, "Please provide the 'exp_id' to update the exp")
        
        try:
            exp = SystemInterface.update_experiment(data_dict)
            return jsonify(exp)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

#+END_SRC
*** Test Cases
**** TestUpdateExperiment
 #+NAME: test_update_experiment
 #+BEGIN_SRC python
class TestUpdateExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_experiment(self):
        print "test_update_experiment"

        payload = {'exp_name': 'Theory',
                   'exp_id': 'exp123',
                   'overview': 'overview',
                   'sections': [],
                   'key': KEY}

        payload1 = {'exp_name': 'Procedure',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/experiments?exp_id=exp123",
                                       data=json.dumps(payload1),
                                       headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Experiment
*** API Design
**** Delete experiment by exp_id
  :PROPERTIES:
  :CUSTOM_ID: api_delete_experiment_by_exp_id
  :END:    
  - URL :: /experiments?<exp_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments/2
#+END_EXAMPLE

*** Implementation
#+NAME: delete_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['DELETE'])
def delete_experiment():
    if request.method == 'DELETE':
        if 'exp_id' in request.args and 'key' in request.args:
            exp_id  = request.args['exp_id']
            key = request.args['key']
            try:
                exp_id = SystemInterface.delete_experiment(exp_id, key)
                return jsonify({"status":"sucess"})

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))

#+END_SRC
*** Test Cases
**** TestDeleteExperiment
 #+NAME: test_delete_experiment
 #+BEGIN_SRC python
class TestDeleteExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_experiment(self):
        print "test_delete_experiment"

        payload = {'exp_name': 'Theory',
                   'exp_id': 'exp123',
                   'overview': 'overview',
                   'sections': [],
                   'key': KEY
                  }


        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/experiments?exp_id=exp123&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update and Delete Section
*** API Design
**** Update section by id
  :PROPERTIES:
  :CUSTOM_ID: update_section_by_id
  :END:    
  - URL :: /sections/<id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE

{
  "key" : "<key",
  "name" : "Quiz"
}


#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "name": "Quiz"
}
#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/sections/1
#+END_EXAMPLE


**** Delete section by id
  :PROPERTIES:
  :CUSTOM_ID: delete_section_by_id
  :END:    
  - URL :: /sections/<id>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
                 { "status" : "success" }
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments/2
#+END_EXAMPLE

*** Implementation
#+NAME: update_and_delete_section
#+BEGIN_SRC python
@api.route('/sections/<id>', methods=['GET', 'PUT', 'DELETE'])
def update_and_delete_section(id):
    if request.method == 'GET':
        try:
            section = SystemInterface.get_section_by_id(id)
            return jsonify(section)

        except NotFoundError as err:
            error_message = "No section found with id: %s found." % id

            return render_template('error.html',
                    data=error_message)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
    
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
            data_dict['s_id']=id
        else:
            abort(500, "the request does not contain data in json")

        try:
            section = SystemInterface.update_section(data_dict)
            return jsonify(section)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

    if request.method == 'DELETE':

        try:
            section = SystemInterface.delete_section(id)
            return jsonify({"status":"sucess"})

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

#+END_SRC
*** Test Cases
**** TestUpdateSection
 #+NAME: test_update_section
 #+BEGIN_SRC python
class TestUpdateSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_section(self):
        print "test_update_section"
        payload = {'name': 'Theory',
                   'key': KEY}

        payload1 = {'name': 'Theory',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/sections/1", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestDeleteSection
 #+NAME: test_delete_section
 #+BEGIN_SRC python
class TestDeleteSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_section(self):
        print "test_delete_section"

        payload = {'name': 'Theory',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/sections/1", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Institute
*** API Design
**** Update institutes by instid
  :PROPERTIES:
  :CUSTOM_ID: api_update_institutes_by_instid
  :END:    
  - URL :: /institutes/<inst_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"inst_name": "IIIT H",
  "key": "<key>"
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "inst_id": "iiith", 
  "inst_name": "IIIT H"
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/institutes?inst_id=iiith
#+END_EXAMPLE

*** Implementation
#+NAME: update_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['PUT'])
def update_institute():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'inst_id' in request.args:
            data_dict['inst_id']  = request.args['inst_id']
        else:
            abort(500, "Please provide the 'inst_id' to update the institute")
        
        try:
            institute = SystemInterface.update_institute(data_dict)
            return jsonify(institute)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

#+END_SRC

*** Test Cases
**** TestUpdateInstitute 
 #+NAME: test_update_institute
 #+BEGIN_SRC python
class TestUpdateInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_institute(self):
        print "test_update_institute"

        payload = {'inst_name': 'IIT Kharagpur',
                   'inst_id': 'IITKgp',
                   'key': KEY}

        payload1 = {'inst_name': 'IIT Kanpur',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/institutes?inst_id=IITKgp", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Institute
*** API Design
**** Delete institute by inst_id
  :PROPERTIES:
  :CUSTOM_ID: api_delete_institute_by_inst_id
  :END:    
  - URL :: /institutes?<inst_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/disciplines?dis_id=cse&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['DELETE'])
def delete_institute():
    if request.method == 'DELETE':
        if 'inst_id' in request.args and 'key' in request.args:
            inst_id  = request.args['inst_id']
            key = request.args['key']

            try:
                institute = SystemInterface.delete_institute(inst_id, key)
                return jsonify({"status":"sucess"})

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))

#+END_SRC

*** Test Cases
**** TestDeleteInstitute 
 #+NAME: test_delete_institute
 #+BEGIN_SRC python
class TestDeleteInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_institute(self):
        print "test_delete_institute"

        payload = {'inst_name': 'IIT Kharagpur',
                   'inst_id': 'IITKgp',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/institutes?inst_id=IITKgp&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Discipline
*** API Design
**** Update disciplines by disid
  :PROPERTIES:
  :CUSTOM_ID: api_update_disciplines_by_disid
  :END:    
  - URL :: /disciplines/<dis_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"dis_name": "Computer Science and Engineering",
  "key": "<key>"
}
#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
 {
  "dis_id": "cse", 
  "dis_name": "Computer Science and Engineering", 
  "id": 1
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/disciplines?dis_id=cse
#+END_EXAMPLE

*** Implementation
#+NAME: update_discipline
#+BEGIN_SRC python
@api.route('/disciplines', methods=['PUT'])
def update_discipline():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'dis_id' in request.args:
            data_dict['dis_id']  = request.args['dis_id']
        else:
            abort(500, "Please provide the 'dis_id' to update the institute")
        
        try:
            discipline = SystemInterface.update_discipline(data_dict)
            return jsonify(discipline)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

#+END_SRC

*** Test Cases
**** TestUpdateDiscipline
 #+NAME: test_update_discipline
 #+BEGIN_SRC python
class TestUpdateDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_discipline(self):
        print "test_update_discipline"

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        payload1 = {'dis_name': 'Computer Science and Engineering',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/disciplines?dis_id=CSE", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Discipline
*** API Design
**** Delete discipline by dis_id
  :PROPERTIES:
  :CUSTOM_ID: delete_discipline_by_dis_id
  :END:    
  - URL :: /disciplines?<dis_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/disciplines?dis_id=cse&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_discipline
#+BEGIN_SRC python
@api.route('/disciplines', methods=['PUT', 'DELETE'])
def delete_discipline():
    if request.method == 'DELETE':
        if 'dis_id' in request.args and 'key' in request.args:
            dis_id  = request.args['dis_id']
            key = request.args['key']

            try:
                discipline = SystemInterface.delete_discipline(dis_id, key)
                return jsonify({"status":"sucess"})

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))

#+END_SRC

*** Test Cases
**** TestDeleteDiscipline
 #+NAME: test_delete_discipline
 #+BEGIN_SRC python
class TestDeleteDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_discipline(self):
        print "test_delete_discipline"

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/disciplines?dis_id=CSE&key=defaultkey", 
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update HostingInfo
*** API Design
**** Update hostinginfos by hosted_url
  :PROPERTIES:
  :CUSTOM_ID: update_hostinginfos_by_hosted_url
  :END:    
  - URL :: /hostinginfos/<hosted_url>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"hosting_status": "hosted",
"hosted_on": "cloud",
"key": "<key>"
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "hosted_url": "http://cse14-iiith.vlabs.ac.in",
  "hosting_status": "hosted",
  "hosted_on": "cloud"
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/hostinginfos?hosted_url=http://cse14-iiith.vlabs.ac.in
#+END_EXAMPLE

*** Implementation
#+NAME: update_hostinginfo
#+BEGIN_SRC python
@api.route('/hostinginfos', methods=['PUT'])
def update_hostinginfo():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'hosted_url' in request.args:
            data_dict['hosted_url']  = request.args['hosted_url']
        else:
            abort(500, "Please provide the 'hosted_url' to update the hostinginfo")
        
        try:
            hostinginfo = SystemInterface.update_hostinginfo(data_dict)
            return jsonify(hostinginfo)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

#+END_SRC

*** Test Cases
**** TestUpdateHostingInfo 
 #+NAME: test_update_hostinginfo
 #+BEGIN_SRC python
class TestUpdateHostingInfo(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_hostinginfo(self):
        print "test_update_hostinginfo"

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        payload1 = {'hosting_status': 'not hosted', 'hosted_on': 'server', 'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hostinginfos", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/hostinginfos?hosted_url=http://cse14-iiith.vlabs.ac.in", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete HostingInfo
*** API Design
**** Delete hostinginfo by hosted_url
  :PROPERTIES:
  :CUSTOM_ID: delete_hostinginfo_by_hosted_url
  :END:    
  - URL :: /hostinginfos?<hosted_url>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/hostinginfos?hosted_url=http://cse14-iiith.vlabs.ac.in&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_hostinginfo
#+BEGIN_SRC python
@api.route('/hostinginfos', methods=['DELETE'])
def delete_hostinginfo():
    if request.method == 'DELETE':
        if 'hosted_url' in request.args and 'key' in request.args:
            hosted_url  = request.args['hosted_url']
            key = request.args['key']

            try:
                hostinginfo = SystemInterface.delete_hostinginfo(hosted_url, key)
                return jsonify({"status":"sucess"})

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))

#+END_SRC

*** Test Cases
**** TestDeleteHostingInfo
 #+NAME: test_delete_hostinginfo
 #+BEGIN_SRC python
class TestDeleteHostingInfo(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_hostinginfo(self):
        print "test_delete_hostinginfo"

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hostinginfos", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/hostinginfos?hosted_url=http://cse14-iiith.vlabs.ac.in&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete IntegrationStatus
*** API Design
**** Delete integrationstatus by integration_level
  :PROPERTIES:
  :CUSTOM_ID: api_delete_integrationstatus_by_integration_level
  :END:    
  - URL :: /integrationstatuss?<integration_level>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/integrationstatuss?integration_level=4&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_integrationstatus
#+BEGIN_SRC python
@api.route('/integrationstatuss', methods=['DELETE'])
def delete_integrationstatus():
    if request.method == 'DELETE':
        if 'integration_level' in request.args and 'key' in request.args:
            integration_level  = request.args['integration_level']
            key = request.args['key']

            try:
                integrationstatus = SystemInterface.delete_integrationstatus(integration_level, key)
                return jsonify({"status":"sucess"})

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))

#+END_SRC

*** Test Cases
**** TestDeleteIntegrationStatus
 #+NAME: test_delete_integrationstatus
 #+BEGIN_SRC python
class TestDeleteIntegrationStatus(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_integrationstatus(self):
        print "test_delete_integrationstatus"

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integrationstatuss", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/integrationstatuss?integration_level=4&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import requests
import json
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
from runtime.utils.type_utils import jsonify_list
from runtime.exceptions.custom_exceptions import *
from runtime.system.system_interface import SystemInterface
import yaml

api = Blueprint('APIs', __name__)

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.rest.app import create_app
from runtime.config.system_config import KEY
from runtime.rest.api import *
from runtime.system.system import System
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<get_lab>>
<<add_lab>>
<<update_lab>>
<<delete_lab>>
<<get_experiment>>
<<add_experiment>>
<<get_disciplines>>
<<add_discipline>>
<<update_experiment>>
<<delete_experiment>>
<<update_and_delete_section>>
<<get_section>>
<<add_section>>
<<update_institute>>
<<delete_institute>>
<<update_discipline>>
<<delete_discipline>>
<<get_institute>>
<<add_institute>>
<<get_hostinginfo>>
<<add_hostinginfo>>
<<update_hostinginfo>>
<<delete_hostinginfo>>
<<get_integrationstatus>>
<<add_integrationstatus>>
<<delete_integrationstatus>>
#+END_SRC


** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_add_lab>>
<<test_update_lab>>
<<test_delete_lab>>
<<test_get_labs>>
<<test_get_lab_by_labid>>
<<test_get_labs_by_institute>>
<<test_get_labs_by_lab_name>>
<<test_get_labs_by_discipline>>
<<test_get_exp_by_expid>>
<<test_get_discipline_by_disid>>
<<test_add_experiment>>
<<test_add_discipline>>
<<test_get_discipline>>
<<test_update_discipline>>
<<test_get_experiment>>
<<test_update_experiment>>
<<test_update_section>>
<<test_delete_section>>
<<test_delete_experiment>>
<<test_get_Section>>
<<test_add_section>>
<<test_get_Name>>
<<test_add_name>>
<<test_update_name>>
<<test_delete_name>>
<<test_get_Email>>
<<test_add_email>>
<<test_update_email>>
<<test_delete_email>>
<<test_get_Developer>>
<<test_add_developer>>
<<test_update_developer>>
<<test_delete_developer>>
<<test_add_institute>>
<<test_get_institute>>
<<test_update_institute>>
<<test_delete_institute>>
<<test_delete_discipline>>
<<test_get_HostingInfo>>
<<test_add_hostinginfo>>
<<test_update_hostinginfo>>
<<test_delete_hostinginfo>>
<<test_get_IntegrationStatus>>
<<test_add_integrationstatus>>
<<test_delete_integrationstatus>>
<<run_test_cases>>
#+end_src
