#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END: 
  This document illustrates building of the REST API.



* REST

** Get Labs, Get Lab, Get Labs by institute, lab_name, discipline and asset and Get labs by passing lab_name as keyword
*** API Designs 
**** Get all labs
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_labs
  :END:    
  - URL :: /labs

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "discipline": {
            "dis_id": "cse",
            "assets": [],
            "dis_name": "Computer Science and Engineering",
            "id": 6
        },
        "lab_id": "cse03",
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            },
            {
                "path": "vlabs.ac.in/images/static/image.png",
                "asset_type": "image",
                "id": 2
            }
        ],
        "hosting_info": [
            {
                "hosting_status": "hosted",
                "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                "hosted_on": "cloud",
                "id": 4
            },
            {
                "hosting_status": "hosted",
                "hosted_url": "http://iitkgp.vlab.co.in/",
                "hosted_on": "server",
                "id": 5
            }
        ],
        "institute": {
            "id": 8,
            "inst_name": "IIT Kanpur",
            "assets": [],
            "inst_id": "iitk"
        },
        "overview": "overview",
        "lab_name": "Data Structures",
        "experiments": [
            {
                "discipline": {
                    "dis_id": "cse",
                    "assets": [],
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "hosting_info": [
                    {
                        "hosting_status": "hosted",
                        "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                        "hosted_on": "cloud",
                        "id": 4
                    },
                    {
                        "hosting_status": "hosted",
                        "hosted_url": "http://iitkgp.vlab.co.in/",
                        "hosted_on": "server",
                        "id": 5
                    }
                ],
                "assets": [
                    {
                        "path": "vlabs.ac.in/images/static/logo.png",
                        "asset_type": "Image",
                        "id": 1
                    },
                    {
                        "path": "vlabs.ac.in/images/static/image.png",
                        "asset_type": "image",
                        "id": 2
                    }
                ],
                "institute": {
                    "id": 8,
                    "inst_name": "IIT Kanpur",
                    "assets": [],
                    "inst_id": "iitk"
                },
                "exp_name": "stack",
                "overview": "overview",
                "exp_id": "cse02",
                "developers": [
                    {
                        "discipline": {
                            "dis_id": "cse",
                            "assets": [],
                            "dis_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "institute": {
                            "id": 8,
                            "inst_name": "IIT Kanpur",
                            "assets": [],
                            "inst_id": "iitk"
                        },
                        "id": 3,
                        "name": {
                            "name": "Prof. Dharamaja",
                            "id": 6
                        },
                        "email": {
                            "email": "abc@gmail.com",
                            "id": 6
                        }
                    },
                    {
                        "discipline": {
                            "dis_id": "cse",
                            "assets": [],
                            "dis_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "institute": {
                            "id": 8,
                            "inst_name": "IIT Kanpur",
                            "assets": [],
                            "inst_id": "iitk"
                        },
                        "id": 4,
                        "name": {
                            "name": "Prof. Pallavi Pawar",
                            "id": 7
                        },
                        "email": {
                            "email": "pallavi.pawar@gmail.com",
                            "id": 7
                        }
                    }
                ],
                "sections": [
                    {
                        "name": "Procedure",
                        "id": 3
                    },
                    {
                        "name": "Theory",
                        "id": 2
                    }
                ],
                "id": 3,
                "integration_status": {
                    "integration_level": 4,
                    "id": 5
                }
            }
        ],
        "integration_status": {
            "integration_level": 4,
            "id": 5
        },
        "developers": [
            {
                "discipline": {
                    "dis_id": "cse",
                    "assets": [],
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "institute": {
                    "id": 8,
                    "inst_name": "IIT Kanpur",
                    "assets": [],
                    "inst_id": "iitk"
                },
                "id": 3,
                "name": {
                    "name": "Prof. Dharamaja",
                    "id": 6
                },
                "email": {
                    "email": "abc@gmail.com",
                    "id": 6
                }
            },
            {
                "discipline": {
                    "dis_id": "cse",
                    "assets": [],
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "institute": {
                    "id": 8,
                    "inst_name": "IIT Kanpur",
                    "assets": [],
                    "inst_id": "iitk"
                },
                "id": 4,
                "name": {
                    "name": "Prof. Pallavi Pawar",
                    "id": 7
                },
                "email": {
                    "email": "pallavi.pawar@gmail.com",
                    "id": 7
                }
            }
        ],
        "id": 1
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"} 
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs
#+END_EXAMPLE  

**** Get lab by lab_id
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?lab_id=<lab_id>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        },
        {
            "asset_type": "image",
            "id": 2,
            "path": "vlabs.ac.in/images/static/image.png"
        }
    ],
    "developers": [
        {
            "discipline": {
                "assets": [],
                "dis_id": "cse",
                "dis_name": "Computer Science and Engineering",
                "id": 6
            },
            "email": {
                "email": "abc@gmail.com",
                "id": 6
            },
            "id": 3,
            "institute": {
                "assets": [],
                "id": 8,
                "inst_id": "iitk",
                "inst_name": "IIT Kanpur"
            },
            "name": {
                "id": 6,
                "name": "Prof. Dharamaja"
            }
        },
        {
            "discipline": {
                "assets": [],
                "dis_id": "cse",
                "dis_name": "Computer Science and Engineering",
                "id": 6
            },
            "email": {
                "email": "pallavi.pawar@gmail.com",
                "id": 7
            },
            "id": 4,
            "institute": {
                "assets": [],
                "id": 8,
                "inst_id": "iitk",
                "inst_name": "IIT Kanpur"
            },
            "name": {
                "id": 7,
                "name": "Prof. Pallavi Pawar"
            }
        }
    ],
    "discipline": {
        "assets": [],
        "dis_id": "cse",
        "dis_name": "Computer Science and Engineering",
        "id": 6
    },
    "experiments": [
        {
            "assets": [
                {
                    "asset_type": "Image",
                    "id": 1,
                    "path": "vlabs.ac.in/images/static/logo.png"
                },
                {
                    "asset_type": "image",
                    "id": 2,
                    "path": "vlabs.ac.in/images/static/image.png"
                }
            ],
            "developers": [
                {
                    "discipline": {
                        "assets": [],
                        "dis_id": "cse",
                        "dis_name": "Computer Science and Engineering",
                        "id": 6
                    },
                    "email": {
                        "email": "abc@gmail.com",
                        "id": 6
                    },
                    "id": 3,
                    "institute": {
                        "assets": [],
                        "id": 8,
                        "inst_id": "iitk",
                        "inst_name": "IIT Kanpur"
                    },
                    "name": {
                        "id": 6,
                        "name": "Prof. Dharamaja"
                    }
                },
                {
                    "discipline": {
                        "assets": [],
                        "dis_id": "cse",
                        "dis_name": "Computer Science and Engineering",
                        "id": 6
                    },
                    "email": {
                        "email": "pallavi.pawar@gmail.com",
                        "id": 7
                    },
                    "id": 4,
                    "institute": {
                        "assets": [],
                        "id": 8,
                        "inst_id": "iitk",
                        "inst_name": "IIT Kanpur"
                    },
                    "name": {
                        "id": 7,
                        "name": "Prof. Pallavi Pawar"
                    }
                }
            ],
            "discipline": {
                "assets": [],
                "dis_id": "cse",
                "dis_name": "Computer Science and Engineering",
                "id": 6
            },
            "exp_id": "cse02",
            "exp_name": "stack",
            "hosting_info": [
                {
                    "hosted_on": "cloud",
                    "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                    "hosting_status": "hosted",
                    "id": 4
                },
                {
                    "hosted_on": "server",
                    "hosted_url": "http://iitkgp.vlab.co.in/",
                    "hosting_status": "hosted",
                    "id": 5
                }
            ],
            "id": 3,
            "institute": {
                "assets": [],
                "id": 8,
                "inst_id": "iitk",
                "inst_name": "IIT Kanpur"
            },
            "integration_status": {
                "id": 5,
                "integration_level": 4
            },
            "overview": "overview",
            "sections": [
                {
                    "id": 3,
                    "name": "Procedure"
                },
                {
                    "id": 2,
                    "name": "Theory"
                }
            ]
        }
    ],
    "hosting_info": [
        {
            "hosted_on": "cloud",
            "hosted_url": "http://cse14-iiith.vlabs.ac.in",
            "hosting_status": "hosted",
            "id": 4
        },
        {
            "hosted_on": "server",
            "hosted_url": "http://iitkgp.vlab.co.in/",
            "hosting_status": "hosted",
            "id": 5
        }
    ],
    "id": 1,
    "institute": {
        "assets": [],
        "id": 8,
        "inst_id": "iitk",
        "inst_name": "IIT Kanpur"
    },
    "integration_status": {
        "id": 5,
        "integration_level": 4
    },
    "lab_id": "cse03",
    "lab_name": "Data Structures",
    "overview": "overview"
}

#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?lab_id=cse04
#+END_EXAMPLE  

**** Get labs by institute
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?institute_name=<inst_name>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "discipline": {
            "dis_id": "cse",
            "assets": [],
            "dis_name": "Computer Science and Engineering",
            "id": 6
        },
        "lab_id": "cse03",
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            },
            {
                "path": "vlabs.ac.in/images/static/image.png",
                "asset_type": "image",
                "id": 2
            }
        ],
        "hosting_info": [
            {
                "hosting_status": "hosted",
                "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                "hosted_on": "cloud",
                "id": 4
            },
            {
                "hosting_status": "hosted",
                "hosted_url": "http://iitkgp.vlab.co.in/",
                "hosted_on": "server",
                "id": 5
            }
        ],
        "institute": {
            "id": 8,
            "inst_name": "IIT Kanpur",
            "assets": [],
            "inst_id": "iitk"
        },
        "overview": "overview",
        "lab_name": "Data Structures",
        "experiments": [
            {
                "discipline": {
                    "dis_id": "cse",
                    "assets": [],
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "hosting_info": [
                    {
                        "hosting_status": "hosted",
                        "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                        "hosted_on": "cloud",
                        "id": 4
                    },
                    {
                        "hosting_status": "hosted",
                        "hosted_url": "http://iitkgp.vlab.co.in/",
                        "hosted_on": "server",
                        "id": 5
                    }
                ],
                "assets": [
                    {
                        "path": "vlabs.ac.in/images/static/logo.png",
                        "asset_type": "Image",
                        "id": 1
                    },
                    {
                        "path": "vlabs.ac.in/images/static/image.png",
                        "asset_type": "image",
                        "id": 2
                    }
                ],
                "institute": {
                    "id": 8,
                    "inst_name": "IIT Kanpur",
                    "assets": [],
                    "inst_id": "iitk"
                },
                "exp_name": "stack",
                "overview": "overview",
                "exp_id": "cse02",
                "developers": [
                    {
                        "discipline": {
                            "dis_id": "cse",
                            "assets": [],
                            "dis_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "institute": {
                            "id": 8,
                            "inst_name": "IIT Kanpur",
                            "assets": [],
                            "inst_id": "iitk"
                        },
                        "id": 3,
                        "name": {
                            "name": "Prof. Dharamaja",
                            "id": 6
                        },
                        "email": {
                            "email": "abc@gmail.com",
                            "id": 6
                        }
                    },
                    {
                        "discipline": {
                            "dis_id": "cse",
                            "assets": [],
                            "dis_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "institute": {
                            "id": 8,
                            "inst_name": "IIT Kanpur",
                            "assets": [],
                            "inst_id": "iitk"
                        },
                        "id": 4,
                        "name": {
                            "name": "Prof. Pallavi Pawar",
                            "id": 7
                        },
                        "email": {
                            "email": "pallavi.pawar@gmail.com",
                            "id": 7
                        }
                    }
                ],
                "sections": [
                    {
                        "name": "Procedure",
                        "id": 3
                    },
                    {
                        "name": "Theory",
                        "id": 2
                    }
                ],
                "id": 3,
                "integration_status": {
                    "integration_level": 4,
                    "id": 5
                }
            }
        ],
        "integration_status": {
            "integration_level": 4,
            "id": 5
        },
        "developers": [
            {
                "discipline": {
                    "dis_id": "cse",
                    "assets": [],
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "institute": {
                    "id": 8,
                    "inst_name": "IIT Kanpur",
                    "assets": [],
                    "inst_id": "iitk"
                },
                "id": 3,
                "name": {
                    "name": "Prof. Dharamaja",
                    "id": 6
                },
                "email": {
                    "email": "abc@gmail.com",
                    "id": 6
                }
            },
            {
                "discipline": {
                    "dis_id": "cse",
                    "assets": [],
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "institute": {
                    "id": 8,
                    "inst_name": "IIT Kanpur",
                    "assets": [],
                    "inst_id": "iitk"
                },
                "id": 4,
                "name": {
                    "name": "Prof. Pallavi Pawar",
                    "id": 7
                },
                "email": {
                    "email": "pallavi.pawar@gmail.com",
                    "id": 7
                }
            }
        ],
        "id": 1
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?institute_name=IIIT Hyderabad
#+END_EXAMPLE  

**** Get labs by discipline
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?discipline_name=<discipline_name>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "discipline": {
            "dis_id": "cse",
            "assets": [],
            "dis_name": "Computer Science and Engineering",
            "id": 6
        },
        "lab_id": "cse03",
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            },
            {
                "path": "vlabs.ac.in/images/static/image.png",
                "asset_type": "image",
                "id": 2
            }
        ],
        "hosting_info": [
            {
                "hosting_status": "hosted",
                "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                "hosted_on": "cloud",
                "id": 4
            },
            {
                "hosting_status": "hosted",
                "hosted_url": "http://iitkgp.vlab.co.in/",
                "hosted_on": "server",
                "id": 5
            }
        ],
        "institute": {
            "id": 8,
            "inst_name": "IIT Kanpur",
            "assets": [],
            "inst_id": "iitk"
        },
        "overview": "overview",
        "lab_name": "Data Structures",
        "experiments": [
            {
                "discipline": {
                    "dis_id": "cse",
                    "assets": [],
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "hosting_info": [
                    {
                        "hosting_status": "hosted",
                        "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                        "hosted_on": "cloud",
                        "id": 4
                    },
                    {
                        "hosting_status": "hosted",
                        "hosted_url": "http://iitkgp.vlab.co.in/",
                        "hosted_on": "server",
                        "id": 5
                    }
                ],
                "assets": [
                    {
                        "path": "vlabs.ac.in/images/static/logo.png",
                        "asset_type": "Image",
                        "id": 1
                    },
                    {
                        "path": "vlabs.ac.in/images/static/image.png",
                        "asset_type": "image",
                        "id": 2
                    }
                ],
                "institute": {
                    "id": 8,
                    "inst_name": "IIT Kanpur",
                    "assets": [],
                    "inst_id": "iitk"
                },
                "exp_name": "stack",
                "overview": "overview",
                "exp_id": "cse02",
                "developers": [
                    {
                        "discipline": {
                            "dis_id": "cse",
                            "assets": [],
                            "dis_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "institute": {
                            "id": 8,
                            "inst_name": "IIT Kanpur",
                            "assets": [],
                            "inst_id": "iitk"
                        },
                        "id": 3,
                        "name": {
                            "name": "Prof. Dharamaja",
                            "id": 6
                        },
                        "email": {
                            "email": "abc@gmail.com",
                            "id": 6
                        }
                    },
                    {
                        "discipline": {
                            "dis_id": "cse",
                            "assets": [],
                            "dis_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "institute": {
                            "id": 8,
                            "inst_name": "IIT Kanpur",
                            "assets": [],
                            "inst_id": "iitk"
                        },
                        "id": 4,
                        "name": {
                            "name": "Prof. Pallavi Pawar",
                            "id": 7
                        },
                        "email": {
                            "email": "pallavi.pawar@gmail.com",
                            "id": 7
                        }
                    }
                ],
                "sections": [
                    {
                        "name": "Procedure",
                        "id": 3
                    },
                    {
                        "name": "Theory",
                        "id": 2
                    }
                ],
                "id": 3,
                "integration_status": {
                    "integration_level": 4,
                    "id": 5
                }
            }
        ],
        "integration_status": {
            "integration_level": 4,
            "id": 5
        },
        "developers": [
            {
                "discipline": {
                    "dis_id": "cse",
                    "assets": [],
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "institute": {
                    "id": 8,
                    "inst_name": "IIT Kanpur",
                    "assets": [],
                    "inst_id": "iitk"
                },
                "id": 3,
                "name": {
                    "name": "Prof. Dharamaja",
                    "id": 6
                },
                "email": {
                    "email": "abc@gmail.com",
                    "id": 6
                }
            },
            {
                "discipline": {
                    "dis_id": "cse",
                    "assets": [],
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "institute": {
                    "id": 8,
                    "inst_name": "IIT Kanpur",
                    "assets": [],
                    "inst_id": "iitk"
                },
                "id": 4,
                "name": {
                    "name": "Prof. Pallavi Pawar",
                    "id": 7
                },
                "email": {
                    "email": "pallavi.pawar@gmail.com",
                    "id": 7
                }
            }
        ],
        "id": 1
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?discipline_name=Computer Science
#+END_EXAMPLE  

**** Get labs by lab_name
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?lab_name=<lab_name>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "assets": [
            {
                "asset_type": "Image",
                "id": 1,
                "path": "vlabs.ac.in/images/static/logo.png"
            },
            {
                "asset_type": "image",
                "id": 2,
                "path": "vlabs.ac.in/images/static/image.png"
            }
        ],
        "developers": [
            {
                "discipline": {
                    "assets": [],
                    "dis_id": "cse",
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "email": {
                    "email": "abc@gmail.com",
                    "id": 6
                },
                "id": 3,
                "institute": {
                    "assets": [],
                    "id": 8,
                    "inst_id": "iitk",
                    "inst_name": "IIT Kanpur"
                },
                "name": {
                    "id": 6,
                    "name": "Prof. Dharamaja"
                }
            },
            {
                "discipline": {
                    "assets": [],
                    "dis_id": "cse",
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "email": {
                    "email": "pallavi.pawar@gmail.com",
                    "id": 7
                },
                "id": 4,
                "institute": {
                    "assets": [],
                    "id": 8,
                    "inst_id": "iitk",
                    "inst_name": "IIT Kanpur"
                },
                "name": {
                    "id": 7,
                    "name": "Prof. Pallavi Pawar"
                }
            }
        ],
        "discipline": {
            "assets": [],
            "dis_id": "cse",
            "dis_name": "Computer Science and Engineering",
            "id": 6
        },
        "experiments": [
            {
                "assets": [
                    {
                        "asset_type": "Image",
                        "id": 1,
                        "path": "vlabs.ac.in/images/static/logo.png"
                    },
                    {
                        "asset_type": "image",
                        "id": 2,
                        "path": "vlabs.ac.in/images/static/image.png"
                    }
                ],
                "developers": [
                    {
                        "discipline": {
                            "assets": [],
                            "dis_id": "cse",
                            "dis_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "email": {
                            "email": "abc@gmail.com",
                            "id": 6
                        },
                        "id": 3,
                        "institute": {
                            "assets": [],
                            "id": 8,
                            "inst_id": "iitk",
                            "inst_name": "IIT Kanpur"
                        },
                        "name": {
                            "id": 6,
                            "name": "Prof. Dharamaja"
                        }
                    },
                    {
                        "discipline": {
                            "assets": [],
                            "dis_id": "cse",
                            "dis_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "email": {
                            "email": "pallavi.pawar@gmail.com",
                            "id": 7
                        },
                        "id": 4,
                        "institute": {
                            "assets": [],
                            "id": 8,
                            "inst_id": "iitk",
                            "inst_name": "IIT Kanpur"
                        },
                        "name": {
                            "id": 7,
                            "name": "Prof. Pallavi Pawar"
                        }
                    }
                ],
                "discipline": {
                    "assets": [],
                    "dis_id": "cse",
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "exp_id": "cse02",
                "exp_name": "stack",
                "hosting_info": [
                    {
                        "hosted_on": "cloud",
                        "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                        "hosting_status": "hosted",
                        "id": 4
                    },
                    {
                        "hosted_on": "server",
                        "hosted_url": "http://iitkgp.vlab.co.in/",
                        "hosting_status": "hosted",
                        "id": 5
                    }
                ],
                "id": 3,
                "institute": {
                    "assets": [],
                    "id": 8,
                    "inst_id": "iitk",
                    "inst_name": "IIT Kanpur"
                },
                "integration_status": {
                    "id": 5,
                    "integration_level": 4
                },
                "overview": "overview",
                "sections": [
                    {
                        "id": 3,
                        "name": "Procedure"
                    },
                    {
                        "id": 2,
                        "name": "Theory"
                    }
                ]
            }
        ],
        "hosting_info": [
            {
                "hosted_on": "cloud",
                "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                "hosting_status": "hosted",
                "id": 4
            },
            {
                "hosted_on": "server",
                "hosted_url": "http://iitkgp.vlab.co.in/",
                "hosting_status": "hosted",
                "id": 5
            }
        ],
        "id": 1,
        "institute": {
            "assets": [],
            "id": 8,
            "inst_id": "iitk",
            "inst_name": "IIT Kanpur"
        },
        "integration_status": {
            "id": 5,
            "integration_level": 4
        },
        "lab_id": "cse03",
        "lab_name": "Data Structures",
        "overview": "overview"
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?lab_name=Data Structures
#+END_EXAMPLE  

**** Get labs by asset
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?asset_type=<asset_type>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[ 
 {
    "discipline": {
      "dis_id": "cse",
      "id": 1,
      "dis_name": "Computer Science"
    },
     "asset": {
      "path": "vlabs.ac.in/images/static/logo.png",
      "id": 1,
      "asset_type": "Images"
    },
    "lab_id": "cse09",
    "institute": {
      "inst_name": "IIIT Hyderabad",
      "id": 1,
      "inst_id": "iiith"
    },
    "integration_status": {
      "integration_level": 4,
      "key": "<key>"
    },
    "overview": "overview",
    "lab_name": "Data Structures",
    "experiments": [
      {
        "overview": "overview",
        "exp_name": "arrays",
        "sections": [
          {
            "name": "Procedure",
            "id": 2
          },
          {
            "name": "Theory",
            "id": 1
          }
        ],
        "id": 1,
        "exp_id": "exp9"
      }
    ],
    "id": 1
  }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?asset_type=image
#+END_EXAMPLE  
**** Get labs by lab_name keywords
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_name_keyword
  :END:    
  - URL :: /labs?keyword_lab_name=<keyword>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "discipline": {
            "dis_id": "cse",
            "assets": [],
            "dis_name": "Computer Science and Engineering",
            "id": 6
        },
        "lab_id": "cse03",
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            },
            {
                "path": "vlabs.ac.in/images/static/image.png",
                "asset_type": "image",
                "id": 2
            }
        ],
        "hosting_info": [
            {
                "hosting_status": "hosted",
                "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                "hosted_on": "cloud",
                "id": 4
            },
            {
                "hosting_status": "hosted",
                "hosted_url": "http://iitkgp.vlab.co.in/",
                "hosted_on": "server",
                "id": 5
            }
        ],
        "institute": {
            "id": 8,
            "inst_name": "IIT Kanpur",
            "assets": [],
            "inst_id": "iitk"
        },
        "overview": "overview",
        "lab_name": "Data Structures",
        "experiments": [
            {
                "discipline": {
                    "dis_id": "cse",
                    "assets": [],
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "hosting_info": [
                    {
                        "hosting_status": "hosted",
                        "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                        "hosted_on": "cloud",
                        "id": 4
                    },
                    {
                        "hosting_status": "hosted",
                        "hosted_url": "http://iitkgp.vlab.co.in/",
                        "hosted_on": "server",
                        "id": 5
                    }
                ],
                "assets": [
                    {
                        "path": "vlabs.ac.in/images/static/logo.png",
                        "asset_type": "Image",
                        "id": 1
                    },
                    {
                        "path": "vlabs.ac.in/images/static/image.png",
                        "asset_type": "image",
                        "id": 2
                    }
                ],
                "institute": {
                    "id": 8,
                    "inst_name": "IIT Kanpur",
                    "assets": [],
                    "inst_id": "iitk"
                },
                "exp_name": "stack",
                "overview": "overview",
                "exp_id": "cse02",
                "developers": [
                    {
                        "discipline": {
                            "dis_id": "cse",
                            "assets": [],
                            "dis_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "institute": {
                            "id": 8,
                            "inst_name": "IIT Kanpur",
                            "assets": [],
                            "inst_id": "iitk"
                        },
                        "id": 3,
                        "name": {
                            "name": "Prof. Dharamaja",
                            "id": 6
                        },
                        "email": {
                            "email": "abc@gmail.com",
                            "id": 6
                        }
                    },
                    {
                        "discipline": {
                            "dis_id": "cse",
                            "assets": [],
                            "dis_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "institute": {
                            "id": 8,
                            "inst_name": "IIT Kanpur",
                            "assets": [],
                            "inst_id": "iitk"
                        },
                        "id": 4,
                        "name": {
                            "name": "Prof. Pallavi Pawar",
                            "id": 7
                        },
                        "email": {
                            "email": "pallavi.pawar@gmail.com",
                            "id": 7
                        }
                    }
                ],
                "sections": [
                    {
                        "name": "Procedure",
                        "id": 3
                    },
                    {
                        "name": "Theory",
                        "id": 2
                    }
                ],
                "id": 3,
                "integration_status": {
                    "integration_level": 4,
                    "id": 5
                }
            }
        ],
        "integration_status": {
            "integration_level": 4,
            "id": 5
        },
        "developers": [
            {
                "discipline": {
                    "dis_id": "cse",
                    "assets": [],
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "institute": {
                    "id": 8,
                    "inst_name": "IIT Kanpur",
                    "assets": [],
                    "inst_id": "iitk"
                },
                "id": 3,
                "name": {
                    "name": "Prof. Dharamaja",
                    "id": 6
                },
                "email": {
                    "email": "abc@gmail.com",
                    "id": 6
                }
            },
            {
                "discipline": {
                    "dis_id": "cse",
                    "assets": [],
                    "dis_name": "Computer Science and Engineering",
                    "id": 6
                },
                "institute": {
                    "id": 8,
                    "inst_name": "IIT Kanpur",
                    "assets": [],
                    "inst_id": "iitk"
                },
                "id": 4,
                "name": {
                    "name": "Prof. Pallavi Pawar",
                    "id": 7
                },
                "email": {
                    "email": "pallavi.pawar@gmail.com",
                    "id": 7
                }
            }
        ],
        "id": 1
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?keyword_lab_name=data
#+END_EXAMPLE  

*** Implementation
#+NAME: get_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['GET'])
def get_lab():
    if request.method == 'GET':
        if 'lab_id' in request.args:
            lab_id  = request.args['lab_id']
            try:
                lab = SystemInterface.get_lab(lab_id)
                return jsonify(lab)

            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
                
        elif 'lab_name' in request.args:
            lab_name  = request.args['lab_name']
            try:
                labs = SystemInterface.get_labs_by_lab_name(lab_name)
                return jsonify(labs)
                
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

        elif 'institute_name' in request.args:
            institute_name  = request.args['institute_name']
            try:
                labs = SystemInterface.get_labs_by_institute(institute_name)
                return jsonify_list(labs)
                
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

        elif 'discipline_name' in request.args:
            discipline_name  = request.args['discipline_name']
            try:
                labs = SystemInterface.get_labs_by_discipline(discipline_name)
                return jsonify_list(labs)
                
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

        elif 'asset_type' in request.args:
            asset_type  = request.args['asset_type']
            try:
                labs = SystemInterface.get_labs_by_asset(asset_type)
                return jsonify_list(labs)
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

        elif 'keyword_lab_name' in request.args:
            keyword  = request.args['keyword_lab_name']
            try:
                labs = SystemInterface.get_labs_by_keyword_lab_name(keyword)
                return jsonify_list(labs)
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

        else:
            try:
                labs = SystemInterface.get_labs()
                return jsonify_list(labs)
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
         

#+END_SRC

*** Test Cases
**** TestGetLab
#+NAME: test_get_labs
#+BEGIN_SRC python
class TestGetLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs(self):
        print "test_get_labs_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)


        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}]}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],
                   'key': KEY,
                   'experiments': ['exp1']
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/labs", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetLabbyLabId
#+NAME: test_get_lab_by_labid
#+BEGIN_SRC python
class TestGetLabbyLabId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab_by_labid(self):
        print "test_get_lab_by_labid_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)


        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}]
                   }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],
                   'key': KEY,
                   'experiments': ['exp1']
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)


        response = self.client.get("/labs?lab_id=cse01", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabsbyInstitute
#+NAME: test_get_labs_by_institute
#+BEGIN_SRC python
class TestGetLabsbyInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_institute(self):
        print "test_get_labs_by_institute_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}]}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],
                   'key': KEY,
                   'experiments': ['exp1']
                  }


        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)


        response = self.client.get("/labs?institute_name=IIT Kanpur", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabsbyDiscipline
#+NAME: test_get_labs_by_discipline
#+BEGIN_SRC python
class TestGetLabsbyDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_discipline(self):
        print "test_get_labs_by_discipline_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}


        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}]}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],
                   'key': KEY,
                   'experiments': ['exp1']
                  }

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)


        response = self.client.get("/labs?discipline_name=Computer Science",
                                       headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabsbyLabName
#+NAME: test_get_labs_by_lab_name
#+BEGIN_SRC python
class TestGetLabsbyLabName(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_lab_name(self):
        print "test_get_labs_by_lab_name_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)


        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}]}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],
                   'key': KEY,
                   'experiments': ['exp1']
                  }


        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)


        response = self.client.get("/labs?lab_name=Data Structures", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabsbyAsset
#+NAME: test_get_labs_by_asset
#+BEGIN_SRC python
class TestGetLabsbyAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_discipline(self):
        print "test_get_labs_by_discipline_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)


        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}


        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview': 'overview',
                   'sections': [],
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'key': KEY}
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}]}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],
                   'key': KEY,
                   'experiments': ['exp1']
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/labs?discipline_name=Computer Science",
                                       headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabbyLabNameKeyword
#+NAME: test_get_lab_by_labname_keyword
#+BEGIN_SRC python
class TestGetLabbyLabNameKeyWord(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab_by_labname_keyword(self):
        print "test_get_lab_by_labname_keyword_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)


        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],
                   'key': KEY,
                   'experiments': ['exp1']
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)


        response = self.client.get("/labs?keyword_lab_name=data", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC


** Add Lab 
*** API Designs 
**** Add Lab
  :PROPERTIES:
  :CUSTOM_ID: api_add_lab
  :END:    
  - URL :: /labs

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{"lab_name": "Data Structures",
"lab_id": "cse03",
"inst_id": "iiith",
"dis_id": "cse",
"assets": [{"path":"vlabs.ac.in/images/static/logo.png","asset_type": "image"},
{"path":"vlabs.ac.in/images/static/image.png", "asset_type": "image"}],
"developers": [{"name":"Prof. Dharamaja", "email": "abc@gmail.com", 
"inst_id": "IITK", "dis_id": "CSE"}, {"name":"Prof. Pallavi Pawar", 
"email": "pallavi.pawar@gmail.com", "inst_id": "IITK", "dis_id": "CSE"}],
"hosting_info": [{"hosted_url":"http://cse14-iiith.vlabs.ac.in",
"hosting_status": "hosted", "hosted_on": "cloud"},
{"hosted_url":"http://iitkgp.vlab.co.in/", "hosting_status": "hosted", 
"hosted_on": "server"}],
"overview" : "overview",
"experiments":["cse02"],
"integration_level": 4,
"key": "<key>"
}

#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        },
        {
            "asset_type": "image",
            "id": 2,
            "path": "vlabs.ac.in/images/static/image.png"
        }
    ],
    "developers": [
        {
            "discipline": {
                "assets": [],
                "dis_id": "cse",
                "dis_name": "Computer Science and Engineering",
                "id": 6
            },
            "email": {
                "email": "abc@gmail.com",
                "id": 6
            },
            "id": 3,
            "institute": {
                "assets": [],
                "id": 8,
                "inst_id": "iitk",
                "inst_name": "IIT Kanpur"
            },
            "name": {
                "id": 6,
                "name": "Prof. Dharamaja"
            }
        },
        {
            "discipline": {
                "assets": [],
                "dis_id": "cse",
                "dis_name": "Computer Science and Engineering",
                "id": 6
            },
            "email": {
                "email": "pallavi.pawar@gmail.com",
                "id": 7
            },
            "id": 4,
            "institute": {
                "assets": [],
                "id": 8,
                "inst_id": "iitk",
                "inst_name": "IIT Kanpur"
            },
            "name": {
                "id": 7,
                "name": "Prof. Pallavi Pawar"
            }
        }
    ],
    "discipline": {
        "assets": [],
        "dis_id": "cse",
        "dis_name": "Computer Science and Engineering",
        "id": 6
    },
    "experiments": [
        {
            "assets": [
                {
                    "asset_type": "Image",
                    "id": 1,
                    "path": "vlabs.ac.in/images/static/logo.png"
                },
                {
                    "asset_type": "image",
                    "id": 2,
                    "path": "vlabs.ac.in/images/static/image.png"
                }
            ],
            "developers": [
                {
                    "discipline": {
                        "assets": [],
                        "dis_id": "cse",
                        "dis_name": "Computer Science and Engineering",
                        "id": 6
                    },
                    "email": {
                        "email": "abc@gmail.com",
                        "id": 6
                    },
                    "id": 3,
                    "institute": {
                        "assets": [],
                        "id": 8,
                        "inst_id": "iitk",
                        "inst_name": "IIT Kanpur"
                    },
                    "name": {
                        "id": 6,
                        "name": "Prof. Dharamaja"
                    }
                },
                {
                    "discipline": {
                        "assets": [],
                        "dis_id": "cse",
                        "dis_name": "Computer Science and Engineering",
                        "id": 6
                    },
                    "email": {
                        "email": "pallavi.pawar@gmail.com",
                        "id": 7
                    },
                    "id": 4,
                    "institute": {
                        "assets": [],
                        "id": 8,
                        "inst_id": "iitk",
                        "inst_name": "IIT Kanpur"
                    },
                    "name": {
                        "id": 7,
                        "name": "Prof. Pallavi Pawar"
                    }
                }
            ],
            "discipline": {
                "assets": [],
                "dis_id": "cse",
                "dis_name": "Computer Science and Engineering",
                "id": 6
            },
            "exp_id": "cse02",
            "exp_name": "stack",
            "hosting_info": [
                {
                    "hosted_on": "cloud",
                    "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                    "hosting_status": "hosted",
                    "id": 4
                },
                {
                    "hosted_on": "server",
                    "hosted_url": "http://iitkgp.vlab.co.in/",
                    "hosting_status": "hosted",
                    "id": 5
                }
            ],
            "id": 3,
            "institute": {
                "assets": [],
                "id": 8,
                "inst_id": "iitk",
                "inst_name": "IIT Kanpur"
            },
            "integration_status": {
                "id": 5,
                "integration_level": 4
            },
            "overview": "overview",
            "sections": [
                {
                    "id": 3,
                    "name": "Procedure"
                },
                {
                    "id": 2,
                    "name": "Theory"
                }
            ]
        }
    ],
    "hosting_info": [
        {
            "hosted_on": "cloud",
            "hosted_url": "http://cse14-iiith.vlabs.ac.in",
            "hosting_status": "hosted",
            "id": 4
        },
        {
            "hosted_on": "server",
            "hosted_url": "http://iitkgp.vlab.co.in/",
            "hosting_status": "hosted",
            "id": 5
        }
    ],
    "id": 1,
    "institute": {
        "assets": [],
        "id": 8,
        "inst_id": "iitk",
        "inst_name": "IIT Kanpur"
    },
    "integration_status": {
        "id": 5,
        "integration_level": 4
    },
    "lab_id": "cse03",
    "lab_name": "Data Structures",
    "overview": "overview"
}
#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs
#+END_EXAMPLE 

*** Implementation
#+NAME: add_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['POST'])
def add_lab():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            lab = SystemInterface.add_lab(data_dict)
            return_data = {}
            return_data["data"] = lab
            return_data["status"] = "success"
            return_data["status_code"] = 200
            return jsonify(return_data)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC

*** Test Cases
**** TestAddLab

#+NAME: test_add_lab
#+BEGIN_SRC python
class TestAddLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_lab(self):
        print "test_add_lab_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],
                   'overview' : 'overview',
                   'experiments': ['exp1']
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)


 #+END_SRC
   

** Get Institutes and Get Institute
*** API Design
**** Get all Institutes
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_institutes
  :END:    
  - URL :: /institutes

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "id": 1,
        "inst_name": "Amrita University",
        "assets": [],
        "inst_id": "amrita"
    },
    {
        "id": 2,
        "inst_name": "College of Engineering, Pune",
        "assets": [],
        "inst_id": "coep"
    },
    {
        "id": 3,
        "inst_name": "Dayalbagh Educational institute_cls",
        "assets": [],
        "inst_id": "dei"
    },
    {
        "id": 4,
        "inst_name": "IIT Bombay",
        "assets": [],
        "inst_id": "iitb"
    },
    {
        "id": 5,
        "inst_name": "IIT Delhi",
        "assets": [],
        "inst_id": "iitd"
    },
    {
        "id": 6,
        "inst_name": "IIT Guwahati",
        "assets": [],
        "inst_id": "iitg"
    },
    {
        "id": 7,
        "inst_name": "IIIT Hyderabad",
        "assets": [],
        "inst_id": "iiith"
    },
    {
        "id": 8,
        "inst_name": "IIT Kanpur",
        "assets": [],
        "inst_id": "iitk"
    },
    {
        "id": 9,
        "inst_name": "IIT Kharagpur",
        "assets": [],
        "inst_id": "iitkgp"
    },
    {
        "id": 10,
        "inst_name": "IIT Madras",
        "assets": [],
        "inst_id": "iitm"
    },
    {
        "id": 11,
        "inst_name": "IIT Roorkee",
        "assets": [],
        "inst_id": "iitr"
    },
    {
        "id": 12,
        "inst_name": "NIT Surathkal",
        "assets": [],
        "inst_id": "nitk"
    },
    {
        "id": 13,
        "inst_name": "IIT Hyderabad",
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            }
        ],
        "inst_id": " IITH"
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/institutes
#+END_EXAMPLE

**** Get Institute by Inst id
  :PROPERTIES:
  :CUSTOM_ID: api_get_institute_by_inst_id
  :END:    
  - URL :: /institutes?inst_id=<inst_id>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        }
    ],
    "id": 14,
    "inst_id": "IITH",
    "inst_name": "IIT Hyderabad"
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/institutes?inst_id=iiith
#+END_EXAMPLE

*** Implementation
REST API to get all institutes and get institute by inst id.
#+NAME: get_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['GET'])
def get_institute():
    if request.method == 'GET':
       if 'inst_id' in request.args:
           inst_id  = request.args['inst_id']
           try:
               institute = SystemInterface.get_institute(inst_id)
               return jsonify(institute)

           except TypeError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)
               

       else:
           try:
               institutes = SystemInterface.get_institutes()
               return jsonify_list(institutes)

           except TypeError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestGetInstitute 
 #+NAME: test_get_Institute
 #+BEGIN_SRC python
class TestGetInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institutes(self):
        print "test_get_institutes_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIIT Hyderabad',
                   'inst_id': 'IIITH',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/institutes", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetInstitutebyInstituteid
#+NAME: test_get_institute_by_instituteid
#+BEGIN_SRC python
class TestGetInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institute_by_instituteid(self):
        print "test_get_institute_by_instituteid_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/institutes?inst_id=IITK", headers=headers)
        self.assertEqual(response.status_code, 200)
#+END_SRC


** Add Institute 
*** API Design
**** Add Institute
  :PROPERTIES:
  :CUSTOM_ID: api_add_institute
  :END:    
  - URL :: /institutes

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"inst_id": " IITH",
"inst_name": "IIT Hyderabad",
"key": "<key>",
"assets": ["vlabs.ac.in/images/static/logo.png"]
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        }
    ],
    "id": 13,
    "inst_id": " IITH",
    "inst_name": "IIT Hyderabad"
}
#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/institutes
#+END_EXAMPLE
    
*** Implementation
REST API to add an institute.
#+NAME: add_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['POST'])
def add_institute():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            institute = SystemInterface.add_institute(data_dict)
            return jsonify(institute)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddInstitute 
 #+NAME: test_add_institute
 #+BEGIN_SRC python
class TestAddInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_institute(self):
        print "test_add_institute_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Disciplines and Get Discipline
*** API Design
**** Get all Disciplines
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_disciplines
  :END:    
  - URL :: /disciplines

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "dis_id": "aero",
        "assets": [],
        "dis_name": "Aerospace Engineering",
        "id": 1
    },
    {
        "dis_id": "biotech",
        "assets": [],
        "dis_name": "Biotechnology and Biomedical Engineering",
        "id": 2
    },
    {
        "dis_id": "chem-engg",
        "assets": [],
        "dis_name": "Chemical Engineering",
        "id": 3
    },
    {
        "dis_id": "chem",
        "assets": [],
        "dis_name": "Chemical Sciences",
        "id": 4
    },
    {
        "dis_id": "civil",
        "assets": [],
        "dis_name": "Civil Engineering",
        "id": 5
    },
    {
        "dis_id": "cse",
        "assets": [],
        "dis_name": "Computer Science and Engineering",
        "id": 6
    },
    {
        "dis_id": "ee",
        "assets": [],
        "dis_name": "Electrical Engineering",
        "id": 7
    },
    {
        "dis_id": "ece",
        "assets": [],
        "dis_name": "Electronics and Communication",
        "id": 8
    },
    {
        "dis_id": "hmt",
        "assets": [],
        "dis_name": "Humanities",
        "id": 9
    },
    {
        "dis_id": "mech",
        "assets": [],
        "dis_name": "Mechanical Engineering",
        "id": 10
    },
    {
        "dis_id": "phy-sc",
        "assets": [],
        "dis_name": "Physical Sciences",
        "id": 11
    },
    {
        "dis_id": "tex-engg",
        "assets": [],
        "dis_name": "Textile Engineering",
        "id": 12
    },
    {
        "dis_id": "dsgn-engg",
        "assets": [],
        "dis_name": "Design Engineering",
        "id": 13
    },
    {
        "dis_id": "mat-sc",
        "assets": [],
        "dis_name": "Material Sciences",
        "id": 14
    },
    {
        "dis_id": "ab",
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            }
        ],
        "dis_name": "Auto Mobiles",
        "id": 15
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/disciplines
#+END_EXAMPLE

**** Get Discipline by dis_id
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_disciplines
  :END:    
  - URL :: /disciplines?dis_id=<dis_id>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        }
    ],
    "dis_id": "ab",
    "dis_name": "Auto Mobiles",
    "id": 15
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/disciplines?dis_id=cse
#+END_EXAMPLE

*** Implementation  
    REST API to get discipline.
#+NAME: get_disciplines
#+BEGIN_SRC python
@api.route('/disciplines', methods=['GET'])
def get_discipline():
    if request.method == 'GET':
        if 'dis_id' in request.args:
            dis_id  = request.args['dis_id']
            try:
                discipline = SystemInterface.get_discipline(dis_id)
                return jsonify(discipline)
            
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                        "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
                
        
        else:

            try:
                disciplines = SystemInterface.get_disciplines()
                return jsonify_list(disciplines)
            
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
#+END_SRC

*** Test Cases
**** TestGetDiscipline
 #+NAME: test_get_discipline
 #+BEGIN_SRC python
class TestGetDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_disciplines(self):
        print "test_get_discipline_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'IIT Delhi',
                   'dis_id': 'EEE10',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/disciplines", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetDisciplinebyDisId
 #+NAME: test_get_discipline_by_disid
 #+BEGIN_SRC python
class TestGetDisciplineByDisId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_discipline_by_disid(self):
        print "test_get_discipline_by_disid_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'IIT Delhi',
                   'dis_id': 'EEE10',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/disciplines?dis_id=EEE10",
                                       headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Add Discipline
*** API Design
**** Add Discipline
  :PROPERTIES:
  :CUSTOM_ID: api_add_discipline
  :END:    
  - URL :: /disciplines

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"dis_id": "ab",
"assets": ["vlabs.ac.in/images/static/logo.png"], 
"dis_name": "Auto Mobiles",
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        }
    ],
    "dis_id": "ab",
    "dis_name": "Auto Mobiles",
    "id": 15
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/discipline
#+END_EXAMPLE

*** Implementation  
    REST API to add discipline.
#+NAME: add_discipline
#+BEGIN_SRC python
@api.route('/disciplines', methods=['POST'])
def add_discipline():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            dis = SystemInterface.add_discipline(data_dict)
            return jsonify(dis)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddDiscipline
 #+NAME: test_add_discipline
 #+BEGIN_SRC python
class TestAddDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_discipline(self):
        print "test_add_discipline_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'IIT Delhi',
                   'dis_id': 'EEE10',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Experiments and Get Experiment
*** API Designs
**** Get all experiments
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_experiments
  :END:    
  - URL :: /experiments

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "discipline": {
            "dis_id": "cse",
            "id": 1,
            "dis_name": "Computer Science"
        },
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            }
        ],
        "institute": {
            "inst_name": "IIIT Hyderabad",
            "id": 1,
            "inst_id": "iiith"
        },
        "exp_name": "stack",
        "hostinginfos": [
            {
                "hosting_status": "hosted",
                "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                "hosted_on": "cloud",
                "id": 1
            }
        ],
        "integrationstatus": {
            "integration_level": 4,
            "id": 1
        },
        "overview": "overview",
        "exp_id": "ece01",
        "developers": [
            {
                "id": 1,
                "name": {
                    "name": "Prof. Dharamraj",
                    "id": 4
                },
                "email": {
                    "email": "dharamraj@gmail.com",
                    "id": 4
                }
            }
        ],
        "sections": [
            {
                "name": "Procedure",
                "id": 2
            },
            {
                "name": "Theory",
                "id": 1
            }
        ],
        "id": 2
    },
    {
        "discipline": {
            "dis_id": "cse",
            "id": 1,
            "dis_name": "Computer Science"
        },
        "assets": [],
        "institute": {
            "inst_name": "IIIT Hyderabad",
            "id": 1,
            "inst_id": "iiith"
        },
        "exp_name": "stack",
        "hostinginfos": [],
        "integrationstatus": {
            "integration_level": 4,
            "id": 1
        },
        "overview": "overview",
        "exp_id": "ece02",
        "developers": [],
        "sections": [],
        "id": 4
    },
    {
        "discipline": {
            "dis_id": "cse",
            "id": 1,
            "dis_name": "Computer Science"
        },
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            }
        ],
        "institute": {
            "inst_name": "IIIT Hyderabad",
            "id": 1,
            "inst_id": "iiith"
        },
        "exp_name": "stack",
        "hostinginfos": [
            {
                "hosting_status": "hosted",
                "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                "hosted_on": "cloud",
                "id": 1
            }
        ],
        "integrationstatus": {
            "integration_level": 4,
            "id": 1
        },
        "overview": "overview",
        "exp_id": "cse03",
        "developers": [
            {
                "id": 1,
                "name": {
                    "name": "Prof. Dharamraj",
                    "id": 4
                },
                "email": {
                    "email": "dharamraj@gmail.com",
                    "id": 4
                }
            }
        ],
        "sections": [
            {
                "name": "Procedure",
                "id": 2
            },
            {
                "name": "Theory",
                "id": 1
            }
        ],
        "id": 6
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments
#+END_EXAMPLE

**** Get experiment by exp_id
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_experiments
  :END:    
  - URL :: /experiments?exp_id=<exp_id>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        },
        {
            "asset_type": "image",
            "id": 2,
            "path": "vlabs.ac.in/images/static/image.png"
        }
    ],
    "developers": [
        {
            "discipline": {
                "assets": [],
                "dis_id": "cse",
                "dis_name": "Computer Science and Engineering",
                "id": 6
            },
            "email": {
                "email": "abc@gmail.com",
                "id": 6
            },
            "id": 3,
            "institute": {
                "assets": [],
                "id": 8,
                "inst_id": "iitk",
                "inst_name": "IIT Kanpur"
            },
            "name": {
                "id": 6,
                "name": "Prof. Dharamaja"
            }
        },
        {
            "discipline": {
                "assets": [],
                "dis_id": "cse",
                "dis_name": "Computer Science and Engineering",
                "id": 6
            },
            "email": {
                "email": "pallavi.pawar@gmail.com",
                "id": 7
            },
            "id": 4,
            "institute": {
                "assets": [],
                "id": 8,
                "inst_id": "iitk",
                "inst_name": "IIT Kanpur"
            },
            "name": {
                "id": 7,
                "name": "Prof. Pallavi Pawar"
            }
        }
    ],
    "discipline": {
        "assets": [],
        "dis_id": "cse",
        "dis_name": "Computer Science and Engineering",
        "id": 6
    },
    "exp_id": "cse01",
    "exp_name": "stack",
    "hosting_info": [
        {
            "hosted_on": "cloud",
            "hosted_url": "http://cse14-iiith.vlabs.ac.in",
            "hosting_status": "hosted",
            "id": 4
        },
        {
            "hosted_on": "server",
            "hosted_url": "http://iitkgp.vlab.co.in/",
            "hosting_status": "hosted",
            "id": 5
        }
    ],
    "id": 1,
    "institute": {
        "assets": [],
        "id": 8,
        "inst_id": "iitk",
        "inst_name": "IIT Kanpur"
    },
    "integration_status": {
        "id": 5,
        "integration_level": 4
    },
    "overview": "overview",
    "sections": [
        {
            "id": 3,
            "name": "Procedure"
        },
        {
            "id": 2,
            "name": "Theory"
        }
    ]
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments?exp_id=exp9
#+END_EXAMPLE

*** Implementation
 REST API to get single experiment by exp_id and get all experiments.
#+NAME: get_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['GET'])
def get_experiment():
    if request.method == 'GET':
        if 'exp_id' in request.args:
            exp_id  = request.args['exp_id']
            try:
                current_app.logger.debug("execute get_exp_by_expid")
                exp = SystemInterface.get_experiment(exp_id)
                current_app.logger.debug("executed get_exp_by_expid")
                return jsonify(exp)

            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
        else:
            try:
                experiments = SystemInterface.get_experiments()
                return jsonify_list(experiments)

            except NotAuthorizedError as e:
                err_str = str(e)
                msg = {"status": "failure",
                           "status code": 401,
                           "msg": err_str}
                abort(401, msg)
                
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                           "msg": err_str }
                abort(500, msg)
                
            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
                
            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
                abort(404, msg)
                
            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
                
#+END_SRC

*** Test Cases
**** TestGetExperiment
 #+NAME: test_get_Experiment
 #+BEGIN_SRC python
class TestGetExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiments(self):
        print "test_get_experiments_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                     headers=headers)

        payload = {'integration_level': 4,
                    'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}  

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'stack',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections' : [],
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',         
                   'integration_level': 4,
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}]
                   }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetExperimentbyExpid
#+NAME: test_get_exp_by_expid
#+BEGIN_SRC python
class TestGetExp(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiment_by_expid(self):
        print "test_get_experiment_by_expid_in_rest"
        payload = {'integration_level': 4,
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                       headers=headers)


        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers) 

        payload = {'exp_name': 'stack',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections' : [],
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'key': KEY,
                   'integration_level': 4,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}]
                   }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments", headers=headers)
        self.assertEqual(response.status_code, 200)


#+END_SRC


** Add Experiment 
*** API Designs
**** Add Experiment
  :PROPERTIES:
  :CUSTOM_ID: api_add_experiment
  :END:    
  - URL :: /experiments

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{"exp_name": "stack", 
"exp_id": "cse02",
"inst_id": "iiith",
"dis_id": "cse",
"overview" : "overview",
"assets": [{"path":"vlabs.ac.in/images/static/logo.png","asset_type": "image"},
 {"path":"vlabs.ac.in/images/static/image.png", "asset_type": "image"}],
"developers": [{"name":"Prof. Dharamaja", "email": "abc@gmail.com", 
"inst_id": "IITK", "dis_id": "CSE"}, {"name":"Prof. Pallavi Pawar", 
"email": "pallavi.pawar@gmail.com", "inst_id": "IITK", "dis_id": "CSE"}],
"hosting_info": [{"hosted_url":"http://cse14-iiith.vlabs.ac.in",
 "hosting_status": "hosted", "hosted_on": "cloud"},
 {"hosted_url":"http://iitkgp.vlab.co.in/", "hosting_status": "hosted", 
"hosted_on": "server"}],
"sections": ["Theory", "Procedure"],
"integration_level": 4,
"key": "<key>"
}              
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        },
        {
            "asset_type": "image",
            "id": 2,
            "path": "vlabs.ac.in/images/static/image.png"
        }
    ],
    "developers": [
        {
            "discipline": {
                "assets": [],
                "dis_id": "cse",
                "dis_name": "Computer Science and Engineering",
                "id": 6
            },
            "email": {
                "email": "abc@gmail.com",
                "id": 6
            },
            "id": 3,
            "institute": {
                "assets": [],
                "id": 8,
                "inst_id": "iitk",
                "inst_name": "IIT Kanpur"
            },
            "name": {
                "id": 6,
                "name": "Prof. Dharamaja"
            }
        },
        {
            "discipline": {
                "assets": [],
                "dis_id": "cse",
                "dis_name": "Computer Science and Engineering",
                "id": 6
            },
            "email": {
                "email": "pallavi.pawar@gmail.com",
                "id": 7
            },
            "id": 4,
            "institute": {
                "assets": [],
                "id": 8,
                "inst_id": "iitk",
                "inst_name": "IIT Kanpur"
            },
            "name": {
                "id": 7,
                "name": "Prof. Pallavi Pawar"
            }
        }
    ],
    "discipline": {
        "assets": [],
        "dis_id": "cse",
        "dis_name": "Computer Science and Engineering",
        "id": 6
    },
    "exp_id": "cse02",
    "exp_name": "stack",
    "hosting_info": [
        {
            "hosted_on": "cloud",
            "hosted_url": "http://cse14-iiith.vlabs.ac.in",
            "hosting_status": "hosted",
            "id": 4
        },
        {
            "hosted_on": "server",
            "hosted_url": "http://iitkgp.vlab.co.in/",
            "hosting_status": "hosted",
            "id": 5
        }
    ],
    "id": 3,
    "institute": {
        "assets": [],
        "id": 8,
        "inst_id": "iitk",
        "inst_name": "IIT Kanpur"
    },
    "integration_status": {
        "id": 5,
        "integration_level": 4
    },
    "overview": "overview",
    "sections": [
        {
            "id": 2,
            "name": "Theory"
        },
        {
            "id": 3,
            "name": "Procedure"
        }
    ]
}
#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments
#+END_EXAMPLE

*** Implementation
 REST API to add an experiment.
#+NAME: add_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['POST'])
def get_add_experiment():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            exp = SystemInterface.add_experiment(data_dict)
            return jsonify(exp.to_client())

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddExperiment
 #+NAME: test_add_experiment
 #+BEGIN_SRC python
class TestAddExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_experiment(self):
        print "test_add_experiment_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                       headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}   

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers) 

        payload = {'integration_level': 4,
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'stack',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections' : [],
                   'integration_level': 4,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}]}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Sections
*** API Design
**** Get all Sections
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_sections
  :END:    
  - URL :: /sections

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
[{"name": "Theory", "id": 1}]
#+END_EXAMPLE    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/sections
#+END_EXAMPLE
    
*** Implementation 
REST API to get Sections.
#+NAME: get_sections
#+BEGIN_SRC python
@api.route('/sections', methods=['GET'])
def get_sections():
    if request.method == 'GET':
        try:
            sections = SystemInterface.get_sections()

            return jsonify_list(sections)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestGetSections
 #+NAME: test_get_Sections
 #+BEGIN_SRC python
class TestGetSections(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_sections(self):
        print "test_get_sections_in_rest"

        payload = {'name': 'Theory',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/sections", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Add Section
*** API Design
**** Add sections
  :PROPERTIES:
  :CUSTOM_ID: api_add_sections
  :END:    
  - URL :: /sections

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE

{
  "key": "<key>",
  "name" : "Theory"
}

#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "name": "Theory"
}
#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/save_lab_spec_data
#+END_EXAMPLE 

*** Implementation 
REST API to  add Section.
#+NAME: add_section
#+BEGIN_SRC python
@api.route('/sections', methods=['POST'])
def add_section():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            section = SystemInterface.add_section(data_dict)
            return jsonify(section)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddSection
 #+NAME: test_add_section
 #+BEGIN_SRC python
class TestAddSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_section(self):
        print "test_add_section_in_rest"
        payload = {'name': 'Quiz',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Hosting_Info and Get HostingInfo
*** API Design
**** Get all Hosting_Info
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_hosting_info
  :END:    
  - URL :: /hosting_info

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[{"hosting_status": "hosted", "hosted_url": "http://cse14-iiith.vlabs.ac.in", "hosted_on": "cloud", "id": 1}]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/hosting_info
#+END_EXAMPLE

**** Get Hosting_Info by hosted_url
  :PROPERTIES:
  :CUSTOM_ID: api_get_hosting_info_by_hosted_url
  :END:    
  - URL :: /hosting_infos?hosted_url=<hosted_url>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "hosted_on": "cloud",
    "hosted_url": "http://cse14-iiith.vlabs.ac.in",
    "hosting_status": "hosted",
    "id": 1
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/assets?path=http://cse14-iiith.vlabs.ac.in
#+END_EXAMPLE
*** Implementation
REST API to get all hosting_info.
#+NAME: get_hosting_info
#+BEGIN_SRC python
@api.route('/hosting_info', methods=['GET'])
def get_hosting_info():
    if request.method == 'GET':
       if 'hosted_url' in request.args:
           hosted_url  = request.args['hosted_url']
           try:
               hosting_info = SystemInterface.get_hosting_info_by_hosted_url(hosted_url)
               return jsonify(hosting_info)

           except NotAuthorizedError as e:
               err_str = str(e)
               msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
               abort(401, msg)

           except TypeError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)
       else:
           try:
               hosting_info = SystemInterface.get_hosting_info()
               return jsonify_list(hosting_info)

           except NotAuthorizedError as e:
               err_str = str(e)
               msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
               abort(401, msg)

           except TypeError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)
#+END_SRC

*** Test Cases
**** TestGetHosting_Info 
 #+NAME: test_get_Hosting_Info
 #+BEGIN_SRC python
class TestGetHosting_Info(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_hosting_info(self):
        print "test_get_hosting_info_in_rest"

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/hosting_info", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetHostingInfoByHostedURL
 #+NAME: test_get_hosting_info_by_hosted_url
 #+BEGIN_SRC python
class TestGetAssetByPath(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_asset_by_path(self):
        print "test_get_hosting_info_by_hosted_url_in_rest"

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/hosting_info", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC


** Add Hosting_Info
*** API Design
**** Add Hosting_Info
  :PROPERTIES:
  :CUSTOM_ID: api_add_hosting_info
  :END:    
  - URL :: /hosting_info

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"hosted_url": "http://cse14-iiith.vlabs.ac.in",
"hosting_status": "hosted",
"hosted_on": "cloud",
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "hosted_on": "cloud", 
  "hosted_url": "http://cse14-iiith.vlabs.ac.in", 
  "hosting_status": "hosted", 
  "id": 1
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/hosting_info
#+END_EXAMPLE
    
*** Implementation
REST API to add an hosting_info.
#+NAME: add_hosting_info
#+BEGIN_SRC python
@api.route('/hosting_info', methods=['POST'])
def add_hosting_info():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            hosting_info = SystemInterface.add_hosting_info(data_dict)
            return jsonify(hosting_info)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddHosting_Info
 #+NAME: test_add_hosting_info
 #+BEGIN_SRC python
class TestAddHosting_Info(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_hosting_info(self):
        print "test_add_hosting_info_in_rest"
        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Integration_Status and Get IntegrationStatus
*** API Design
**** Get all Integration_Status
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_integration_status
  :END:    
  - URL :: /integration_status

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "integration_level": 0,
        "id": 1
    },
    {
        "integration_level": 1,
        "id": 2
    },
    {
        "integration_level": 2,
        "id": 3
    },
    {
        "integration_level": 3,
        "id": 4
    },
    {
        "integration_level": 4,
        "id": 5
    },
    {
        "integration_level": 5,
        "id": 6
    },
    {
        "integration_level": 6,
        "id": 7
    },
    {
        "integration_level": 9,
        "id": 8
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/integration_status
#+END_EXAMPLE

*** Implementation
REST API to get all integration_status.
#+NAME: get_integration_status
#+BEGIN_SRC python
@api.route('/integration_status', methods=['GET'])
def get_integration_status():
    if request.method == 'GET':
       if 'integration_level' in request.args:
           integration_level  = request.args['integration_level']
           try:
               integration_status = SystemInterface.get_integration_status_by_IL\
                 (integration_level)
               return jsonify(integration_status.to_client())

           except NotAuthorizedError as e:
               err_str = str(e)
               msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
               abort(401, msg)

           except TypeError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                        "msg": err_str}
               abort(404, msg)

           except Exception as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

       else:
           try:
               integration_status = SystemInterface.get_integration_status()
               return jsonify_list(integration_status)

           except NotAuthorizedError as e:
               err_str = str(e)
               msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
               abort(401, msg)

           except TypeError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)
#+END_SRC

*** Test Cases
**** TestGetIntegration_Status 
 #+NAME: test_get_Integration_Status
 #+BEGIN_SRC python
class TestGetIntegration_Status(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_integration_status(self):
        print "test_get_integration_status_in_rest"

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/integration_status", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Add Integration_Status 
*** API Design
**** Add Integration_Status
  :PROPERTIES:
  :CUSTOM_ID: api_add_integration_status
  :END:    
  - URL :: /integration_status

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"integration_level": 9,
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "integration_level": 4
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/integration_status
#+END_EXAMPLE
    
*** Implementation
REST API to add an integration_status.
#+NAME: add_integration_status
#+BEGIN_SRC python
@api.route('/integration_status', methods=['POST'])
def add_integration_status():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            integration_status = SystemInterface.add_integration_status(data_dict)
            return jsonify(integration_status)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddIntegration_Status 
 #+NAME: test_add_integration_status
 #+BEGIN_SRC python
class TestAddIntegration_Status(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_integration_status(self):
        print "test_add_integration_status_in_rest"
        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Emails and Get Email
*** API Design
**** Get all Emails
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_emails
  :END:    
  - URL :: /emails

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[{"email": "dharamraj@gmail.com", "id": 1}]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/emails
#+END_EXAMPLE

*** Implementation
REST API to get all emails.
#+NAME: get_email
#+BEGIN_SRC python
@api.route('/emails', methods=['GET'])
def get_email():
    if request.method == 'GET':
       if 'email' in request.args:
           email  = request.args['email']
           try:
               email = SystemInterface.get_email(email)
               return jsonify(email)

           except TypeError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

       else:
           try:
               emails = SystemInterface.get_emails()
               return jsonify_list(emails)

           except TypeError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)
#+END_SRC

*** Test Cases
**** TestGetEmail
 #+NAME: test_get_Email
 #+BEGIN_SRC python
class TestGetEmail(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_emails(self):
        print "test_get_emails_in_rest"

        payload = {'email': 'dharamraj@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/emails", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/emails", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Add Email
*** API Design
**** Add Email
  :PROPERTIES:
  :CUSTOM_ID: api_add_email
  :END:    
  - URL :: /emails

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"email": "dharamraj@gmail.com",
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "email": "dharamraj@gmail.com", 
  "id": 1
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/emails
#+END_EXAMPLE
    
*** Implementation
REST API to add an email.
#+NAME: add_email
#+BEGIN_SRC python
@api.route('/emails', methods=['POST'])
def add_email():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            email = SystemInterface.add_email(data_dict)
            return jsonify(email)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddEmail
 #+NAME: test_add_email
 #+BEGIN_SRC python
class TestAddEmail(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_email(self):
        print "test_add_email_in_rest"
        payload = {'email': 'dharamraj@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/emails", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Names
*** API Design
**** Get all names
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_sections
  :END:    
  - URL :: /names

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
[{"name" : "Prof. Dharamraj", "id": 1}]
#+END_EXAMPLE    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/names
#+END_EXAMPLE
    
*** Implementation 
REST API to get Names.
#+NAME: get_names
#+BEGIN_SRC python
@api.route('/names', methods=['GET'])
def get_names():
    if request.method == 'GET':
        try:
            names = SystemInterface.get_names()

            return jsonify_list(names)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestGetNames
 #+NAME: test_get_names
 #+BEGIN_SRC python
class TestGetNames(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_names(self):
        print "test_get_names_in_rest"

        payload = {'name': 'Prof. Dharamraj',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/names", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/names", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
 
** Add Name
*** API Design
**** Add names
  :PROPERTIES:
  :CUSTOM_ID: api_add_names
  :END:    
  - URL :: /names

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE

{
  "key": "<key>",
  "name" : "Prof. Dharamraj"
}

#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "name": "Prof. Dharamraj"
}
#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/names
#+END_EXAMPLE 

*** Implementation 
REST API to  add Name.
#+NAME: add_name
#+BEGIN_SRC python
@api.route('/names', methods=['POST'])
def add_name():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            name = SystemInterface.add_name(data_dict)
            return jsonify(name)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddName
 #+NAME: test_add_name
 #+BEGIN_SRC python
class TestAddName(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_name(self):
        print "test_add_name_in_rest"
        payload = {'name': 'Prof. Dharamraj',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/names", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Developers and Get Developer
*** API Design
**** Get all Developers
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_developers
  :END:    
  - URL :: /developers

  - Method :: GET

  - URL Params ::  None

  - Payload ::

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "discipline": {
            "dis_id": "cse",
            "assets": [],
            "dis_name": "Computer Science and Engineering",
            "id": 6
        },
        "institute": {
            "id": 8,
            "inst_name": "IIT Kanpur",
            "assets": [],
            "inst_id": "iitk"
        },
        "id": 1,
        "name": {
            "name": "Prof. Dharamrajiiiiii",
            "id": 4
        },
        "email": {
            "email": "dharamrajiiiiii@gmail.com",
            "id": 4
        }
    },
    {
        "discipline": {
            "dis_id": "cse",
            "assets": [],
            "dis_name": "Computer Science and Engineering",
            "id": 6
        },
        "institute": {
            "id": 8,
            "inst_name": "IIT Kanpur",
            "assets": [],
            "inst_id": "iitk"
        },
        "id": 2,
        "name": {
            "name": "Prof. Dharam",
            "id": 5
        },
        "email": {
            "email": "dharam@gmail.com",
            "id": 5
        }
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/developers
#+END_EXAMPLE

*** Implementation
REST API to get all developers.
#+NAME: get_developer
#+BEGIN_SRC python
@api.route('/developers', methods=['GET'])
def get_developer():
    if request.method == 'GET':
       if 'email' in request.args:
           email  = request.args['email']
           try:
               developer = SystemInterface.get_developer(email)
               return jsonify(developer)
           
           except TypeError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str }
               abort(500, msg)

           except StateError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
           
           except NotFoundError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
               abort(404, msg)
           
           except Exception as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
           
       else:
           try:
               developers = SystemInterface.get_developers()
               return jsonify_list(developers)

           except TypeError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str }
               abort(500, msg)
           
           except StateError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
           
           except NotFoundError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
               abort(404, msg)
           
           except Exception as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
#+END_SRC

*** Test Cases
**** TestGetDeveloper
 #+NAME: test_get_Developer
 #+BEGIN_SRC python
class TestGetDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_developers(self):
        print "test_get_developers_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                       headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dev_name': 'Prof. Dharamraj',
                   'email_id': 'dharamraj@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/developers", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Add Developer
*** API Design
**** Add Developer
  :PROPERTIES:
  :CUSTOM_ID: api_add_developer
  :END:    
  - URL :: /developers

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"name": "Prof. Dharam",
"email": "dharam@gmail.com",
"inst_id": "IITK",
"dis_id": "cse",
"assets": ["vlabs.ac.in/static/images/logo.png"],
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
[
    {
        "discipline": {
            "dis_id": "cse",
            "assets": [],
            "dis_name": "Computer Science and Engineering",
            "id": 6
        },
        "institute": {
            "id": 8,
            "inst_name": "IIT Kanpur",
            "assets": [],
            "inst_id": "iitk"
        },
        "id": 1,
        "name": {
            "name": "Prof. Dharamrajiiiiii",
            "id": 4
        },
        "email": {
            "email": "dharamrajiiiiii@gmail.com",
            "id": 4
        }
    },
    {
        "discipline": {
            "dis_id": "cse",
            "assets": [],
            "dis_name": "Computer Science and Engineering",
            "id": 6
        },
        "institute": {
            "id": 8,
            "inst_name": "IIT Kanpur",
            "assets": [],
            "inst_id": "iitk"
        },
        "id": 2,
        "name": {
            "name": "Prof. Dharam",
            "id": 5
        },
        "email": {
            "email": "dharam@gmail.com",
            "id": 5
        }
    }
]

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/developers
#+END_EXAMPLE
    
*** Implementation
REST API to add an developer.
#+NAME: add_developer
#+BEGIN_SRC python
@api.route('/developers', methods=['POST'])
def add_developer():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            developer = SystemInterface.add_developer(data_dict)
            return jsonify(developer.to_client())

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddDeveloper
 #+NAME: test_add_developer
 #+BEGIN_SRC python
class TestAddDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_developer(self):
        print "test_add_developer_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamraj',
                   'email': 'dharamraj@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Lab
   
*** API Design
**** Update lab by labid
  :PROPERTIES:
  :CUSTOM_ID: api_update_lab_by_labid
  :END:    
  - URL :: /labs/<lab_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{"lab_name": "Computer Programming",
"experiments":["exp1"],
"lab_id": "cse03",
"inst_id": "iiith",
"dis_id": "cse",
"assets": [{"path":"vlabs.ac.in/images/static/logo.png","asset_type": "image"},
{"path":"vlabs.ac.in/images/static/image.png", "asset_type": "image"}],
"developers": [{"name":"Prof. Dharamaja", "email": "abc@gmail.com", 
"inst_id": "IITK", "dis_id": "CSE"}, {"name":"Prof. Pallavi Pawar", 
"email": "pallavi.pawar@gmail.com", "inst_id": "IITK", "dis_id": "CSE"}],
"hosting_info": [{"hosted_url":"http://cse14-iiith.vlabs.ac.in",
"hosting_status": "hosted", "hosted_on": "cloud"},
{"hosted_url":"http://iitkgp.vlab.co.in/", "hosting_status": "hosted", 
"hosted_on": "server"}],
"overview" : "overview",
"experiments":["cse01"],
"integration_level": 4,
"key": "<key>"
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "assets": [
    {
      "asset_type": "Image", 
      "id": 1, 
      "path": "vlabs.ac.in/images/static/logo.png"
    }
  ], 
  "developers": [], 
  "discipline": {
    "dis_id": "cse", 
    "dis_name": "Computer Science", 
    "id": 1
  }, 
  "experiments": [], 
  "hosting_info": {
    "hosted_on": "cloud", 
    "hosted_url": "http://cse14-iiith.vlabs.ac.in", 
    "hosting_status": "hosted", 
    "id": 1
  }, 
  "id": 2, 
  "institute": {
    "id": 1, 
    "inst_id": "iiith", 
    "inst_name": "IIIT Hyderabad"
  }, 
  "integration_status": {
    "id": 2, 
    "integration_level": 4
  }, 
  "lab_id": "cse02", 
  "lab_name": "Computer Programming", 
  "overview": "cp overview"
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
 http://localhost:5000/labs?lab_id=cse02
#+END_EXAMPLE
   
*** Implementation
#+NAME: update_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['PUT'])
def update():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'lab_id' in request.args:
            data_dict['lab_id']  = request.args['lab_id']
        else:
            abort(500, "Please provide the 'lab_id' to update the lab")
        
        try:
            lab = SystemInterface.update_lab(data_dict)
            return jsonify(lab)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC
*** Test Cases
**** TestUpdateLab
#+NAME: test_update_lab
#+BEGIN_SRC python
class TestUpdateLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_lab(self):
        print "test_update_lab"
        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],
                   'overview' : 'overview',
                   'experiments': ['exp1']
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)


        payload1 = {'asset_type': 'Video',
                   'path': 'vlabs.ac.in/images/video/icon.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'inst_name': 'IIT Kharagpur',
                    'inst_id': 'IITKgp',
                    'assets': ['vlabs.ac.in/images/video/icon.png'],
                    'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'dis_name': 'Electronics & Comuunication Engg.',
                    'dis_id': 'ECE',
                    'assets': ['vlabs.ac.in/images/video/icon.png'],
                    'key': KEY}


        response = self.client.post("/disciplines", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'lab_name': 'Computer Programming',
                   'key': KEY,
                   'overview' : 'cp overview',
                   'inst_id': 'IITKgp',
                   'integration_level': 4,
                   'dis_id': 'ECE',
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse13-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitk.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],
                   'experiments':['exp1']
                   }


        response = self.client.put("/labs?lab_id=cse01", 
                                       data=json.dumps(payload1),
                                       headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Lab
*** API Design
**** Delete lab by lab_id
  :PROPERTIES:
  :CUSTOM_ID: api_delete_lab_by_lab_id
  :END:    
  - URL :: /labs?<lab_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/labs?lab_id=cse09&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['DELETE'])
def delete_lab():
    if request.method == 'DELETE':
        if 'lab_id' in request.args and 'key' in request.args:
            lab_id  = request.args['lab_id']
            key = request.args['key']
            try:
                lab = SystemInterface.delete_lab(lab_id, key)
                return jsonify({"status":"sucess"})
            except NotAuthorizedError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                       "msg": err_str}
                abort(401, msg)

            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)
            
            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                           "msg": err_str}
                abort(500, msg)
            
            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
                abort(404, msg)
            
            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            
#+END_SRC
*** Test Cases
**** TestDeleteLab
 #+NAME: test_delete_lab
 #+BEGIN_SRC python
class TestDeleteLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_lab(self):
        print "test_delete_lab"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}
        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)
  
        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'integration_level': 4,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'sections': [],
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],}

        headers = {'Content-Type': 'application/json'}
        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)        

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'integration_level': 4,
                   'dis_id': 'CSE',
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],
                   'experiments':['exp1'],
                   'key': KEY
                   }
        headers = {'Content-Type': 'application/json'}
        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/labs?lab_id=cse01&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Experiment
*** API Design
**** Update experiment by expid
  :PROPERTIES:
  :CUSTOM_ID: api_update_experiment_by_expid
  :END:    
  - URL :: /experiments/<exp_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{"exp_name": "2D Array", 
"exp_id": "cse02",
"inst_id": "iiith",
"dis_id": "cse",
"overview" : "overview",
"assets": [{"path":"vlabs.ac.in/images/static/logo.png","asset_type": "image"},
 {"path":"vlabs.ac.in/images/static/image.png", "asset_type": "image"}],
"developers": [{"name":"Prof. Dharamaja", "email": "abc@gmail.com", 
"inst_id": "IITK", "dis_id": "CSE"}, {"name":"Prof. Pallavi Pawar", 
"email": "pallavi.pawar@gmail.com", "inst_id": "IITK", "dis_id": "CSE"}],
"hosting_info": [{"hosted_url":"http://cse14-iiith.vlabs.ac.in",
 "hosting_status": "hosted", "hosted_on": "cloud"},
 {"hosted_url":"http://iitkgp.vlab.co.in/", "hosting_status": "hosted", 
"hosted_on": "server"}],
"sections": ["Theory", "Procedure"],
"integration_level": 4,
"key":"<key>"
}

#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        },
        {
            "asset_type": "image",
            "id": 2,
            "path": "vlabs.ac.in/images/static/image.png"
        }
    ],
    "developers": [
        {
            "discipline": {
                "assets": [],
                "dis_id": "cse",
                "dis_name": "Computer Science and Engineering",
                "id": 6
            },
            "email": {
                "email": "abc@gmail.com",
                "id": 6
            },
            "id": 3,
            "institute": {
                "assets": [],
                "id": 8,
                "inst_id": "iitk",
                "inst_name": "IIT Kanpur"
            },
            "name": {
                "id": 6,
                "name": "Prof. Dharamaja"
            }
        },
        {
            "discipline": {
                "assets": [],
                "dis_id": "cse",
                "dis_name": "Computer Science and Engineering",
                "id": 6
            },
            "email": {
                "email": "pallavi.pawar@gmail.com",
                "id": 7
            },
            "id": 4,
            "institute": {
                "assets": [],
                "id": 8,
                "inst_id": "iitk",
                "inst_name": "IIT Kanpur"
            },
            "name": {
                "id": 7,
                "name": "Prof. Pallavi Pawar"
            }
        }
    ],
    "discipline": {
        "assets": [],
        "dis_id": "cse",
        "dis_name": "Computer Science and Engineering",
        "id": 6
    },
    "exp_id": "cse01",
    "exp_name": "2D Array",
    "hosting_info": [
        {
            "hosted_on": "cloud",
            "hosted_url": "http://cse14-iiith.vlabs.ac.in",
            "hosting_status": "hosted",
            "id": 4
        },
        {
            "hosted_on": "server",
            "hosted_url": "http://iitkgp.vlab.co.in/",
            "hosting_status": "hosted",
            "id": 5
        }
    ],
    "id": 1,
    "institute": {
        "assets": [],
        "id": 7,
        "inst_id": "iiith",
        "inst_name": "IIIT Hyderabad"
    },
    "integration_status": {
        "id": 5,
        "integration_level": 4
    },
    "overview": "overview",
    "sections": [
        {
            "id": 2,
            "name": "Theory"
        },
        {
            "id": 3,
            "name": "Procedure"
        }
    ]
}
#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/experiments?exp_id=exp9
#+END_EXAMPLE

*** Implementation  
#+NAME: update_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['PUT'])
def update_experiment():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'exp_id' in request.args:
            data_dict['exp_id']  = request.args['exp_id']
        else:
            abort(500, "Please provide the 'exp_id' to update the exp")
        
        try:
            exp = SystemInterface.update_experiment(data_dict)
            return jsonify(exp)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC
*** Test Cases
***** TestUpdateExperiment
 #+NAME: test_update_experiment
 #+BEGIN_SRC python
class TestUpdateExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_experiment(self):
        print "test_update_experiment"
        
        payload = {'integration_level': 4,
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                  headers=headers)

        payload = {'name': 'Theory',
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'stack',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections' : ['Theory', 'Procedure'],
                   'integration_level': 4,
                   'inst_id': 'IITKgp',
                   'dis_id': 'ece',
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}]}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)
        
        payload = {'integration_level': 3,
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)
            
        payload1 = {'exp_name': 'queue',
                   'overview' : 'overview',
                   'sections' : ['Theory', 'Procedure'],
                   'integration_level': 3,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}]}

        headers = {'Content-Type': 'application/json'}

        response = self.client.put("/experiments?exp_id=cse01", 
                                       data=json.dumps(payload1),
                                       headers=headers)
        self.assertEqual(response.status_code, 200)


#+END_SRC
   

** Update, Delete and Get Section by ID
*** API Design
**** Update section by id
  :PROPERTIES:
  :CUSTOM_ID: update_section_by_id
  :END:    
  - URL :: /sections/<id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE

{
  "key" : "<key>",
  "name" : "Quiz"
}


#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "name": "Quiz"
}
#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}

    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/sections/1
#+END_EXAMPLE

**** Delete section by id
  :PROPERTIES:
  :CUSTOM_ID: delete_section_by_id
  :END:    
  - URL :: /sections/<id>
           
  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/sections/2
#+END_EXAMPLE

**** Get section by id
      :PROPERTIES:
      :CUSTOM_ID: api_get_section_by_id
      :END:    
  - URL :: /sections/<id>
           
  - Method :: GET

  - URL Params ::  None
                  
  - Payload ::
  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "id": 1,
    "name": "Theory"
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/sections/1
#+END_EXAMPLE

*** Implementation
#+NAME: update_and_delete_section
#+BEGIN_SRC python
@api.route('/sections/<id>', methods=['GET', 'PUT', 'DELETE'])
def update_and_delete_section(id):
    if request.method == 'GET':
        try:
            section = SystemInterface.get_section_by_id(id)
            return jsonify(section)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
    
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
            data_dict['s_id']=id
        else:
            abort(500, "the request does not contain data in json")

        try:
            section = SystemInterface.update_section(data_dict)
            return jsonify(section)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
        
    if request.method == 'DELETE':

        try:
            section = SystemInterface.delete_section(id)
            return jsonify({"status":"sucess"})

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
#+END_SRC
*** Test Cases
**** TestUpdateSection
 #+NAME: test_update_section
 #+BEGIN_SRC python
class TestUpdateSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_section(self):
        print "test_update_section"
        payload = {'name': 'Theory',
                   'key': KEY}

        payload1 = {'name': 'Theory',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/sections/1", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestDeleteSection
 #+NAME: test_delete_section
 #+BEGIN_SRC python
class TestDeleteSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_section(self):
        print "test_delete_section"

        payload = {'name': 'Theory',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/sections/1", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetSectionById
 #+NAME: test_get_section_by_id
 #+BEGIN_SRC python
class TestGetSectionbyid(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_section_by_id(self):
        print "test_get_section_by_id"

        payload = {'name': 'Theory',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/sections/1", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Institute
*** API Design
**** Update institutes by instid
  :PROPERTIES:
  :CUSTOM_ID: api_update_institutes_by_instid
  :END:    
  - URL :: /institutes?<inst_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"inst_name": "IIIT Hydfdfdd",
"key": "defaultkey",
"assets" : ["vlabs.ac.in/images/static/logo.png"]
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "inst_id": "iiith", 
  "inst_name": "IIIT H"
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/institutes?inst_id=iiith
#+END_EXAMPLE

*** Implementation
#+NAME: update_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['PUT'])
def update_institute():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'inst_id' in request.args:
            data_dict['inst_id']  = request.args['inst_id']
        else:
            abort(500, "Please provide the 'inst_id' to update the institute")
        
        try:
            institute = SystemInterface.update_institute(data_dict)
            return jsonify(institute.to_client())

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC

*** Test Cases
**** TestUpdateInstitute 
 #+NAME: test_update_institute
 #+BEGIN_SRC python
class TestUpdateInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_institute(self):
        print "test_update_institute"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload1 = {'asset_type': 'Video',
                   'path': 'vlabs.ac.in/images/video/icon.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'inst_name': 'IIT Kharagpur',
                    'assets': ['vlabs.ac.in/images/video/icon.png'], 
                    'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.put("/institutes?inst_id=IITK", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Institute
*** API Design
**** Delete institute by inst_id
  :PROPERTIES:
  :CUSTOM_ID: api_delete_institute_by_inst_id
  :END:    
  - URL :: /institutes?<inst_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/institutes?inst_id=iiith&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['DELETE'])
def delete_institute():
    if request.method == 'DELETE':
        if 'inst_id' in request.args and 'key' in request.args:
            inst_id  = request.args['inst_id']
            key = request.args['key']

            try:
                institute = SystemInterface.delete_institute(inst_id, key)
                return jsonify({"status":"sucess"})

            except NotAuthorizedError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)
            
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)
            
            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                       "msg": err_str}
                abort(404, msg)
            
            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestDeleteInstitute 
 #+NAME: test_delete_institute
 #+BEGIN_SRC python
class TestDeleteInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_institute(self):
        print "test_delete_institute"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kharagpur',
                   'inst_id': 'IITKgp',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/institutes?inst_id=IITKgp&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Discipline
*** API Design
**** Update disciplines by disid
  :PROPERTIES:
  :CUSTOM_ID: api_update_disciplines_by_disid
  :END:    
  - URL :: /disciplines/<dis_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"dis_name": "Auto Mobiles and Engineering",
"assets": ["vlabs.ac.in/images/static/logo.png"],
  "key": "<key>"
}
#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        }
    ],
    "dis_id": "ab",
    "dis_name": "Auto Mobiles and Engineering",
    "id": 15
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/disciplines?dis_id=cse
#+END_EXAMPLE

*** Implementation
#+NAME: update_discipline
#+BEGIN_SRC python
@api.route('/disciplines', methods=['PUT'])
def update_discipline():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'dis_id' in request.args:
            data_dict['dis_id']  = request.args['dis_id']
        else:
            abort(500, "Please provide the 'dis_id' to update the institute")
        
        try:
            discipline = SystemInterface.update_discipline(data_dict)
            return jsonify(discipline.to_client())
        
        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC

*** Test Cases
**** TestUpdateDiscipline
 #+NAME: test_update_discipline
 #+BEGIN_SRC python
class TestUpdateDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_discipline(self):
        print "test_update_discipline"
 
        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)
        
        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)
        
        payload1 = {'asset_type': 'Video',
                   'path': 'vlabs.ac.in/images/video/icon.png',
                   'key': KEY}
        
        response = self.client.post("/assets", data=json.dumps(payload1),
                                 headers=headers)
        """
        payload1 = {'dis_name': 'Computer Science and Engineering',
                   'assests' : [],
                   'key': KEY}
        
        response = self.client.put("/disciplines?dis_id=CSE", data=json.dumps(payload1),
                                 headers=headers)
        """
        self.assertEqual(response.status_code, 200)
        
 #+END_SRC
   

** Delete Discipline
*** API Design
**** Delete discipline by dis_id
  :PROPERTIES:
  :CUSTOM_ID: delete_discipline_by_dis_id
  :END:    
  - URL :: /disciplines?<dis_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/disciplines?dis_id=cse&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_discipline
#+BEGIN_SRC python
@api.route('/disciplines', methods=['DELETE'])
def delete_discipline():
    if request.method == 'DELETE':
        if 'dis_id' in request.args and 'key' in request.args:
            dis_id  = request.args['dis_id']
            key = request.args['key']

            try:
                discipline = SystemInterface.delete_discipline(dis_id, key)
                return jsonify({"status":"sucess"})
            
            except NotAuthorizedError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)

            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)
            
            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)            
            
            
#+END_SRC

*** Test Cases
**** TestDeleteDiscipline
 #+NAME: test_delete_discipline
 #+BEGIN_SRC python
class TestDeleteDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_discipline(self):
        print "test_delete_discipline"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/disciplines?dis_id=CSE&key=defaultkey", 
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Hosting_Info
*** API Design
**** Update hosting_info by hosted_url
  :PROPERTIES:
  :CUSTOM_ID: update_hosting_info_by_hosted_url
  :END:    
  - URL :: /hosting_info/<hosted_url>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"hosting_status": "hosted",
"hosted_on": "cloud",
"key": "<key>"
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "hosted_url": "http://cse14-iiith.vlabs.ac.in",
  "hosting_status": "hosted",
  "hosted_on": "cloud"
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/hosting_info?hosted_url=http://cse14-iiith.vlabs.ac.in
#+END_EXAMPLE

*** Implementation
#+NAME: update_hosting_info
#+BEGIN_SRC python
@api.route('/hosting_info', methods=['PUT'])
def update_hosting_info():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'hosted_url' in request.args:
            data_dict['hosted_url']  = request.args['hosted_url']
        else:
            abort(500, "Please provide the 'hosted_url' to update the hosting_info")
        
        try:
            hosting_info = SystemInterface.update_hosting_info(data_dict)
            return jsonify(hosting_info)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC

*** Test Cases
**** TestUpdateHosting_Info 
 #+NAME: test_update_hosting_info
 #+BEGIN_SRC python
class TestUpdateHosting_Info(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_hosting_info(self):
        print "test_update_hosting_info"

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        payload1 = {'hosting_status': 'not hosted', 'hosted_on': 'server', 'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/hosting_info?hosted_url=http://cse14-iiith.vlabs.ac.in", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
 
** Update Developer
*** API Design
**** Update developers by email_id
  :PROPERTIES:
  :CUSTOM_ID: api_update_developers_by_email_id
  :END:    
  - URL :: /developers?email=<email_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
  "dev_name": "Prof. Dharamraj",
  "key": "<key>"
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "dev_name": "Prof. Dharamraj",
  "email_id": "dharamraj@gmail.com",
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/developers?email_id=dharamraj@gmail.com
#+END_EXAMPLE

*** Implementation
#+NAME: update_developer
#+BEGIN_SRC python
@api.route('/developers', methods=['PUT'])
def update_developer():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'email' in request.args:
            data_dict['email']  = request.args['email']
        else:
            abort(500, "Please provide the 'email' to update the developer")
        
        try:
            developer = SystemInterface.update_developer(data_dict)
            
            return jsonify(developer.to_client())

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC

*** Test Cases
**** TestUpdateDeveloper 
 #+NAME: test_update_developer
 #+BEGIN_SRC python
class TestUpdateDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_developer(self):
        print "test_update_developer"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof.Dharamraj',
                   'email': 'dharamraj@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        payload1 = {'inst_name': 'IIT Kharagpur',
                    'inst_id': 'IITKgp',
                    'assets': ['vlabs.ac.in/images/video/icon.png'],
                    'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload1 = {'dis_name': 'Electronics & Comuunication Engg.',
                    'dis_id': 'ECE',
                    'assets': ['vlabs.ac.in/images/video/icon.png'],
                    'key': KEY}


        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload1 = {'name': 'Prof.Raj', 'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/developers?email=dharamraj@gmail.com",
                                       data=json.dumps(payload1),
                                    headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Hosting_Info
*** API Design
**** Delete hosting_info by hosted_url
  :PROPERTIES:
  :CUSTOM_ID: delete_hosting_info_by_hosted_url
  :END:    
  - URL :: /hosting_info?<hosted_url>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/hosting_info?hosted_url=http://cse14-iiith.vlabs.ac.in&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_hosting_info
#+BEGIN_SRC python
@api.route('/hosting_info', methods=['DELETE'])
def delete_hosting_info():
    if request.method == 'DELETE':
        if 'hosted_url' in request.args and 'key' in request.args:
            hosted_url  = request.args['hosted_url']
            key = request.args['key']

            try:
                hosting_info = SystemInterface.delete_hosting_info(hosted_url, key)
                return jsonify({"status":"sucess"})

            except NotAuthorizedError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)
            
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)
            
            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                       "msg": err_str}
                abort(404, msg)
            
            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            
#+END_SRC

*** Test Cases
**** TestDeleteHosting_Info
 #+NAME: test_delete_hosting_info
 #+BEGIN_SRC python
class TestDeleteHosting_Info(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_hosting_info(self):
        print "test_delete_hosting_info"

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/hosting_info?hosted_url=http://cse14-iiith.vlabs.ac.in&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Integration_Status
*** API Design
**** Delete integration_status by integration_level
  :PROPERTIES:
  :CUSTOM_ID: api_delete_integration_status_by_integration_level
  :END:    
  - URL :: /integration_status?integration_level=<integration_level>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/integration_status?integration_level=4&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_integration_status
#+BEGIN_SRC python
@api.route('/integration_status', methods=['DELETE'])
def delete_integration_status():
    if request.method == 'DELETE':
        if 'integration_level' in request.args and 'key' in request.args:
            integration_level  = request.args['integration_level']
            key = request.args['key']

            try:
                integration_status = SystemInterface.delete_integration_status(integration_level, key)
                return jsonify({"status":"sucess"})

            except NotAuthorizedError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)

            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)
            
            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                       "msg": err_str}
                abort(404, msg)
            
            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            
#+END_SRC

*** Test Cases
**** TestDeleteIntegration_Status
 #+NAME: test_delete_integration_status
 #+BEGIN_SRC python
class TestDeleteIntegration_Status(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_integration_status(self):
        print "test_delete_integration_status"

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/integration_status?integration_level=4&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Email
*** API Design
**** Delete email
  :PROPERTIES:
  :CUSTOM_ID: delete_email_by_email
  :END:    
  - URL :: /emails?<email>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/emails?email=dharamraj@gmail.com&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_email
#+BEGIN_SRC python
@api.route('/emails', methods=['DELETE'])
def delete_email():
    if request.method == 'DELETE':
        if 'email' in request.args and 'key' in request.args:
            email  = request.args['email']
            key = request.args['key']

            try:
                email = SystemInterface.delete_email(email, key)
                return jsonify({"status":"sucess"})
            except NotAuthorizedError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                       "msg": err_str}
                abort(401, msg)

            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

#+END_SRC

*** Test Cases
**** TestDeleteEmail
 #+NAME: test_delete_email
 #+BEGIN_SRC python
class TestDeleteEmail(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_email(self):
        print "test_delete_email"

        payload = {'email': 'dharamraj@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/emails", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/emails?email=dharamraj@gmail.com&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update, Delete and Get Name by ID
*** API Design
**** Update name by id
  :PROPERTIES:
  :CUSTOM_ID: update_section_by_id
  :END:    
  - URL :: /names/<id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE

{
  "key" : "<key>",
  "name" : "Prof. Dharamrajuuuu"
}


#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "name": "Prof. Dharamrajuuuu"
}
#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}

    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/names/1
#+END_EXAMPLE

**** Delete name by id
  :PROPERTIES:
  :CUSTOM_ID: delete_section_by_id
  :END:    
  - URL :: /names/<id>
           
  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
                 { "status" : "success" }
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/names/2
#+END_EXAMPLE

**** Get name by id
      :PROPERTIES:
      :CUSTOM_ID: api_get_section_by_id
      :END:    
  - URL :: /names/<id>
           
  - Method :: GET

  - URL Params ::  None
                  
  - Payload ::
  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "id": 1,
    "name" : "Prof. Dharamraj"
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/names/1
#+END_EXAMPLE

*** Implementation
#+NAME: update_and_delete_name
#+BEGIN_SRC python
@api.route('/names/<id>', methods=['GET', 'PUT', 'DELETE'])
def update_and_delete_name(id):
    if request.method == 'GET':
        try:
            name = SystemInterface.get_name_by_id(id)
            return jsonify(name)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
    
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
            data_dict['n_id']=id
        else:
            abort(500, "the request does not contain data in json")

        try:
            name = SystemInterface.update_name(data_dict)
            return jsonify(name)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
        
    if request.method == 'DELETE':

        try:
            name = SystemInterface.delete_name(id)
            return jsonify({"status":"sucess"})

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
#+END_SRC
*** Test Cases
**** TestUpdateNameById
 #+NAME: test_update_name_by_id
 #+BEGIN_SRC python
class TestUpdateNameById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_name_by_id(self):
        print "test_update_name_by_id"
        payload = {'name': 'Prof. Dharamraj',
                   'key': KEY}

        payload1 = {'name': 'Prof. Dharamrajuuuu',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/names", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/names/1", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestDeleteNameById
 #+NAME: test_delete_name_by_id
 #+BEGIN_SRC python
class TestDeleteNameById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_name_by_id(self):
        print "test_delete_name_by_id"

        payload = {'name': 'Prof. Dharamraj',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/names", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/names/1", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetNameById
 #+NAME: test_get_name_by_id
 #+BEGIN_SRC python
class TestGetNamebyid(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_name_by_id(self):
        print "test_get_name_by_id"

        payload = {'name': 'Prof. Dharamraj',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/names", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/names/1", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
 
** Delete Developer
*** API Design
**** Delete developer
  :PROPERTIES:
  :CUSTOM_ID: delete_developer_by_email_id
  :END:    
  - URL :: /developers?<email_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/developers?email_id=dharamraj@gmail.com&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_developer
#+BEGIN_SRC python
@api.route('/developers', methods=['DELETE'])
def delete_developer():
    if request.method == 'DELETE':
        if 'email' in request.args and 'key' in request.args:
            email  = request.args['email']
            key = request.args['key']

            try:
                developer = SystemInterface.delete_developer(email, key)
                return jsonify({"status":"sucess"})

            except NotAuthorizedError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                       "msg": err_str}
                abort(401, msg)

            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

#+END_SRC

*** Test Cases
**** TestDeleteDeveloper
 #+NAME: test_delete_developer
 #+BEGIN_SRC python
class TestDeleteDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_developer(self):
        print "test_delete_developer"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamraj',
                   'email': 'dharamraj@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/developers?email=dharamraj@gmail.com&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Experiment
*** API Design
**** Delete experiment by exp_id
  :PROPERTIES:
  :CUSTOM_ID: api_delete_experiment_by_exp_id
  :END:    
  - URL :: /experiments?exp_id=<exp_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments/2
#+END_EXAMPLE

*** Implementation
#+NAME: delete_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['DELETE'])
def delete_experiment():
    if request.method == 'DELETE':
        if 'exp_id' in request.args and 'key' in request.args:
            exp_id  = request.args['exp_id']
            key = request.args['key']
            try:
                exp_id = SystemInterface.delete_experiment(exp_id, key)
                return jsonify({"status":"sucess"})
            
            except NotAuthorizedError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)
            
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)
            
            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                       "msg": err_str}
                abort(404, msg)
            
            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            
#+END_SRC
*** Test Cases
**** TestDeleteExperiment
 #+NAME: test_delete_experiment
 #+BEGIN_SRC python
class TestDeleteExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_experiment(self):
        print "test_delete_experiment"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                  headers=headers)

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'assets': ['vlabs.ac.in/images/static/logo.png'],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE'}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'exp_name': 'stack',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections' : [],
                   'integration_level': 4,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'key': KEY,
                   'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                   'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'inst_id': 'IITK', 'dis_id': 'CSE'}],
                   'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}]}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Assets and Get Asset
*** API Design
**** Get all Assets
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_assets
  :END:    
  - URL :: /assets

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "path": "vlabs.ac.in/images/static/logo.png",
        "asset_type": "Image",
        "id": 1
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/assets
#+END_EXAMPLE

**** Get Asset by path
  :PROPERTIES:
  :CUSTOM_ID: api_get_asset_by_path
  :END:    
  - URL :: /assets?path=<path>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "asset_type": "Image",
    "id": 3,
    "path": "vlabs.ac.in/images/static/icon.png"
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/assets?path=vlabs.ac.in/images/static/logo.png
#+END_EXAMPLE

*** Implementation
REST API to get all assets and get asset by path.
#+NAME: get_asset
#+BEGIN_SRC python
@api.route('/assets', methods=['GET'])
def get_asset():
    if request.method == 'GET':
       if 'path' in request.args:
           path  = request.args['path']
           try:
               asset = SystemInterface.get_asset_by_path(path)
               return jsonify(asset)

           except TypeError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str }
               abort(500, msg)
           
           except StateError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
           
           except NotFoundError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
               abort(404, msg)
           
           except Exception as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
       else:
           try:
               assets = SystemInterface.get_assets()
               return jsonify_list(assets)
        
           except TypeError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str }
               abort(500, msg)
           
           except StateError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
           
           except NotFoundError as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
               abort(404, msg)
           
           except Exception as e:
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
#+END_SRC

*** Test Cases
**** TestGetAsset  
 #+NAME: test_get_Asset
 #+BEGIN_SRC python
class TestGetAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_assets(self):
        print "test_get_assets_in_rest"

        payload = {'asset_type': 'Images',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/assets", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetAssetbyPath 
#+NAME: test_get_asset_by_path
#+BEGIN_SRC python
class TestGetAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_asset_by_path(self):
        print "test_get_asset_by_path_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/assets?path=vlabs.ac.in/images/static/logo.png", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC


** Add Asset 
*** API Design
**** Add Asset
  :PROPERTIES:
  :CUSTOM_ID: api_add_institute
  :END:    
  - URL :: /assets

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
 {
"path": "vlabs.ac.in/images/static/logo.png",
"asset_type": "Image",
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "path": "vlabs.ac.in/images/static/logo.png", 
  "asset_type": "Image"
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/assets
#+END_EXAMPLE
    
*** Implementation
REST API to add an asset.
#+NAME: add_asset
#+BEGIN_SRC python
@api.route('/assets', methods=['POST'])
def add_asset():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            asset = SystemInterface.add_asset(data_dict)
            return jsonify(asset)

        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddAsset  
 #+NAME: test_add_asset
 #+BEGIN_SRC python
class TestAddAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_asset(self):
        print "test_add_asset_in_rest"
        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Asset
*** API Design
**** Update assets by path
  :PROPERTIES:
  :CUSTOM_ID: api_update_institutes_by_instid
  :END:    
  - URL :: /assets/<path>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"asset_type": "Image",
  "key": "<key>"
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "path": "vlabs.ac.in/images/static/logo.png", 
  "asset_type": "Image"
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/assets?path=vlabs.ac.in/images/static/logo.png
#+END_EXAMPLE

*** Implementation
#+NAME: update_asset
#+BEGIN_SRC python
@api.route('/assets', methods=['PUT'])
def update_asset():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'path' in request.args:
            data_dict['path']  = request.args['path']
        else:
            abort(500, "Please provide the 'path' to update the asset")
        
        try:
            asset = SystemInterface.update_asset(data_dict)
            return jsonify(asset)
        
        except NotAuthorizedError as e:
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC

*** Test Cases
**** TestUpdateAsset  
 #+NAME: test_update_asset
 #+BEGIN_SRC python
class TestUpdateAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_asset(self):
        print "test_update_asset"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        payload1 = {'asset_type': 'Video',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/assets?path=vlabs.ac.in/images/static/logo.png", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Asset
*** API Design
**** Delete asset by path
  :PROPERTIES:
  :CUSTOM_ID: api_delete_institute_by_inst_id
  :END:    
  - URL :: /assets?<path>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/assets?path=vlabs.ac.in/images&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_asset
#+BEGIN_SRC python
@api.route('/assets', methods=['DELETE'])
def delete_asset():
    if request.method == 'DELETE':
        if 'path' in request.args and 'key' in request.args:
            path  = request.args['path']
            key = request.args['key']

            try:
                asset = SystemInterface.delete_asset(path, key)
                return jsonify({"status":"sucess"})
            
            except NotAuthorizedError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)
            
            except TypeError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)

            except StateError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
                abort(404, msg)
            
            except Exception as e:
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            
#+END_SRC

*** Test Cases
**** TestDeleteAsset  
 #+NAME: test_delete_asset
 #+BEGIN_SRC python
class TestDeleteAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_asset(self):
        print "test_delete_asset"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/assets?path=vlabs.ac.in/images/static/logo.png&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import requests
import json
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
from runtime.utils.type_utils import jsonify_list
from runtime.exceptions.custom_exceptions import *
from runtime.system.system_interface import SystemInterface
import yaml

api = Blueprint('APIs', __name__)

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.rest.app import create_app
from runtime.config.system_config import KEY
from runtime.rest.api import *
from runtime.system.system import System
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<get_lab>>
<<add_lab>>
<<update_lab>>
<<delete_lab>>
<<get_experiment>>
<<add_experiment>>
<<get_disciplines>>
<<add_discipline>>
<<update_experiment>>
<<delete_experiment>>
<<update_and_delete_section>>
<<get_sections>>
<<add_section>>
<<update_institute>>
<<delete_institute>>
<<update_discipline>>
<<delete_discipline>>
<<get_institute>>
<<add_institute>>
<<get_hosting_info>>
<<add_hosting_info>>
<<update_hosting_info>>
<<delete_hosting_info>>
<<get_integration_status>>
<<add_integration_status>>
<<delete_integration_status>>
<<get_asset>>
<<add_asset>>
<<update_asset>>
<<delete_asset>>
<<delete_email>>
<<get_email>>
<<add_email>>
<<get_names>>
<<add_name>>
<<delete_name>>
<<get_developer>>
<<add_developer>>
<<delete_developer>>
<<update_developer>>
<<update_and_delete_name>>

#+END_SRC


** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_add_lab>>
<<test_update_lab>>
<<test_delete_lab>>
<<test_get_labs>>
<<test_get_lab_by_labid>>
<<test_get_labs_by_institute>>
<<test_get_labs_by_lab_name>>
<<test_get_labs_by_discipline>>
<<test_get_lab_by_labname_keyword>>
<<test_get_exp_by_expid>>
<<test_get_discipline_by_disid>>
<<test_add_experiment>>
<<test_add_discipline>>
<<test_get_discipline>>
<<test_update_discipline>>
<<test_get_experiment>>
<<test_update_experiment>>
<<test_update_section>>
<<test_delete_section>>
<<test_delete_experiment>>
<<test_get_Sections>>
<<test_add_section>>
<<test_get_Names>>
<<test_add_name>>
<<test_update_name_by_id>>
<<test_delete_name_by_id>>
<<test_get_Email>>
<<test_add_email>>
<<test_update_email>>
<<test_delete_email>>
<<test_get_Developer>>
<<test_add_developer>>
<<test_update_developer>>
<<test_delete_developer>>
<<test_add_institute>>
<<test_get_institute>>
<<test_update_institute>>
<<test_delete_institute>>
<<test_delete_discipline>>
<<test_get_Hosting_Info>>
<<test_add_hosting_info>>
<<test_update_hosting_info>>
<<test_delete_hosting_info>>
<<test_get_Integration_Status>>
<<test_add_integration_status>>
<<test_delete_integration_status>>
<<test_get_asset>>
<<test_add_asset>>
<<test_update_asset>>
<<test_delete_asset>>
<<test_get_Developer>>
<<test_get_section_by_id>>
<<test_get_name_by_id>>
<<test_get_hosting_info_by_hosted_url>>
<<run_test_cases>>
#+end_src
