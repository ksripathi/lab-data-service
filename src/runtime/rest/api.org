#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API.

  
* REST

** Get and Add Lab
   REST API to get and add question.

#+NAME: get_and_add_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['GET', 'POST'])
def add_lab():
    if request.method == 'GET':
        try:
            labs = SystemInterface.get_labs()
            return jsonify_list(labs)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
       
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            lab = SystemInterface.add_lab(data_dict)
            return jsonify(lab.to_client())

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC


*** TestAddLab
 #+NAME: test_add_lab
 #+BEGIN_SRC python
class TestAddLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_lab(self):
        print "test_add_lab_in_rest"
        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'key': KEY,
                   'overview' : 'overview',
                   'experiments': [{'exp_name': 'arrays', 'exp_id': 'exp123',
                                        'overview' : 'overview', 'sections':[] }]
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestGetLab
 #+NAME: test_get_lab
 #+BEGIN_SRC python
class TestGetLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs(self):
        print "test_get_lab_in_rest"

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'key': KEY,
                   'experiments': [{'exp_name': 'arrays', 'exp_id': 'exp123',
                                        'overview' : 'overview',
                                        'sections': []}]
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/labs", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
** Update and Delete Lab
#+NAME: update_and_delete_lab
#+BEGIN_SRC python
@api.route('/labs/<id>', methods=['GET', 'PUT', 'DELETE'])
def update_and_delete_lab(id):
    if request.method == 'GET':
        try:
            lab = SystemInterface.get_lab_by_id(id)
            return jsonify(lab)

        except NotFoundError as err:
            error_message = "No question found with id: %s found." % id

            return render_template('error.html',
                    data=error_message)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
    
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
            data_dict['l_id']=id
        else:
            abort(500, "the request does not contain data in json")

        try:
            lab = SystemInterface.update_lab(data_dict)
            return jsonify(lab)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

    if request.method == 'DELETE':

        try:
            lab = SystemInterface.delete_lab(id)
            return jsonify({"status":"sucess"})

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

#+END_SRC
*** TestUpdateLab
 #+NAME: test_update_lab
 #+BEGIN_SRC python
class TestUpdateLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_lab(self):
        print "test_update_lab"
        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'experiments':[],
                   'key': KEY}

        payload1 = {'lab_name': 'Computer Programming',
                   'lab_id': 'cse02',
                   'key': KEY,
                   'overview' : 'overview',
                   'experiments': [{'exp_name': 'arrays', 'exp_id': 'exp123',
                                        'overview' : 'overview',
                                        'sections': []}]
                   }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/labs/1", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestDeleteLab
 #+NAME: test_delete_lab
 #+BEGIN_SRC python
class TestDeleteLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_lab(self):
        print "test_delete_lab"

        payload = {'lab_name': 'Data structures',
                   'lab_id': 'cse02',
                   'key': KEY,
                   'overview' : 'overview',
                   'experiments': [{'exp_name': 'arrays', 'exp_id': 'exp123',
                                        'overview' : 'overview',
                                        'sections': []}]
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/labs/1", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
** Get and Add Experiment
   REST API to get and add experiment.

#+NAME: get_and_add_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['GET', 'POST'])
def add_experiment():
    if request.method == 'GET':
        try:
            experiments = SystemInterface.get_experiments()

            return jsonify_list(experiments)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
       
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            exp = SystemInterface.add_experiment(data_dict)
            return jsonify(exp)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC


*** TestAddExperiment
 #+NAME: test_add_experiment
 #+BEGIN_SRC python
class TestAddExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_experiment(self):
        print "test_add_experiment_in_rest"
        payload = {'exp_name': 'arrays',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestGetExperiment
 #+NAME: test_get_Experiment
 #+BEGIN_SRC python
class TestGetExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiments(self):
        print "test_get_experiments_in_rest"

        payload = {'exp_name': 'stack',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections' : [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
** Update and Delete Experiment
#+NAME: update_and_delete_experiment
#+BEGIN_SRC python
@api.route('/experiments/<id>', methods=['GET', 'PUT', 'DELETE'])
def update_and_delete_experiment(id):
    if request.method == 'GET':
        try:
            section = SystemInterface.get_experiment_by_id(id)
            return jsonify(section)

        except NotFoundError as err:
            error_message = "No experiment found with id: %s found." % id

            return render_template('error.html',
                    data=error_message)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
    
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
            data_dict['e_id']=id
        else:
            abort(500, "the request does not contain data in json")

        try:
            experiment = SystemInterface.update_experiment(data_dict)
            return jsonify(experiment)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

    if request.method == 'DELETE':

        try:
            experiment = SystemInterface.delete_experiment(id)
            return jsonify({"status":"sucess"})

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

#+END_SRC
*** TestUpdateExperiment
 #+NAME: test_update_experiment
 #+BEGIN_SRC python
class TestUpdateExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_experiment(self):
        print "test_update_experiment"

        payload = {'exp_name': 'Theory',
                   'exp_id': 'exp123',
                   'overview': 'overview',
                   'sections': [],
                   'key': KEY}

        payload1 = {'exp_name': 'Procedure',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/experiments/1", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestDeleteExperiment
 #+NAME: test_delete_experiment
 #+BEGIN_SRC python
class TestDeleteExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_experiment(self):
        print "test_delete_experiment"

        payload = {'exp_name': 'Theory',
                   'exp_id': 'exp123',
                   'overview': 'overview',
                   'sections': [],
                   'key': KEY}


        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/experiments/1", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
** Get and Add Section
   REST API to get and add experiment.

#+NAME: get_and_add_section
#+BEGIN_SRC python
@api.route('/sections', methods=['GET', 'POST'])
def add_section():
    if request.method == 'GET':
        try:
            sections = SystemInterface.get_sections()

            return jsonify_list(sections)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
       
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            section = SystemInterface.add_section(data_dict)
            return jsonify(section)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC


*** TestAddSection
 #+NAME: test_add_section
 #+BEGIN_SRC python
class TestAddSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_experiment(self):
        print "test_add_section_in_rest"
        payload = {'name': 'Quiz',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

*** TestGetSection
 #+NAME: test_get_Section
 #+BEGIN_SRC python
class TestGetSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_section(self):
        print "test_get_section_in_rest"

        payload = {'name': 'Theory',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/section", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/sections", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
** Update and Delete Section
#+NAME: update_and_delete_section
#+BEGIN_SRC python
@api.route('/sections/<id>', methods=['GET', 'PUT', 'DELETE'])
def update_and_delete_section(id):
    if request.method == 'GET':
        try:
            section = SystemInterface.get_section_by_id(id)
            return jsonify(section)

        except NotFoundError as err:
            error_message = "No section found with id: %s found." % id

            return render_template('error.html',
                    data=error_message)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
    
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
            data_dict['s_id']=id
        else:
            abort(500, "the request does not contain data in json")

        try:
            section = SystemInterface.update_section(data_dict)
            return jsonify(section)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

    if request.method == 'DELETE':

        try:
            section = SystemInterface.delete_section(id)
            return jsonify({"status":"sucess"})

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

#+END_SRC
*** TestUpdateSection
 #+NAME: test_update_section
 #+BEGIN_SRC python
class TestUpdateSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_section(self):
        print "test_update_section"
        payload = {'name': 'Theory',
                   'key': KEY}

        payload1 = {'name': 'Theory',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/sections/1", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestDeleteSection
 #+NAME: test_delete_section
 #+BEGIN_SRC python
class TestDeleteSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_section(self):
        print "test_delete_section"

        payload = {'name': 'Theory',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/sections/1", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
   
* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import requests
import json
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
from runtime.utils.type_utils import jsonify_list
from runtime.exceptions.custom_exceptions import *
from runtime.system.system_interface import SystemInterface
import yaml

api = Blueprint('APIs', __name__)

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.rest.app import create_app
from runtime.config.system_config import KEY
from runtime.rest.api import *
from runtime.system.system import System
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<get_and_add_lab>>
<<update_and_delete_lab>>
<<get_and_add_experiment>>
<<update_and_delete_experiment>>
<<update_and_delete_section>>
<<get_and_add_section>>
#+END_SRC


** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_add_lab>>
<<test_update_lab>>
<<test_delete_lab>>
<<test_get_lab>>
<<test_add_experiment>>
<<test_get_experiment>>
<<test_update_experiment>>
<<test_update_section>>
<<test_delete_section>>
<<test_delete_experiment>>
<<test_get_Section>>
<<test_add_section>>
<<run_test_cases>>
#+end_src

