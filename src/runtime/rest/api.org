#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END: 
  This document illustrates building of the REST API.

  
* REST
** Get Labs, Add Lab and Get Lab
#+NAME: get_and_add_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['GET', 'POST'])
def get_and_add_lab():
    if request.method == 'GET':
        if 'lab_id' in request.args:
            lab_id  = request.args['lab_id']
            try:
                lab = SystemInterface.get_lab(lab_id)
                return jsonify(lab)
                
            except NotAuthorizedError as err:
                error_message =  'Not Authorized error: %s' % str(err)
                """
                if request.headers['Content-Type'] == "application/json":
                    abort(401, error_message)
                else:
                """
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except Exception as err:
                error_message = 'error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)        
        else:
            try:
                labs = SystemInterface.get_labs()
                return jsonify_list(labs)
         
            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html',
                            data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))

    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            lab = SystemInterface.add_lab(data_dict)
            return jsonify(lab)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC


*** TestAddLab

#+NAME: test_add_lab
#+BEGIN_SRC python
class TestAddLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_lab(self):
        print "test_add_lab_in_rest"

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'key': KEY,
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'overview' : 'overview',
                   'experiments': ['exp1']
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestGetLab
#+NAME: test_get_labs
#+BEGIN_SRC python
class TestGetLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs(self):
        print "test_get_labs_in_rest"

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'key': KEY,
                   'experiments': ['exp1']
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/labs", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestGetLabbyLabId
#+NAME: test_get_lab_by_labid
#+BEGIN_SRC python
class TestGetLabbyLabId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab_by_labid(self):
        print "test_get_lab_by_labid_in_rest"

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'key': KEY,
                   'experiments': ['exp1'],
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/labs?lab_id=cse01", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC
** Get Institutes, Add Institute and Get Institute
REST API to get and add institute.
#+NAME: get_and_add_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['GET', 'POST'])
def add_institute():
    if request.method == 'GET':
       if 'inst_id' in request.args:
           inst_id  = request.args['inst_id']
           try:
               institute = SystemInterface.get_institute(inst_id)
               return jsonify(institute)

           except NotAuthorizedError as err:
               error_message = 'Not Authorized error: %s' % str(err)
               current_app.logger.error("%s" %(error_message))
               return render_template('error.html',
                                       data=error_message)
           except TypeError as err:
               error_message = 'Malformed arguments, error: %s' % str(err)
               current_app.logger.error("%s" %(error_message))
               return render_template('error.html',
                                       data=error_message)
           except Exception as err:
               error_message = 'error: %s' % str(err)
               current_app.logger.error("%s" %(error_message))
               return render_template('error.html',
                                        data=error_message)
       else:
           try:
               institutes = SystemInterface.get_institutes()
               return jsonify_list(institutes)

           except TypeError as err:
               error_message = 'Malformed arguments, error: %s' % str(err)

               return render_template('error.html',
                                           data=error_message)

           except Exception as err:
               abort(500, 'error: %s' % str(err))
       
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            institute = SystemInterface.add_institute(data_dict)
            return jsonify(institute)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC

*** TestAddInstitute 
 #+NAME: test_add_institute
 #+BEGIN_SRC python
class TestAddInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_institute(self):
        print "test_add_institute_in_rest"
        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestGetInstitute 
 #+NAME: test_get_Institute
 #+BEGIN_SRC python
class TestGetInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institutes(self):
        print "test_get_institutes_in_rest"

        payload = {'inst_name': 'IIIT Hyderabad',
                   'inst_id': 'IIITH',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/institutes", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestGetInstitutebyInstituteid
#+NAME: test_get_institute_by_instituteid
#+BEGIN_SRC python
class TestGetInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institute_by_instituteid(self):
        print "test_get_institute_by_instituteid_in_rest"

        payload = {'inst_name': 'IIT Kanpur',
                   'inst_id': 'IITK',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/institutes?inst_id=IITK", headers=headers)
        self.assertEqual(response.status_code, 200)
#+END_SRC
** Get Disciplines, Add Discipline and Get Discipline
   REST API to get and add question.

#+NAME: get_and_add_discipline
#+BEGIN_SRC python
@api.route('/disciplines', methods=['GET', 'POST'])
def add_discipline():
    if request.method == 'GET':
        if 'dis_id' in request.args:
            dis_id  = request.args['dis_id']
            try:
                discipline = SystemInterface.get_discipline(dis_id)
                return jsonify(discipline)
                
            except NotAuthorizedError as err:
                error_message =  'Not Authorized error: %s' % str(err)
                """
                if request.headers['Content-Type'] == "application/json":
                    abort(401, error_message)
                else:
                """
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except Exception as err:
                error_message = 'error: %s' % str(err)
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)        
        else:

            try:
                disciplines = SystemInterface.get_disciplines()
                return jsonify_list(disciplines)

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', 
                        data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))
       
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            dis = SystemInterface.add_discipline(data_dict)
            return jsonify(dis)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC


*** TestAddDiscipline
 #+NAME: test_add_discipline
 #+BEGIN_SRC python
class TestAddDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_discipline(self):
        print "test_add_discipline_in_rest"
        payload = {'dis_name': 'IIT Delhi',
                   'dis_id': 'EEE10',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestGetDiscipline
 #+NAME: test_get_discipline
 #+BEGIN_SRC python
class TestGetDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_disciplines(self):
        print "test_get_discipline_in_rest"

        payload = {'dis_name': 'IIT Delhi',
                   'dis_id': 'EEE10',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/disciplines", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
** Get Experiments, Add Experiment and Get Experiment
   REST API to get single experiment by exp_id and get all experiments and add experiment.
#+NAME: get_and_add_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['GET', 'POST'])
def get_and_add_experiment():
    if request.method == 'GET':
        if 'exp_id' in request.args:
            exp_id  = request.args['exp_id']
            try:
                current_app.logger.debug("execute get_exp_by_expid")
                exp = SystemInterface.get_experiment(exp_id)
                current_app.logger.debug("executed get_exp_by_expid")
                return jsonify(exp)
                
            except NotAuthorizedError as err:
                error_message =  'Not Authorized error: %s' % str(err)
                """
                if request.headers['Content-Type'] == "application/json":
                    abort(401, error_message)
                else:
                """
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)
                """
                if request.headerscurrent_app.logger.error("%s" %(error_message)))['Content-Type'] == "application/json":
                abort(400, error_message)
                else:
                """
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
            except Exception as err:
                error_message = 'error: %s' % str(err)
                """
                if request.headers['Content-Type'] == "application/json":
                abort(400, error_message)
                else:
                """
                current_app.logger.error("%s" %(error_message))
                return render_template('error.html', 
                                       data=error_message)
        else:
            try:
                experiments = SystemInterface.get_experiments()

                return jsonify_list(experiments)

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))
       
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            exp = SystemInterface.add_experiment(data_dict)
            return jsonify(exp)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC


*** TestAddExperiment
 #+NAME: test_add_experiment
 #+BEGIN_SRC python
class TestAddExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_experiment(self):
        print "test_add_experiment_in_rest"
        payload = {'exp_name': 'arrays',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestGetExperiment
 #+NAME: test_get_Experiment
 #+BEGIN_SRC python
class TestGetExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiments(self):
        print "test_get_experiments_in_rest"

        payload = {'exp_name': 'stack',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections' : [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestGetExperimentbyExpid
#+NAME: test_get_exp_by_expid
#+BEGIN_SRC python
class TestGetExp(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiment_by_expid(self):
        print "test_get_experiment_by_expid_in_rest"

        payload = {'exp_name': 'stack',
                   'exp_id': 'cse01',
                   'overview' : 'overview',
                   'sections' : [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments?exp_id=cse01", \
                                       headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

** Get and Add Section
REST API to get and add Section.
#+NAME: get_and_add_section
#+BEGIN_SRC python
@api.route('/sections', methods=['GET', 'POST'])
def get_and_add_section():
    if request.method == 'GET':
        try:
            sections = SystemInterface.get_sections()

            return jsonify_list(sections)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
       
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            section = SystemInterface.add_section(data_dict)
            return jsonify(section)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
            
#+END_SRC


*** TestAddSection
 #+NAME: test_add_section
 #+BEGIN_SRC python
class TestAddSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_experiment(self):
        print "test_add_section_in_rest"
        payload = {'name': 'Quiz',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

*** TestGetSection
 #+NAME: test_get_Section
 #+BEGIN_SRC python
class TestGetSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_section(self):
        print "test_get_section_in_rest"

        payload = {'name': 'Theory',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/section", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/sections", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
** Update and Delete Lab
#+NAME: update_and_delete_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['PUT', 'DELETE'])
def update_and_delete_lab():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'lab_id' in request.args:
            data_dict['lab_id']  = request.args['lab_id']
        else:
            abort(500, "Please provide the 'lab_id' to update the lab")
        
        try:
            lab = SystemInterface.update_lab(data_dict)
            return jsonify(lab)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

    if request.method == 'DELETE':
        if 'lab_id' in request.args and 'key' in request.args:
            lab_id  = request.args['lab_id']
            key = request.args['key']

            try:
                lab = SystemInterface.delete_lab(lab_id, key)

                return jsonify({"status":"sucess"})

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))

#+END_SRC
*** TestUpdateLab
#+NAME: test_update_lab
#+BEGIN_SRC python
class TestUpdateLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_lab(self):
        print "test_update_lab"

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data Structures',
                   'lab_id': 'cse01',
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'experiments':['exp1'],
                   'key': KEY}

        payload1 = {'lab_name': 'Computer Programming',
                   'key': KEY,
                   'overview' : 'cp overview'
                   }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/labs?lab_id=cse01", 
                                       data=json.dumps(payload1),
                                       headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestDeleteLab
 #+NAME: test_delete_lab
 #+BEGIN_SRC python
class TestDeleteLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_lab(self):
        print "test_delete_lab"

        payload = {'exp_name': 'arrays',
                   'exp_id': 'exp1',
                   'overview' : 'overview',
                   'sections': [],
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {'inst_name': 'IIT Kharagpur',
                   'inst_id': 'IITK',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'lab_name': 'Data structures',
                   'lab_id': 'cse02',
                   'key': KEY,
                   'overview' : 'overview',
                   'inst_id': 'IITK',
                   'dis_id': 'CSE',
                   'experiments': ['exp1']
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/labs?lab_id=cse02&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
** Update and Delete Experiment
#+NAME: update_and_delete_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['PUT', 'DELETE'])
def update_and_delete_experiment():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'exp_id' in request.args:
            data_dict['exp_id']  = request.args['exp_id']
        else:
            abort(500, "Please provide the 'exp_id' to update the exp")
        
        try:
            exp = SystemInterface.update_experiment(data_dict)
            return jsonify(exp)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

    if request.method == 'DELETE':
        print "inside delete"
        if 'exp_id' in request.args and 'key' in request.args:
            exp_id  = request.args['exp_id']
            key = request.args['key']
            try:
                exp_id = SystemInterface.delete_experiment(exp_id, key)
                return jsonify({"status":"sucess"})

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))

#+END_SRC
*** TestUpdateExperiment
 #+NAME: test_update_experiment
 #+BEGIN_SRC python
class TestUpdateExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_experiment(self):
        print "test_update_experiment"

        payload = {'exp_name': 'Theory',
                   'exp_id': 'exp123',
                   'overview': 'overview',
                   'sections': [],
                   'key': KEY}

        payload1 = {'exp_name': 'Procedure',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/experiments/exp123",
                                       data=json.dumps(payload1),
                                       headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestDeleteExperiment
 #+NAME: test_delete_experiment
 #+BEGIN_SRC python
class TestDeleteExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_experiment(self):
        print "test_delete_experiment"

        payload = {'exp_name': 'Theory',
                   'exp_id': 'exp123',
                   'overview': 'overview',
                   'sections': [],
                   'key': KEY
                  }


        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/experiments/exp_id=exp123&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
** Update and Delete Section
#+NAME: update_and_delete_section
#+BEGIN_SRC python
@api.route('/sections/<id>', methods=['GET', 'PUT', 'DELETE'])
def update_and_delete_section(id):
    if request.method == 'GET':
        try:
            section = SystemInterface.get_section_by_id(id)
            return jsonify(section)

        except NotFoundError as err:
            error_message = "No section found with id: %s found." % id

            return render_template('error.html',
                    data=error_message)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))
    
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
            data_dict['s_id']=id
        else:
            abort(500, "the request does not contain data in json")

        try:
            section = SystemInterface.update_section(data_dict)
            return jsonify(section)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

    if request.method == 'DELETE':

        try:
            section = SystemInterface.delete_section(id)
            return jsonify({"status":"sucess"})

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

#+END_SRC
*** TestUpdateSection
 #+NAME: test_update_section
 #+BEGIN_SRC python
class TestUpdateSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_section(self):
        print "test_update_section"
        payload = {'name': 'Theory',
                   'key': KEY}

        payload1 = {'name': 'Theory',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/sections/1", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestDeleteSection
 #+NAME: test_delete_section
 #+BEGIN_SRC python
class TestDeleteSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_section(self):
        print "test_delete_section"

        payload = {'name': 'Theory',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/sections/1", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
** Update and Delete Institute
#+NAME: update_and_delete_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['PUT', 'DELETE'])
def update_and_delete_institute():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'inst_id' in request.args:
            data_dict['inst_id']  = request.args['inst_id']
        else:
            abort(500, "Please provide the 'inst_id' to update the institute")
        
        try:
            institute = SystemInterface.update_institute(data_dict)
            return jsonify(institute)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

    if request.method == 'DELETE':
        if 'inst_id' in request.args and 'key' in request.args:
            inst_id  = request.args['inst_id']
            key = request.args['key']

            try:
                institute = SystemInterface.delete_institute(inst_id, key)

                return jsonify({"status":"sucess"})

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))

#+END_SRC

*** TestUpdateInstitute 
 #+NAME: test_update_institute
 #+BEGIN_SRC python
class TestUpdateInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_institute(self):
        print "test_update_institute"

        payload = {'inst_name': 'IIT Kharagpur',
                   'inst_id': 'IITKgp',
                   'key': KEY}

        payload1 = {'inst_name': 'IIT Kanpur',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/institutes?inst_id=IITKgp", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestDeleteInstitute 
 #+NAME: test_delete_institute
 #+BEGIN_SRC python
class TestDeleteInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_institute(self):
        print "test_delete_institute"

        payload = {'inst_name': 'IIT Kharagpur',
                   'inst_id': 'IITKgp',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/institutes?inst_id=IITKgp&key=defaultkey", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
** Update and Delete Discipline
#+NAME: update_and_delete_discipline
#+BEGIN_SRC python
@api.route('/disciplines', methods=['PUT', 'DELETE'])
def update_and_delete_discipline():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'dis_id' in request.args:
            data_dict['dis_id']  = request.args['dis_id']
        else:
            abort(500, "Please provide the 'dis_id' to update the institute")
        
        try:
            discipline = SystemInterface.update_discipline(data_dict)
            return jsonify(discipline)

        except TypeError as err:
            error_message = 'Malformed arguments, error: %s' % str(err)

            return render_template('error.html', 
                    data=error_message)

        except Exception as err:
            abort(500, 'error: %s' % str(err))

    if request.method == 'DELETE':
        if 'dis_id' in request.args and 'key' in request.args:
            dis_id  = request.args['dis_id']
            key = request.args['key']

            try:
                discipline = SystemInterface.delete_discipline(dis_id, key)
                return jsonify({"status":"sucess"})

            except TypeError as err:
                error_message = 'Malformed arguments, error: %s' % str(err)

                return render_template('error.html', data=error_message)

            except Exception as err:
                abort(500, 'error: %s' % str(err))

#+END_SRC

*** TestUpdateDiscipline
 #+NAME: test_update_discipline
 #+BEGIN_SRC python
class TestUpdateDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_discipline(self):
        print "test_update_discipline"

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        payload1 = {'dis_name': 'Computer Science and Engineering',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/disciplines?dis_id=CSE", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
*** TestDeleteDiscipline
 #+NAME: test_delete_discipline
 #+BEGIN_SRC python
class TestDeleteDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_discipline(self):
        print "test_delete_discipline"

        payload = {'dis_name': 'Computer Science',
                   'dis_id': 'CSE',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/disciplines?dis_id=CSE&key=defaultkey", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

* WebApp

** Index HTML
#+BEGIN_SRC html :tangle ./templates/index.html :eval no :noweb yes
  
  <!DOCTYPE html>
  <html>
    <head>
      <title>Feedback Portal</title>
      <!-- Latest compiled and minified CSS -->
      <link rel = "stylesheet" href = "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity = "sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
      <link rel = "stylesheet" href = "/static/css/main.css">
    </head>
    
    <body onload="renderFeedbackform();">
      <div id="header">
        {% include 'header.html' %}        
      <div class="row">
        <hr style="background:#ff6600 !important;  height: 8px; margin-top: 0px;">
      </div>
      <div class="container">
        <h1> Virtual Labs Feedback Form </h1>
              
        <form class="form" id="feedback-form" onsubmit="submitFeedback(event)">
          <div class="form-group">
            <label class="" id="lab_name_label"></label>
            <label class="" id="lab_mandatory"></label>
            <input class="form-control" id="lab_name_value" disabled="true">
          </div>
          
          <div class="form-group">
            <label class="" id="exp_name_label"></label>
            <label class="" id="exp_mandatory"></label>
            <input class="form-control" id="exp_name_value" disabled="true">
          </div>
          <div class="form-group" id="questions_list"></div>
          <button class="btn btn-primary" >Submit</button>
        </form>
        <div align="right">
	  <span id="version"></span>
	</div>
      </div>
      <div id="footer">
        {% include 'footer.html' %}
<!--<div class="container">
    <p class="text-muted credit" style="color:#A29E9E; margin-left: 71% ">Version v1.0.0</p>-->
        </div>
      </div>
    </body>
    
    <!-- Jquery and Scipts Link -->
    <script> var data = {{ questions_data|tojson }};</script> 
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script type="text/javascript" src="/static/js/main.js"></script>
  </html>
  
#+END_SRC


** Error Page Template
#+BEGIN_SRC html :tangle ./templates/error.html :eval no :noweb yes

<html>
<head>
   <title>Error</title>
</head>
<body bgcolor="lightgrey">
  <p><b>Error : </b>{{ data }}<p>
</body>
</html>

#+END_SRC


** Success Page Template
  #+BEGIN_SRC html :tangle ./templates/success.html :eval no :noweb yes
  <!DOCTYPE html>
  <html>
    <head>
      <title>Feedback Portal</title>
      <!-- Latest compiled and minified CSS -->
      <link rel = "stylesheet" href = "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity = "sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
      <link rel = "stylesheet" href = "/static/css/main.css">
    </head>
    <body onload="renderFeedbackform();">
      <div id="header">
        {% include 'header.html' %}        
      <div class="row">
        <hr style="background:#ff6600 !important;  height: 8px; margin-top: 0px;">
      </div>
      <br><br><br><br><br>
      <h2 align="center"><font color="green">Thank you for the feedback</font></h2>
      <br>
      <h5 align="center"><font color="green">You may close this window</font></h5>
    </body>
    
    <!-- Jquery and Scipts Link -->

  </html>

#+END_SRC
  

** Header HTML
#+BEGIN_SRC html :tangle ./templates/header.html :eval no :noweb yes
      <header>
        <!-- Navigation -->
        <link rel="shortcut icon" href="http://vlabs.ac.in/images/favicon.ico">
        <nav class="navbar navbar-default " style="background-color: white !important; margin-bottom: 0px !important;">
          <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header page-scroll">
              <button aria-controls="bs-navbar" aria-expanded="true"  type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-navbar #bs-example-navbar-collapse-1">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar" style="background-color: #77BB41"></span>
                <span class="icon-bar" style="background-color: #77BB41"></span>
                <span class="icon-bar" style="background-color: #77BB41"></span>
              </button>
              <a class="navbar-brand main-logo-a" href="https://open-edx.vlabs.ac.in"><img src="http://vlabs.ac.in/images/logo-new.png" class="img-responsive main-logo" /></a>
            </div>                  
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse menu-div" id="bs-example-navbar-collapse-1" style="border: 0px;">
              <ul class="nav navbar-nav navbar-right menu-ul search-ul" style="position: relative; top: -5px;">
                <li></li>
              </ul>
              <ul class="nav navbar-nav navbar-right menu-ul">
                <li class="page-scroll menu-li " >
                  <a href="https://open-edx.vlabs.ac.in" class="menu-a" >HOME</a>
                </li>
                <li class="page-scroll menu-li">
                  <a href="https://open-edx.vlabs.ac.in/courses"  class="menu-a " >ALL LABS</a>
                </li>
                <li class="page-scroll menu-li" >
                  <a href="https://open-edx.vlabs.ac.in/#partner" class="menu-a" >PARTNERS</a>
                </li><li class="page-scroll menu-li " >
                  <a href="https://open-edx.vlabs.ac.in/#partner" class="menu-a" >CONTACT</a>
                </li>
              </ul>
            </div>
          </div>
        </nav>
      </header>

#+END_SRC


** Footer HTML
#+BEGIN_SRC html :tangle ./templates/footer.html :eval no :noweb yes
<head>
  <link rel="stylesheet" type="text/css" href="static/css/main.css">
</head>

<footer>
  <div class="container-fluid footer-div" style="background: #404040; margin-top: 40px;  padding: 20px;">
    <div class="col-md-4 border-right-green-dotted" >
      <h2 class="text-h2-lightblue-small" style="font-weight: bold;margin-top: 0px;">Updates</h2>
      <a href="http://community.virtual-labs.ac.in/w/index.php/Download" class="text-normal-gray-small nounderline" style="color: white" > Lab Integration Kit Releases</a><br>
      <a href="http://community.virtual-labs.ac.in/w/index.php/First_Integration_workshop"
	 class="text-normal-gray-small nounderline"
	 style="color: white" >First Integration Workshop at IIIT Hyderabad</a><br>
      <a href="http://community.virtual-labs.ac.in/w/index.php/Summer_Sprint_Integration_workshop" class="text-normal-gray-small nounderline" style="color: white" > Summer Integration Workshop at IIT Guwahati</a><br>
      <a href="http://community.virtual-labs.ac.in/w/index.php/QA/Integration_workshop"
	 class="text-normal-gray-small nounderline"
	 style="color: white" > QA Integration
	Workshop at IIIT Hyderabad</a><br>
      <a href="http://community.virtual-labs.ac.in/w/index.php/A_new_set_of_25_Virtual_Labs_on_Portable_Media" class="text-normal-gray-small nounderline" style="color: white" > A new set of 25 Virtual Labs on Portable Media</a><br>
    </div>
    
    <div class="col-md-2 border-right-green-dotted" >

<!--      <a href="./faq.html" class="text-a-lightgreen" style="text-decoration: underline;" > FAQ</a><br>-->
      <a href="http://community.virtual-labs.ac.in/w/index.php/Main_Page" class="text-a-lightgreen" style="text-decoration: underline;" >Community</a><br>
      
      <a href="http://outreach.vlabs.ac.in/ncentres"
	 class="text-a-lightgreen"
	 style="text-decoration: underline;" > Nodal Centers</a><br>
      
      
      <a href="http://www.sakshat.ac.in/" class="text-a-lightgreen" style="text-decoration: underline;" > Sakshat Portal</a><br>

      <a href="http://outreach.vlabs.ac.in/" class="text-a-lightgreen" style="text-decoration: underline;" > Outreach Portal</a><br>
      <a href="http://118.102.191.38/vlabiitece/"
	 class="text-a-lightgreen"
	 style="text-decoration: underline;" > Labs
	Developed by Nodal Centers</a><br>
      
    </div>
    
    <div class="col-md-3 border-right-green-dotted" id="contact" >
      <h2 class="text-h2-lightblue-small" style="font-weight: bold;margin-top: 0px;"> Contact us</h2>
      <a href="http://feedback.vlabs.ac.in/" class="text-a-lightgreen" style="text-decoration: underline;" > Feedback</a><br>
      
      <a class="text-a-lightgreen"style="text-decoration: underline;" href="mailto:support@vlabs.ac.in">support@vlabs.ac.in</a><br>
      <a href="http://118.102.191.38/labassessment/assessmentform.html"
	 class="text-a-lightgreen"
	 style="text-decoration: underline;" > Lab
	Assessment Form</a><br>

    </div>
    
                        
    <div class="col-md-2 border-right-green-dotted" >
      <h2 class="text-h2-lightblue-small" style="font-weight: bold;margin-top: 0px;"> Follow us</h2>
      <a href="https://www.facebook.com/pages/Virtual-Labs-IIT-Delhi/301510159983871" class="text-a-lightgreen nounderline"   target="_blank"> <img src="http://vlabs.ac.in/images/social/fb.png"  style="border-radius: 50%;"/> </a><br>
      <a href="https://twitter.com/TheVirtualLabs" class="text-a-lightgreen nounderline"   target="_blank"> <img src="http://vlabs.ac.in/images/social/twitter.png"  style="border-radius: 50%;"/></a><br>
      <a href="http://linkedin.com" class="text-a-lightgreen nounderline"  target="_blank" > <img src="http://vlabs.ac.in/images/social/linkedin.png" style="border-radius: 50%;" /></a><br>
      <a href="https://www.youtube.com/watch?v=mVBYNXLaDdg"
	 class="text-a-lightgreen nounderline"
	 target="_blank" >
	<img src="http://vlabs.ac.in/images/social/youtube.png"
	     style="border-radius: 50%; width: 38px;
		    height: 38px" /></a><br>
      
    </div>
    
  </div>
</footer>


#+END_SRC


** JS
#+BEGIN_SRC javascript :tangle ./static/js/main.js :eval no :noweb yes


var feedbackForm = window.data;
var labelQues, formGroup;
console.log(feedbackForm);
document.getElementById("version").innerHTML = "version : "+feedbackForm.version;
function renderQuesLabel() {
    formGroup = document.createElement("div");
    formGroup.className = "form-group"
    newline = document.createElement('p');
    formGroup.appendChild(newline);
    labelQues1 = document.createElement('label');
    formGroup.appendChild(labelQues1);
    labelQues = document.createElement('label');
    $("#questions_list").append(formGroup);
    formGroup.appendChild(labelQues);
    labelQues2 = document.createElement('label');
    formGroup.appendChild(labelQues2);

}

function renderFeedbackform() {
    if(feedbackForm.lab_name){
	$("#lab_name_label").html("Lab Name");
	$("#lab_name_value").val(feedbackForm.lab_name)
    }
    else if(feedbackForm.version == "generic-lab-feedback-v2.0" || feedbackForm.version == "generic-exp-feedback-v2.0"){
	$("#lab_name_label").html("Lab Name");
	document.getElementById("lab_name_value").disabled = false;
	document.getElementById("lab_name_value").required = true;
	document.getElementById("lab_name_value").placeholder = "Enter Lab Name";
	document.getElementById("lab_mandatory").innerHTML = "&nbsp;<font color='maroon'>*</font>";
    }
    else{
	var elem = document.getElementById("lab_name_label");
	elem.parentNode.removeChild(elem);
	var elem1 = document.getElementById("lab_name_value");
	elem1.parentNode.removeChild(elem1);

    }
    if(feedbackForm.exp_name){

	$("#exp_name_label").html("Experiment Name");
	$("#exp_name_value").val(feedbackForm.exp_name);
    }
    else if(feedbackForm.version == "generic-exp-feedback-v2.0"){
	$("#exp_name_label").html("Experiment Name");
	document.getElementById("exp_name_value").disabled = false;
	document.getElementById("exp_name_value").required = true;
	document.getElementById("exp_name_value").placeholder = "Enter Experiment Name";
	document.getElementById("exp_mandatory").innerHTML = "&nbsp;<font color='maroon'>*</font>";
    }
    else
	{
	    var elem = document.getElementById("exp_name_label");
	    elem.parentNode.removeChild(elem);
	    var elem1 = document.getElementById("exp_name_value");
	    elem1.parentNode.removeChild(elem1);
	}

    var quesArray = feedbackForm.questions.length;
    for (var i = 0; i < quesArray; i++) {
	if (feedbackForm.questions[i].type === "checkbox") {
	    renderQuesLabel();
	    labelQues.innerHTML = feedbackForm.questions[i].name;
	    var optionsDiv = document.createElement("div");
	    optionsDiv.id = feedbackForm.questions[i].name;
	    var optionsLength = feedbackForm.questions[i].options.length;

	    for (var j = 0; j < optionsLength; j++) {
		checkOption = document.createElement('input');
		checkOption.type = "checkbox";
		checkOption.value = feedbackForm.questions[i].options[j];

		ansLabel = document.createElement('label');
		ansLabel.className = "checkbox-inline"
		ansLabel.innerHTML = feedbackForm.questions[i].options[j];

		optionsDiv.appendChild(ansLabel);
		ansLabel.insertBefore(checkOption, ansLabel.firstChild);
		formGroup.appendChild(optionsDiv);
		questions_list.appendChild(formGroup);
	    }
	}

	else if(feedbackForm.questions[i].type === "radio") {
	    renderQuesLabel();
	    labelQues1.innerHTML = feedbackForm.questions[i].id+".&nbsp;&nbsp;";
	    labelQues.innerHTML = feedbackForm.questions[i].name;
	    if(feedbackForm.questions[i].mandatory == "Yes"){
		labelQues2.innerHTML = "&nbsp;<font color='maroon'>*</font>";
	    }

	    var optionsDiv1 = document.createElement("div");
	    optionsDiv1.id = feedbackForm.questions[i].id;
	    var optionsLength = feedbackForm.questions[i].options.length;
	    function GenerateTable(arg1, arg2, arg3, table_id) {
		var customers = new Array();
		customers.push([arg1, arg2, arg3]);

		//Create a HTML Table element.
		var table = document.createElement("TABLE");
		table.border = "0";

		//Get the count of columns.
		var columnCount = customers[0].length;

		//Add the header row.
		var row = table.insertRow(-1);
		for (var i = 0; i < columnCount; i++) {
		    var headerCell = document.createElement("Td");
		    headerCell.innerHTML = customers[0][i];
		    row.appendChild(headerCell);
		}
		var dvTable = document.getElementById(table_id);
		dvTable.innerHTML = "";
		dvTable.appendChild(table);
	    }
	    if(i == 4 && (feedbackForm.version == "open-edx-virtual-labs-v2.0_for_experiment" || feedbackForm.version == "generic-exp-feedback-v2.0") || i == 1 && (feedbackForm.version == "open-edx-virtual-labs-v2.0_for_lab" || feedbackForm.version == "generic-lab-feedback-v2.0" )){
	      //  renderQuesLabel();
		labelQues = document.createElement('div');
		labelQues.id="dvTable";
		formGroup.appendChild(labelQues);
		GenerateTable("Not at all", "To some extent", "Very well", "dvTable");
	    }
	    else if(i == 6 && (feedbackForm.version == "open-edx-virtual-labs-v2.0_for_experiment" || feedbackForm.version == "generic-exp-feedback-v2.0") || i == 4 && (feedbackForm.version == "open-edx-virtual-labs-v2.0_for_lab" || feedbackForm.version == "generic-lab-feedback-v2.0")){

	      //renderQuesLabel();
		labelQues = document.createElement('div');
		labelQues.id="dvTable1";
		formGroup.appendChild(labelQues);
		GenerateTable("Not at all", "To some extent", "Very well","dvTable1");
	    }

	    else if(i == 7 && (feedbackForm.version == "open-edx-virtual-labs-v2.0_for_experiment" || feedbackForm.version == "generic-exp-feedback-v2.0") || i == 5 && (feedbackForm.version == "open-edx-virtual-labs-v2.0_for_lab" || feedbackForm.version == "generic-lab-feedback-v2.0")){

	      //  renderQuesLabel();
		labelQues = document.createElement('div');
		labelQues.id="dvTable2";
		formGroup.appendChild(labelQues);
		GenerateTable("Not at all", "May Recommend", "Will definitely","dvTable2");
	    }
	    function answer(flag, question_id){
		if(flag == "No"){
		    var element = document.getElementById("answer");
		    if(element != null){
			element.outerHTML = "";
			delete element;
		    }
		}
		else{
		    if(document.getElementById("answer") == null){
			var div = document.getElementById(question_id);
			var answer = document.createElement('div');
			answer.id = "answer";
			div.appendChild(answer);
			labelQues = document.createElement('br');
			var answer_id = document.getElementById("answer");
			answer_id.appendChild(labelQues);

			ansTextArea = document.createElement("textarea");
			ansTextArea.className = "form-control";
			ansTextArea.style.width = "35em";
			ansTextArea.style.height = "7em";
			ansTextArea.id = "bug-answer";
			ansTextArea.placeholder = "Please specify the bug details here";
			ansTextArea.maxLength = "160";
			answer_id.appendChild(ansTextArea);

		    }
		}

	    }
	    function driver(questions, value, flag){
		for(var i=0; i<questions.length;i++){
		    var questionElement = document.getElementById(questions[i]);
		    var children = questionElement.querySelectorAll('input');
		    for(var j = 0; j < children.length; j++) {
			var child = children[j];

			if(flag == "false"){
			    child.checked = false;

			}
			else if(flag == "true" && child.value == value){
			    child.checked = true;
			}

		    }

		}
	    }

	    for (var k = 0; k < optionsLength; k++) {

		radioOption = document.createElement('input');
		radioOption.type = "radio";
		radioOption.className = "";
		
		if(i == 0 && k == 0){
		    radioOption.checked = true;
		}
		if(i == 1 && k == 0 && feedbackForm.questions[i].driver.length!=0){
		    var questions = feedbackForm.questions[i].driver;
		    radioOption.onclick = function(){driver(questions, 'Not applicable', 'false'); };
		}
		if(i == 1 && k == 1  && feedbackForm.questions[i].driver.length!=0){
		    var questions = feedbackForm.questions[i].driver;
		    radioOption.onclick = function(){ driver(questions, 'Not applicable', 'true'); };
		}
		if(feedbackForm.questions[i].linked_answer == "Yes" && k == 0){
		    var id = feedbackForm.questions[i].id;
		    radioOption.onclick = function(){ answer("Yes", id); };
		}
		if(feedbackForm.questions[i].linked_answer == "Yes" && k == 1){
		    var id = feedbackForm.questions[i].id;
		    radioOption.onclick = function(){ answer("No", id); };
		}
		if(feedbackForm.questions[i].linked_answer == "Yes" && k == 2){
		    var id = feedbackForm.questions[i].id;
		    radioOption.onclick = function(){ answer("No", id); };
		}
		radioOption.name = feedbackForm.questions[i].name;
		radioOption.value = feedbackForm.questions[i].options[k];
		radioLabel = document.createElement('label');
		radioLabel.className = "radio-inline";
		radioLabel.innerHTML = feedbackForm.questions[i].options[k];

		optionsDiv1.appendChild(radioLabel);
		radioLabel.insertBefore(radioOption, radioLabel.firstChild);
		formGroup.appendChild(optionsDiv1);
		questions_list.appendChild(formGroup);
	    }

	}
	else if (feedbackForm.questions[i].type === "textarea") {
	    var ansTextArea;
	    renderQuesLabel();
	    labelQues.innerHTML = feedbackForm.questions[i].name;
	    labelQues1.innerHTML = feedbackForm.questions[i].id+".&nbsp;&nbsp;";
	    if(feedbackForm.questions[i].mandatory == "Yes"){
		labelQues2.innerHTML = "&nbsp;<font color='maroon'>*</font>";
	    }
	    ansTextArea = document.createElement("textarea");
	    ansTextArea.className = "form-control";
	    ansTextArea.id = feedbackForm.questions[i].id;
	    ansTextArea.style.width = "38em";
	    ansTextArea.style.height = "6em";
	    ansTextArea.maxLength = "160";

	    formGroup.appendChild(ansTextArea);
	    
	}
	else if(feedbackForm.questions[i].type === "text") {
	    var ansTextBox;
	    renderQuesLabel();
	    labelQues.innerHTML = feedbackForm.questions[i].name;
	    labelQues1.innerHTML = feedbackForm.questions[i].id+".&nbsp;&nbsp;";
	    if(feedbackForm.questions[i].mandatory == "Yes"){
		labelQues2.innerHTML = "&nbsp;<font color='maroon'>*</font>";
	    }
	    ansTextBox = document.createElement("input");
	    ansTextBox.className = "form-control"
	    ansTextBox.placeholder = feedbackForm.questions[i].placeholder;
	    ansTextBox.style.width = "25em";
	    ansTextBox.id = feedbackForm.questions[i].id;
	    formGroup.appendChild(ansTextBox);
	}

    }
}

function submitFeedback(event) {

    event.preventDefault();
    var feedback = {}; // the final feedback object
    if(feedbackForm.lab_name){
	feedback.lab_name = feedbackForm.lab_name;
    }
    if(feedbackForm.exp_name){
	feedback.exp_name = feedbackForm.exp_name;
    }
    if(feedbackForm.user_id){
    feedback.user_id = feedbackForm.user_id;
    }
    feedback.version = feedbackForm.version;
    if(feedbackForm.key){
	feedback.key = feedbackForm.key;
    }
    if(document.getElementById("lab_name_value")){
	feedback.lab_name = document.getElementById("lab_name_value").value;
    }
    if(document.getElementById("exp_name_value")){
	feedback.lab_name = document.getElementById("exp_name_value").value;
    }
    feedback.responses = []; // the list of questions and user answers
    var quesArray = feedbackForm.questions.length;
    // loop over the questions
    for (var i = 0; i < quesArray; i++) {
	var questionElement = document.getElementById(feedbackForm.questions[i].id);
	var answer = null;
	if(feedbackForm.questions[i].type === 'radio') {
	    answer = []
	    var children = questionElement.querySelectorAll('input');
	    for(var j = 0; j < children.length; j++) {
		var child = children[j];
		// console.log('child', child, child.type, child.checked);
		if(child.type === 'radio' && child.checked === true) {

		    if(children.length == 10){
			var ans = child.value + "/"+ String(Number(children.length))
			answer.push(ans);
		    }
		    else if(children.length == 11){
                        var ans = child.value;
			if(ans != "Not applicable"){
			    var ans = child.value + "/"+ String(Number(children.length)-1)
			    answer.push(ans);
			}
			else{
			    answer.push(ans);
			}
		    }

		    else{
			if(i == 2 ){
			    if(document.getElementById("bug-answer") != null){
				var text = document.getElementById("bug-answer").value;
				console.log(text);
				answer.push(text);
			    }
			}
			answer.push(child.value);
		    }

		}
	    }
	}
	else if(feedbackForm.questions[i].type === 'checkbox') {
	    answer = [];
	    var children = questionElement.querySelectorAll('input');
	    for(var j = 0; j < children.length; j++) {
		var child = children[j];
		if(child.checked === true) {
		    // console.log('selected', child.value);
		    answer.push(child.value);
		}
	    }
	}
	else if(feedbackForm.questions[i].type === 'textarea') {
	    answer = [];
	    var input = questionElement;
	    answer.push(input.value);
	}
	else if(feedbackForm.questions[i].type === 'text') {
	    answer = [];
	    var input = questionElement;
	    //console.log(input);
	    answer.push(input.value);
	}
	// create an object to insert the current question data
	var question = {};
	question.name = feedbackForm.questions[i].name;
	//question.type = feedbackForm.questions[i].type;
	question.answers = answer;
	feedback.responses.push(question);
    }
    // Posting json data to /feedback api

    console.log(feedback);
    function add_feedback(){
	$.ajax({
	    url: '/feedback',
	    type: 'POST',
	    data: JSON.stringify(feedback),
	    contentType: 'application/json',
	    success: function (data) {
		window.location.href="/success";
		console.log(data);
	    },

	    error: function(data){
		//alert("error");
		console.log("Error in submitted feedback");
		console.log(data); 
	    }

	});  
    }
    function add_generic_feedback(){
	$.ajax({
	    url: '/',
	    type: 'POST',
	    data: JSON.stringify(feedback),
	    contentType: 'application/json',
	    success: function (data) {
		window.location.href="/success";
		console.log(data);
	    },

	    error: function(data){
		//alert("error");
		console.log("Error in submitted feedback");
		console.log(data); 
	    }

	});  
    }
    var count = 0;
    var not_answered = []
    for(var i=0;i<feedback.responses.length;i++){
	if(feedbackForm.questions[i].mandatory == "Yes" && (feedback.responses[i].answers.length == 0 || feedback.responses[i].answers[0] == "")){
	    //alert("Some of the questions are not answered");
	    //alert("Quesion No " + (i+1) +" is not answered");
	    count++;
	    not_answered.push(i+1);
//	      break;
	}
    }
    if(count == 0){
	if(feedbackForm.version == "generic-feedback-v2.0" || feedbackForm.version == "generic-exp-feedback-v2.0" || feedbackForm.version == "generic-lab-feedback-v2.0"){
	    add_generic_feedback();
	    }
	else{
	    add_feedback();
	}
    }
    else{
	alert(not_answered + " Question(s) are not answered");
    }


}
    
#+END_SRC
   

** CSS 
#+BEGIN_SRC css :tangle ./static/css/main.css :eval no :noweb yes
@import url(https://fonts.googleapis.com/css?family=Raleway:400,300,700,500,600);
body {
    font-family:  sans-serif;
    font-size: 14px;
    color: #767676;
}

#feedback-form {
    width: 80%;
    margin-top: 30px;
}

.headInfo {
    margin-left: 0px; 
    margin-top: 20px;
}

.values {
    margin-left: 0px;
    text-align: left;
}

.rowCol {
    border: 1px solid #ccc
}

.mainrow {
    margin-top: 4px;
}

.navbar-default, .navbar-inverse {
    border: 0;
}

.footer-div
{
    margin-top:120px;
}

.main-logo-a {
    height: auto;
    overflow: visible;
    margin-left: 0px !important;
    padding-bottom: 10px !important;
    padding-top: 10px !important;
}

.menu-a {
    font-size: 14px !important;
    font-family: 'Raleway' !important;
    color: #2C99CD !important;
    padding-left: 10px !important;
    padding-bottom: 5px !important;
    padding-top: 5px !important;
    padding-right: 10px !important;
}

.menu-a-active {
    color: white !important;
}

.menu-li {
    border-radius: 10px;
    margin-left: 20px;
    margin-right: 20px;
}

.menu-li:HOVER {
    background-color: #77BB41 !important;
}

.menu-a:HOVER {
    color: white !important;
}

.menu-li-active {
    background-color: #77BB41;
}

.menu-ul {
    margin-top: 45px;
}

.text-h2-lightblue-small
{
	color: #2C99CE;
	font-size: 1.5em;
}
.text-a-lightgreen
{
	color: #72AB44;
	font-size: 1.3em;
	text-decoration: underline;
}

.text-a-lightgreen:HOVER
{
	color: #72AB44 !important;
}

.text-normal-gray-small
{
	color: #888;
	font-size: 16px;
}

.border-right-green-dotted
{
	border-right: 2px dotted;
	 margin-top: 30px;
	 border-right-color: #678f48;
	 min-height: 115px;
}
.footer-div
{
margin-top:120px;
}
table {
    font-family: arial, sans-serif;
    border-collapse: collapse;
    width: 32em;
}

td {
    border: 0px solid #dddddd;
    text-align: left;
    padding: 8px;
}

tr:nth-child(even) {
    background-color: #dddddd;
}


#+END_SRC
   

* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import requests
import json
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
from runtime.utils.type_utils import jsonify_list
from runtime.exceptions.custom_exceptions import *
from runtime.system.system_interface import SystemInterface
import yaml

api = Blueprint('APIs', __name__)

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.rest.app import create_app
from runtime.config.system_config import KEY
from runtime.rest.api import *
from runtime.system.system import System
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<get_and_add_lab>>
<<update_and_delete_lab>>
<<get_and_add_experiment>>
<<get_and_add_discipline>>
<<update_and_delete_experiment>>
<<update_and_delete_section>>
<<get_and_add_section>>
<<update_and_delete_institute>>
<<update_and_delete_discipline>>
<<get_and_add_institute>>
#+END_SRC


** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_add_lab>>
<<test_update_lab>>
<<test_delete_lab>>
<<test_get_labs>>
<<test_get_lab_by_labid>>
<<test_get_exp_by_expid>>
<<test_add_experiment>>
<<test_add_discipline>>
<<test_get_discipline>>
<<test_update_discipline>>
<<test_get_experiment>>
<<test_update_experiment>>
<<test_update_section>>
<<test_delete_section>>
<<test_delete_experiment>>
<<test_get_Section>>
<<test_add_section>>
<<test_add_institute>>
<<test_get_institute>>
<<test_update_institute>>
<<test_delete_institute>>
<<test_delete_discipline>>
<<run_test_cases>>
#+end_src

