#+TITLE: Persistence Delegate for the System
#+AUTHOR: VLEAD
#+DATE: [2016-07-07 Thu]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Persistence Delegate
  Persistence Delegate encapsulates a set of functions where each function performs a
  specific task.  With the use of these delegates, the core implementation of
  the =system= will not alter but by plugging delegates that are specific to
  each environment, for example, be it either objects or persistence, the
  =system= for that particular environment is derived while not modifying the
  =system= class.
  
** Initialize Persistence Delegate
   Provides all the delegates that operate on objects.

*** class_persistence_delegate 
#+NAME: class_persistence_delegate
#+BEGIN_SRC python
class PersistenceDelegate():
   
    def __init__(self):
        self.entities = {'session': Session,
                         'lab': Lab,
                         'experiment' : Experiment

                        }

#+END_SRC


*** Tests
#+NAME: test_class_persistence_delegate
#+BEGIN_SRC python
class TestPersistenceDelegate(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        self.persistence_delegate = PersistenceDelegate()
        
    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistence_delegate = None

#+END_SRC


** Other functions

   Other functions that help =System= perform the operations. 

***  Check if =Discipline= already exists
    This function checks if a discipline is already in the discipline-set of the =System=.
#+NAME: persistence_discipline_exists
#+BEGIN_SRC python
    def discipline_exists(self, ds_id):
        ret_val = False
        try:
            if Discipline.get_by_id(ds_id) is not None:
                ret_val = True
        except Exception as e:
            pass

        return ret_val

        
#+END_SRC

**** Tests
#+NAME: test_persistence_discipline_exists
#+BEGIN_SRC python
  
    def test_discipline_exists(self):
        print "test_discipline_exists"
        dis_name1="IIT Delhi"
        dis_id1="EEE08"
        dis = Discipline(dis_name=dis_name1, dis_id=dis_id1)

        dis1 = self.persistence_delegate.add_discipline(dis)

        dis_name2="IIT Delhi"
        dis_id2="EEE09"
        dis2 = Discipline(dis_name=dis_name2, dis_id=dis_id2)

        self.assertEqual(self.persistence_delegate.discipline_exists(dis1.id),
                            True)
        self.assertEqual(self.persistence_delegate.discipline_exists(dis2.id),
                            False)
     


#+END_SRC
   

***  Check if =lab= already exists
    This function checks if a lab is already in the lab-set of the =System=.
#+NAME: persistence_lab_exists
#+BEGIN_SRC python
    def lab_exists(self, lab):
        lab_id = lab.get("lab_id")
        return lab == self.get_lab(lab_id=lab_id)


        
#+END_SRC

**** Tests
#+NAME: test_persistence_lab_exists
#+BEGIN_SRC python
    def test_lab_exists(self):
        print "test_lab_exists"
        lab_name1="Computer Programming"
        lab_id1="CSE01"
        lab = Lab(lab_name=lab_name1, lab_id=lab_id1)

        lab1 = self.persistence_delegate.add_lab(lab)

        lab_name2="Data Structures"
        lab_id2="CSE02"
        lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2)

        self.assertEqual(self.persistence_delegate.lab_exists(lab1),
                            True)
        self.assertEqual(self.persistence_delegate.lab_exists(lab2),
                            False)




#+END_SRC


***  Check if =experiment= already exists
    This function checks if a user is already in the user-set of the =System=.
#+NAME: persistence_experiment_exists
#+BEGIN_SRC python
    def experiment_exists(self, experiment):
        exp_id = experiment.get("exp_id")
        return experiment == self.get_experiment(exp_id=exp_id)
        
#+END_SRC

**** Tests
#+NAME: test_persistence_experiment_exists
#+BEGIN_SRC python
    def test_experiment_exists(self):
        print "test_experiment_exists"
        exp_name = "Number Systems"
        exp_id = "EE99777"
        experiment = Experiment(exp_name=exp_name, exp_id=exp_id)
        self.persistence_delegate.add_experiment(experiment)
        self.assertEqual(self.persistence_delegate.experiment_exists(experiment),
                            True)

#+END_SRC

     
***  Check if =response= already exists
    This function checks if response is already in the System.
#+NAME: persistence_response_exists
#+BEGIN_SRC python
    def response_exists(self, response):
        ret_val = False
        
        question = response.get("question")
        answers = response.get("answers")
        if self.get_response(question=question, answers=answers) is not None:
            ret_val = True

        return ret_val


#+END_SRC

**** Tests
#+NAME: test_persistence_response_exists
#+BEGIN_SRC python
    def test_response_exists(self):
        print "test_response_exists"

        name = "how are labs?"
        q_type = "radio"
        question1 = Question(name=name, question_type=q_type)
        question1.save()

        ans1 = Answer(name="excellent")
        ans1.save()
        ans2 = Answer(name="good")
        ans2.save()
        
        gateway_ip = "10.100.40.2"
        lab_name = "cse01"
        exp_name = "data01"
        date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
        version = "open-edx-virtual-labs-v2.0"
        user_id = "John123"
        fb = Feedback(gateway_ip=gateway_ip,
                       lab_name=lab_name,
                       exp_name=exp_name,
                       date=date,
                       version=version,
                       user_id=user_id,
                       responses=[])
        fb.save()

        res1 = Response(question=question1, answers=[ans1], feedbacks=[fb])
        res1.save()
        res2 = Response(question=question1, answers=[ans1, ans2], 
                            feedbacks=[fb])
        res2.save()

        res3 = Response(question=question1, answers=[ans2], feedbacks=[fb])

        self.assertEqual(self.persistence_delegate.response_exists(res1),
                             True)
        self.assertEqual(self.persistence_delegate.response_exists(res2),
                             True)
        self.assertEqual(self.persistence_delegate.response_exists(res3),
                             False)

#+END_SRC


***  Check if =feedback= already exists
    This function checks if feedback is already in the system
#+NAME: persistence_feedback_exists
#+BEGIN_SRC python
    def feedback_exists(self, fb_id):
        ret_val = False

        try:
            if Feedback.get_by_id(fb_id) is not None:
                ret_val = True
        except Exception as e:
            pass

        return ret_val 
        
#+END_SRC

**** Tests
#+NAME: test_persistence_feedback_exists
#+BEGIN_SRC python
    def test_feedback_exists(self):
        print "test_feedback_exists"
        gateway_ip1 = "10.100.40.2"
        lab_name1 = "cse01"
        exp_name1 = "data01"
        date1 = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
        version = "open-edx-virtual-labs-v2.0"
        user_id = "John123"
        fb1 = Feedback(gateway_ip=gateway_ip1,
                        lab_name=lab_name1,
                        exp_name=exp_name1,
                        date=date1,
                        version=version,
                        user_id=user_id,
                        responses=[])
        fb1.save()

        gateway_ip2 = "10.100.50.2"
        lab_name2 = "cse02"
        exp_name2 = "data02"
        date2 = datetime.datetime.strptime("30-06-2017", "%d-%m-%Y").date()
        version2 = "open-edx-virtual-labs-v1.0"
        user_id = "John123"
        fb2 = Feedback(gateway_ip=gateway_ip2,
                                lab_name=lab_name2,
                                exp_name=exp_name2,
                                date=date2,
                                version=version2,
                                user_id=user_id,
                                responses=[]
                                )
        
        self.assertEqual(self.persistence_delegate.feedback_exists(1),
                            True)
        self.assertEqual(self.persistence_delegate.feedback_exists(2),
                            False)

#+END_SRC



***  Add discipline to the system
    This function adds discipline to the system.
#+NAME: persistence_add_discipline
#+BEGIN_SRC python
    def add_discipline(self, discipline):
        discipline.save()
        return discipline

#+END_SRC

**** Tests
#+NAME: test_persistence_add_discipline
#+BEGIN_SRC python
    def test_add_discipline(self):
         print "test_add_discipline"
         dis_name = "IIT Delhi"
         dis_id = "EEE08"
         discipline = Discipline(dis_name=dis_name, dis_id=dis_id)
         discipline = self.persistence_delegate.add_discipline(discipline)
         discipline = discipline.get_by_id(1)
         self.assertEqual(discipline.get("dis_name"), dis_name)
         self.assertEqual(discipline.get("dis_id"), dis_id)

#+END_SRC



***  Add lab to the system
    This function adds lab to the system.
#+NAME: persistence_add_lab
#+BEGIN_SRC python
    def add_lab(self, lab):
        lab.save()
        return lab

#+END_SRC

**** Tests
#+NAME: test_persistence_add_lab
#+BEGIN_SRC python
    def test_add_lab(self):
         print "test_add_lab"
         lab_name="Computer Programming"
         lab_id="CSE01"
         lab = Lab(lab_name=lab_name, lab_id=lab_id)

         question1 = self.persistence_delegate.add_lab(lab)
         self.assertEqual(self.persistence_delegate.lab_exists(lab),
                          True)

#+END_SRC


***  Add experiment to the system
    This function adds experiment to the system.
#+NAME: persistence_add_experiment
#+BEGIN_SRC python
    def add_experiment(self, experiment):
        experiment.save()
        return experiment

#+END_SRC

**** Tests
#+NAME: test_persistence_add_experiment
#+BEGIN_SRC python
    def test_add_experiment(self):
         print "test_add_experiment"
         exp_name = "Number Systems"
         exp_id = "EE99777"
         experiment = Experiment(exp_name=exp_name, exp_id=exp_id)
         experiment = self.persistence_delegate.add_experiment(experiment)
         experiment = experiment.get_by_id(1)
         self.assertEqual(experiment.get("exp_name"), exp_name)

#+END_SRC


***  Update Discipline 
    This function updates existing discipline.
#+NAME: persistence_update_discipline
#+BEGIN_SRC python
    def update_discipline(self, discipline, dis_name, dis_id):
        discipline.set(dis_name=dis_name, dis_id=dis_id)
        discipline.save()
        return discipline

#+END_SRC

**** Tests
#+NAME: test_persistence_update_discipline
#+BEGIN_SRC python
    def test_update_discipline(self):
         print "test_update_discipline"
         dis_name = "IIT Delhi"
         dis_id = "EEE08"
         dis = Discipline(dis_name=dis_name, dis_id=dis_id)
         dis1 = self.persistence_delegate.add_discipline(dis)
         dis_name1 = "IIT Bombay"
         dis_id1 = "EEE09"
         dis2 = self.persistence_delegate.update_discipline\
           (dis1, dis_name1, dis_id1),
         dis2 = Discipline.get_by_id(1)
         self.assertEqual(dis2.get("dis_name"), dis_name1)
         self.assertEqual(dis2.get("dis_id"), dis_id1)

#+END_SRC


***  Update lab 
    This function updates existing lab.
#+NAME: persistence_update_lab
#+BEGIN_SRC python
    def update_lab(self, lab, lab_name, lab_id):
        lab.set(lab_name=lab_name, lab_id=lab_id)
        lab.save()
        return lab

#+END_SRC

**** Tests
#+NAME: test_persistence_update_lab
#+BEGIN_SRC python
    def test_update_lab(self):
         print "test_update_lab"
         lab_name = "Data Structures"
         lab_id = "cse01"
         lab = Lab(lab_name=lab_name, lab_id=lab_id)
         lab1 = self.persistence_delegate.add_lab(lab)
         lab_name1 = "Computer Programming"
         lab_id1 = "cse02"
         lab2 = self.persistence_delegate.update_lab\
           (lab1, lab_name1, lab_id1),
         lab2 = Lab.get_by_id(1)
         self.assertEqual(lab2.get("lab_name"), lab_name1)

#+END_SRC


***  Update Experiment 
    This function updates existing experiment.
#+NAME: persistence_update_experiment
#+BEGIN_SRC python
    def update_experiment(self, experiment, exp_name, exp_id):
        experiment.set(exp_name=exp_name, exp_id=exp_id)
        experiment.save()
        return experiment

#+END_SRC

**** Tests
#+NAME: test_persistence_update_experiment
#+BEGIN_SRC python
    def test_update_experiment(self):
         print "test_update_experiment"
         exp_name = "Data Structures"
         exp_id = "cse01"
         exp = Experiment(exp_name=exp_name, exp_id=exp_id)
         exp1 = self.persistence_delegate.add_experiment(exp)
         exp_name1 = "Computer Programming"
         exp_id1 = "cse02"
         exp2 = self.persistence_delegate.update_experiment\
           (exp1, exp_name1, exp_id1),
         exp2 = Experiment.get_by_id(1)
         self.assertEqual(exp2.get("exp_name"), exp_name1)

#+END_SRC


***  Delete Discipline 
    This function delete existing Discipline.
#+NAME: persistence_delete_discipline
#+BEGIN_SRC python
    def delete_discipline(self, d_id):
        record = Discipline.get_by_id(d_id)
        if not record:
            abort(404, 'No Discipline  with id %s' % (d_id))
        else:
            try:
                record.delete()
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                print e
                abort(500, str(e))

        return d_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_discipline
#+BEGIN_SRC python
    def test_delete_discipline(self):
         print "test_delete_discipline"
         dis_name = "IIT Delhi"
         dis_id = "EEE08"
         dis = Discipline(dis_name=dis_name, dis_id=dis_id)
         dis1 = self.persistence_delegate.add_discipline(dis)

         dis_name1 = "IIT Kanpur"
         dis_id1 = "EEE10"
         dis1 = Discipline (dis_name=dis_name1, dis_id=dis_id1)
         dis2 = self.persistence_delegate.add_discipline(dis1)

         self.persistence_delegate.delete_discipline(1)

         self.assertEqual(len(Discipline.get_all()), 1)

#+END_SRC

 
***  Delete lab 
    This function delete existing lab.
#+NAME: persistence_delete_lab
#+BEGIN_SRC python
    def delete_lab(self, l_id):
        record = Lab.get_by_id(l_id)
        if not record:
            abort(404, 'No Lab with id %s' % (l_id))
        else:
            try:
                record.delete()
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                print e
                abort(500, str(e))

        return l_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_lab
#+BEGIN_SRC python
    def test_delete_lab(self):
         print "test_delete_lab"
         lab_name = "Data Structures"
         lab_id = "cse01"
         lab = Lab(lab_name=lab_name, lab_id=lab_id)
         lab1 = self.persistence_delegate.add_lab(lab)

         lab_name1 = "Computer Programming"
         lab_id1 = "cse02"
         lab1 = Lab(lab_name=lab_name1, lab_id=lab_id1)
         lab2 = self.persistence_delegate.add_lab(lab1)

         self.persistence_delegate.delete_lab(1)

         self.assertEqual(len(Lab.get_all()), 1)

#+END_SRC


***  Delete Exeriment 
    This function delete existing experiment.
#+NAME: persistence_delete_experiment
#+BEGIN_SRC python
    def delete_experiment(self, e_id):
        record = Experiment.get_by_id(e_id)
        if not record:
            abort(404, 'No Experiment with id %s' % (e_id))
        else:
            try:
                record.delete()
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                print e
                abort(500, str(e))

        return e_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_experiment
#+BEGIN_SRC python
    def test_delete_experiment(self):
         print "test_delete_experiment"
         exp_name = "arrays"
         exp_id = "cse01"
         exp = Experiment(exp_name=exp_name, exp_id=exp_id)
         exp1 = self.persistence_delegate.add_experiment(exp)

         exp_name1 = "linked list"
         exp_id1 = "cse02"
         exp1 = Experiment(exp_name=exp_name1, exp_id=exp_id1)
         exp2 = self.persistence_delegate.add_experiment(exp1)

         self.persistence_delegate.delete_experiment(1)

         self.assertEqual(len(Experiment.get_all()), 1)

#+END_SRC


***  Add feedback to the system
    This function adds a feedback to the system.
#+NAME: persistence_add_feedback
#+BEGIN_SRC python
    def add_feedback(self, gateway_ip, lab_name, exp_name, date,
                         version, user_id, responses):
        try:
            new_feedback = Feedback(gateway_ip=gateway_ip,
                                    lab_name=lab_name,
                                    exp_name=exp_name,
                                    date=date,
                                    version=version,
                                    user_id=user_id,
                                    responses=responses)
            new_feedback.save()
            return new_feedback
        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+END_SRC

**** Tests
#+NAME: test_persistence_add_feedback
#+BEGIN_SRC python
    def test_add_feedback(self):
         print "test_add_feedback"
         gateway_ip = "10.100.40.2"
         lab_name = "cse01"
         exp_name = "data01"
         date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         version = "open-edx-virtual-labs-v2.0"
         user_id = "John123"
         responses = []

         try:
            fb1 = self.persistence_delegate.add_feedback(gateway_ip, lab_name,
                                                         exp_name, date, 
                                                         version,
                                                         user_id,
                                                         responses)
         except Exception as err:
             self.assertEqual(True, False)

         feedback = Feedback.get_by_id(1)

         self.assertEqual(feedback.get("gateway_ip"), gateway_ip)
         self.assertEqual(feedback.get("lab_name"), lab_name)
         self.assertEqual(feedback.get("exp_name"), exp_name)
         self.assertEqual(feedback.get("responses"), [])
         self.assertEqual(feedback.get("date"), date)
         self.assertEqual(feedback.get("version"), version)
         self.assertEqual(feedback.get("user_id"), user_id)

#+END_SRC


***  Add responses to a Feedback
    This function adds responses to a given feedback.
#+NAME: persistence_add_responses_to_feedback
#+BEGIN_SRC python
    def add_responses_to_feedback(self, fb_id, responses):
        feedback = self.get_feedback_by_id(fb_id)
        response_list = []
        for response in responses:
            answers = response.get("answers")
            if self.response_exists(response):
                response = self.get_response(question=response.get('question'),
                                             answers=response.get('answers'))
            else:
                answer_list = []
                for answer in answers:
                    if self.answer_exists(answer):
                        answer = self.get_answer(name=answer.get("name"))
                    else:
                        answer.save()
                    answer_list.append(answer)
                question = response.get("question")
                question = self.get_question(name=question.get("name"))
                response.set(question=question, answers=answer_list,
                                 feedbacks=[feedback])

            response_list.append(response)

        feedback.set(responses=response_list)
        return feedback

#+END_SRC

****  Tests
#+NAME: test_persistence_add_responses_to_feedback
#+BEGIN_SRC python
    def test_add_saved_responses_to_feedback(self):
         print "test_add_saved_responses_to_feedback"

         q_type = "radio"
         question1 = Question(name="How is your breakfast?", 
                                  question_type=q_type)
         question2 = Question(name="How is your lunch?", question_type=q_type)
         question3 = Question(name="How is your dinner?", question_type=q_type)

         q1 = Question(name="How is your breakfast?", 
                                  question_type=q_type)
         q2 = Question(name="How is your lunch?", question_type=q_type)
         q3 = Question(name="How is your dinner?", question_type=q_type)


         answer1 = Answer(name="Good")
         answer2 = Answer(name="Bad")
         answer3 = Answer(name="Excellent")
         answer4 = Answer(name="Fair")

         a1 = Answer(name="Good")
         a2 = Answer(name="Bad")
         a3 = Answer(name="Excellent")
         a4 = Answer(name="Fair")

         question1.save()
         question2.save()
         question3.save()

         answer1.save()
         answer2.save()
         answer3.save()
         answer4.save()

         gateway_ip = "10.100.40.2"
         lab_name = "cse01"
         exp_name = "data01"
         version = "open-edx-virtual-labs-v2.0"
         date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         user_id = "John123"
         fb = Feedback(gateway_ip=gateway_ip,
                        lab_name=lab_name,
                        exp_name=exp_name,
                        date=date,
                        version=version,
                        user_id=user_id,
                        responses=[])
         fb.save()

         res1 = Response(question=question1, answers=[answer1], feedbacks=[fb])
         res2 = Response(question=question2, answers=[answer2, answer3], 
                             feedbacks=[fb])
         res3 = Response(question=question3, answers=[answer3], feedbacks=[fb])
         res4 = Response(question=question3, 
                             answers=[answer1, answer2, answer3, answer4], 
                             feedbacks=[fb])


         r1 = Response(question=q1, answers=[a1], feedbacks=[fb])
         r2 = Response(question=q2, answers=[a2, answer3], 
                             feedbacks=[fb])
         r3 = Response(question=q3, answers=[a3], feedbacks=[fb])
         r4 = Response(question=q3, 
                             answers=[a1, a2, a3, a4], 
                             feedbacks=[fb])

         res1.save()
         res2.save()
         res3.save()
         res4.save()

         version = "open-edx-virtual-labs-v2.0"
         user_id = "John123"

         fb1 = Feedback(gateway_ip=gateway_ip,
                          lab_name="Finite Automate",
                          exp_name="DFA",
                          date=date,
                          version=version,
                          user_id=user_id,
                          responses=[])
         fb1.save()

         feedback = self.persistence_delegate.add_responses_to_feedback(fb1.id, 
                                                  [r1, r2, r3, r4])

         self.assertEqual(len(feedback.get("responses")), 4)
         self.assertEqual(feedback.get("responses")[0], res1)
         self.assertEqual(feedback.get("responses")[1], res2)
         self.assertEqual(feedback.get("responses")[2], res3)
         self.assertEqual(feedback.get("responses")[3], res4)


    def test_add_unsaved_responses_with_saved_answers_to_feedback(self):
         print "test_add_unsaved_responses_with_saved_answers_to_feedback"

         q_type = "radio"
         question1 = Question(name="How is your breakfast?", 
                                  question_type=q_type)
         question2 = Question(name="How is your lunch?", question_type=q_type)
         question3 = Question(name="How is your dinner?", question_type=q_type)


         answer1 = Answer(name="Good")
         answer2 = Answer(name="Bad")
         answer3 = Answer(name="Excellent")
         answer4 = Answer(name="Fair")

         question1.save()
         question2.save()
         question3.save()

         answer1.save()
         answer2.save()
         answer3.save()
         answer4.save()

         gateway_ip = "10.100.40.2"
         lab_name = "cse01"
         exp_name = "data01"
         date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         version = "open-edx-virtual-labs-v2.0"
         user_id = "John123"

         fb = Feedback(gateway_ip=gateway_ip,
                        lab_name=lab_name,
                        exp_name=exp_name,
                        date=date,
                        version=version,
                        user_id=user_id,
                        responses=[])
         fb.save()

         res1 = Response(question=question1, answers=[answer1], feedbacks=[fb])
         res2 = Response(question=question2, answers=[answer2, answer3], 
                             feedbacks=[fb])
         res3 = Response(question=question3, answers=[answer3], feedbacks=[fb])
         res4 = Response(question=question3, 
                             answers=[answer1, answer2, answer3, answer4], 
                             feedbacks=[fb])


         feedback = self.persistence_delegate.add_responses_to_feedback(1, 
                                                  [res1, res2, res3, res4])

         self.assertEqual(len(feedback.get("responses")), 4)
         self.assertEqual(feedback.get("responses")[0], res1)
         self.assertEqual(feedback.get("responses")[1], res2)
         self.assertEqual(feedback.get("responses")[2], res3)
         self.assertEqual(feedback.get("responses")[3], res4)


    def test_add_unsaved_responses_with_unsaved_answers_to_feedback(self):
         print "test_add_unsaved_responses_with_saved_answers_to_feedback"

         q_type = "radio"
         question1 = Question(name="How is your breakfast?", 
                                  question_type=q_type)
         question2 = Question(name="How is your lunch?", question_type=q_type)
         question3 = Question(name="How is your dinner?", question_type=q_type)


         answer1 = Answer(name="Good")
         answer2 = Answer(name="Bad")
         answer3 = Answer(name="Excellent")
         answer4 = Answer(name="Fair")

         question1.save()
         question2.save()
         question3.save()

         gateway_ip = "10.100.40.2"
         lab_name = "cse01"
         exp_name = "data01"
         date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         version = "open-edx-virtual-labs-v2.0"
         user_id = "John123"

         fb = Feedback(gateway_ip=gateway_ip,
                        lab_name=lab_name,
                        exp_name=exp_name,
                        date=date,
                        version=version,
                        user_id=user_id,
                        responses=[])
         fb.save()

         res1 = Response(question=question1, answers=[answer1], feedbacks=[fb])
         res2 = Response(question=question2, answers=[answer2, answer3], 
                             feedbacks=[fb])
         res3 = Response(question=question3, answers=[answer3], feedbacks=[fb])
         res4 = Response(question=question3, 
                             answers=[answer1, answer2, answer3, answer4], 
                             feedbacks=[fb])


         feedback = self.persistence_delegate.add_responses_to_feedback(1, 
                                                  [res1, res2, res3, res4])

         self.assertEqual(len(feedback.get("responses")), 4)
         self.assertEqual(feedback.get("responses")[0], res1)
         self.assertEqual(feedback.get("responses")[1], res2)
         self.assertEqual(feedback.get("responses")[2], res3)
         self.assertEqual(feedback.get("responses")[3], res4)

    def test_add_p_saved_responses_with_p_saved_answers_to_feedback(self):
         print "test_add_p_saved_responses_with_p_saved_answers_to_feedback"
         print "p refers to partially saved"

         q_type = "radio"
         question1 = Question(name="How is your breakfast?", 
                                  question_type=q_type)
         question2 = Question(name="How is your lunch?", question_type=q_type)
         question3 = Question(name="How is your dinner?", question_type=q_type)


         answer1 = Answer(name="Good")
         answer2 = Answer(name="Bad")
         answer3 = Answer(name="Excellent")
         answer4 = Answer(name="Fair")

         answer1.save()
         answer2.save()

         question1.save()
         question2.save()
         question3.save()

         gateway_ip = "10.100.40.2"
         lab_name = "cse01"
         exp_name = "data01"
         version = "open-edx-virtual-labs-v2.0"
         date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         user_id = "John123"
         fb = Feedback(gateway_ip=gateway_ip,
                        lab_name=lab_name,
                        exp_name=exp_name,
                        date=date,
                        version=version,
                        user_id=user_id,
                        responses=[])
         fb.save()

         res1 = Response(question=question1, answers=[answer1], feedbacks=[fb])
         res2 = Response(question=question2, answers=[answer2, answer1], 
                             feedbacks=[fb])
         res3 = Response(question=question3, answers=[answer3], feedbacks=[fb])
         res4 = Response(question=question3, 
                             answers=[answer1, answer2, answer3, answer4], 
                             feedbacks=[fb])

         res1.save()
         res2.save()

         feedback = self.persistence_delegate.add_responses_to_feedback(1, 
                                                  [res1, res2, res3, res4])

         self.assertEqual(len(feedback.get("responses")), 4)
         self.assertEqual(feedback.get("responses")[0], res1)
         self.assertEqual(feedback.get("responses")[1], res2)
         self.assertEqual(feedback.get("responses")[2], res3)
         self.assertEqual(feedback.get("responses")[3], res4)
         self.assertEqual(len(Answer.get_all()), 4)
         self.assertEqual(len(Question.get_all()), 3)
         self.assertEqual(len(Response.get_all()), 4)

#+END_SRC


***  Get feedback Usage from the system
    This function gets the feedback usage from the system.
#+NAME: persistence_get_feedback_usage
#+BEGIN_SRC python
    def get_feedback_usage(self, gateway_ip, date):
        try:
            feedbacks = self.get_feedbacks(gateway_ip=gateway_ip, date=date)
            return len(feedbacks)
        except Exception as e:
            print "no feedback found with given ip %s and date %s" \
              %(gateway_ip, date)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_feedback_usage
#+BEGIN_SRC python
    def test_get_feedback_usage(self):
         print "test_get_feedback_usage"
         gateway_ip1 = "10.100.40.2"
         lab_name1 = "cse01"
         exp_name1 = "data01"
         version = "open-edx-virtual-labs-v2.0"
         date1 = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         responses1 = []
         user_id = "John123"
         fb1 = self.persistence_delegate.add_feedback(gateway_ip1, lab_name1,
                                                        exp_name1, date1,
                                                        version,
                                                        user_id,
                                                        responses1)
         gateway_ip2 = "10.100.40.2"
         lab_name2 = "cse02"
         exp_name2 = "data02"
         version2 = "open-edx-virtual-labs-v1.0"
         date2 = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         responses2 = []
         fb2 = self.persistence_delegate.add_feedback(gateway_ip2, lab_name2,
                                                        exp_name2, date2,
                                                        version2,
                                                        user_id,
                                                        responses2)
         usage = self.persistence_delegate.get_feedback_usage(gateway_ip2, 
                                                                 date2)

         self.assertEqual(usage, 2)

#+END_SRC


***  Get feedback Dump from the system
    This function gets the feedback usage from the system.
#+NAME: persistence_get_feedback_dump
#+BEGIN_SRC python
    def get_feedback_dump(self, date):
        try:
            feedbacks = self.get_feedbacks(date=date)
            return feedbacks
        except Exception as e:
            print "no feedbacks were found on date %s" \
              %(date)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_feedback_dump
#+BEGIN_SRC python
    def test_get_feedback_dump(self):
         print "test_get_feedback_dump"
         gateway_ip1 = "10.100.40.2"
         lab_name1 = "cse01"
         exp_name1 = "data01"
         version1 = "open-edx-virtual-labs-v1.0"
         date1 = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         responses1 = []
         user_id = "John123"
         fb1 = self.persistence_delegate.add_feedback(gateway_ip1, lab_name1,
                                                        exp_name1, date1,
                                                        version1,
                                                        user_id,
                                                        responses1)
         gateway_ip2 = "10.100.40.2"
         lab_name2 = "cse02"
         exp_name2 = "data02"
         date2 = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         responses2 = []
         version2 = "open-edx-virtual-labs-v2.0"
         fb2 = self.persistence_delegate.add_feedback(gateway_ip2, lab_name2,
                                                        exp_name2, date2,
                                                        version2,
                                                        user_id,
                                                        responses2)
         feedbacks = self.persistence_delegate.get_feedback_dump(date2)

         self.assertEqual(feedbacks[0].date, date1)
         self.assertEqual(feedbacks[0].gateway_ip, gateway_ip1)

#+END_SRC


***  Get an object
    A generic function to find an object of type =cls= matching a given a criteria

#+NAME: persistence_get_object
#+BEGIN_SRC python
    def get_object(self, cls, **kwargs):
        ret_val = None
        try:
            ret_val = cls.apply_filters(**kwargs)[0]
        except NotFoundError as e:
            ret_val = None
        
        return ret_val

#+END_SRC
	

***  Get Discipline
    This function returns discipline if present in the database.  If the discipline is
    not present, =None= type is returned.
#+NAME: persistence_get_discipline
#+BEGIN_SRC python
    def get_discipline (self, **kwargs):
        return self.get_object(Discipline, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_discipline
#+BEGIN_SRC python
    def test_get_discipline(self):
         print "test_get_discipline"

         dis_name = "IIT Delhi"
         dis_id = "EEE08"
         dis = Discipline (dis_name=dis_name, dis_id=dis_id)
         dis.save()
         dis_obj = self.persistence_delegate.get_discipline (dis_name=dis_name)
         self.assertEqual(dis_obj.get("dis_name"), dis_name)

#+END_SRC


***  Get Lab
    This function returns a lab if present in the database.  If the lab is
    not present, =None= type is returned.
#+NAME: persistence_get_lab
#+BEGIN_SRC python
    def get_lab(self, **kwargs):
        return self.get_object(Lab, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_lab
#+BEGIN_SRC python
    def test_get_lab(self):
         print "test_get_lab"
         lab_name1="Computer Programming"
         lab_id1="CSE01"
         lab = Lab(lab_name=lab_name1, lab_id=lab_id1)
         lab.save()

         lab_obj = self.persistence_delegate.get_lab(lab_name=
                                                lab.get("lab_name"))
         self.assertEqual(lab_obj.get("lab_name"),
                              lab.get("lab_name"))

#+END_SRC



***  Get Experiment
    This function returns experiment if present in the database.  If the experiment is
    not present, =None= type is returned.
#+NAME: persistence_get_experiment
#+BEGIN_SRC python
    def get_experiment(self, **kwargs):
        return self.get_object(Experiment, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_experiment
#+BEGIN_SRC python
    def test_get_experiment(self):
         print "test_get_experiment"

         exp_name = "Number Systems"
         exp_id = "EE99777"
         exp = Experiment(exp_name=exp_name, exp_id=exp_id)
         exp.save()
         exp_obj = self.persistence_delegate.get_experiment(exp_name=
                                                exp.get("exp_name"))
         self.assertEqual(exp_obj.get("exp_name"),
                              exp.get("exp_name"))

#+END_SRC



***  Get Responses
    This function returns responses if present in the database.  If a response
    is not present, =None= type is returned.  The argument passed is only
    question. 
#+NAME: persistence_get_responses
#+BEGIN_SRC python
    def get_responses(self, **kwargs):
        responses = []
        if "question" in kwargs.keys() and len(kwargs.keys()) == 1:
            try:
                responses = Response.apply_filters(**kwargs)
            except NotFoundError as e:
                pass
            except Exception as e:
                pass
        
        return responses

#+END_SRC

****  Tests
#+NAME: test_persistence_get_responses
#+BEGIN_SRC python
    def test_get_responses(self):
         print "test_get_responses"

         name = "how are labs?"
         q_type = "radio"
         question1 = Question(name=name, question_type=q_type)
         question1.save()
         ans = "excellent labs"
         answer1 = Answer(name=ans)
         answer1.save()
         gateway_ip = "10.100.40.2"
         lab_name = "cse01"
         exp_name = "data01"
         version = "open-edx-virtual-labs-v2.0"
         date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         user_id = "John123"

         fb = Feedback(gateway_ip=gateway_ip,
                        lab_name=lab_name,
                        exp_name=exp_name,
                        date=date,
                        version=version,
                        user_id=user_id,
                        responses=[])
         fb.save()

         res = Response(question=question1, answers=[answer1], feedbacks=[fb])
         res.save()
         
         question = res.get("question")
         answers = res.get("answers")

         responses = self.persistence_delegate.get_responses(\
                                                      question=question)
         self.assertEqual(responses[0].get("question").get("name"),
                              res.get("question").get("name"))
         self.assertEqual(responses[0].get("answers")[0].get("name"),
                              res.get("answers")[0].get("name"))

         responses = self.persistence_delegate.get_responses(\
                                                      question=question, 
                                                      answers=['t', 'k'])
         self.assertEqual(responses, [])

#+END_SRC



***  Get Response
    This function returns response if present in the database.  If the response is
    not present, =None= type is returned.  The arguments should contain both
    question and answers. 
#+NAME: persistence_get_response
#+BEGIN_SRC python
    def get_response(self, **args):
        ret_val = None
        if "question" in args.keys() and "answers" in args.keys():
            question = args["question"]
            answers = args["answers"]
            responses = self.get_responses(question=question)
            if responses:
                filtered_responses = filter(lambda response: \
                                            sorted(response.get("answers")) \
                                            == sorted(answers), responses)

                if filtered_responses:
                    ret_val = filtered_responses[0]

        return ret_val

#+END_SRC

****  Tests
#+NAME: test_persistence_get_response
#+BEGIN_SRC python
    def test_get_response(self):
         print "test_get_response"

         name = "how are labs?"
         q_type = "radio"
         question1 = Question(name=name, question_type=q_type)
         question1.save()

         ans1 = Answer(name="excellent")
         ans1.save()
         ans2 = Answer(name="good")
         ans2.save()

         gateway_ip = "10.100.40.2"
         lab_name = "cse01"
         exp_name = "data01"
         version = "open-edx-virtual-labs-v2.0"
         date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         user_id = "John123"
         fb = Feedback(gateway_ip=gateway_ip,
                        lab_name=lab_name,
                        exp_name=exp_name,
                        date=date,
                        version=version,
                        user_id = user_id,
                        responses=[])
         fb.save()

         res1 = Response(question=question1, answers=[ans1], feedbacks=[fb])
         res1.save()
         res2 = Response(question=question1, answers=[ans1, ans2], 
                             feedbacks=[fb])
         res2.save()
     
         res3 = Response(question=question1, answers=[ans2], feedbacks=[fb])
         res3.save()
         
         response_obj = self.persistence_delegate.get_response(\
                question=question1, answers=[ans1, ans2])
         self.assertEqual(response_obj.get("question").get("name"),
                              question1.get("name"))
         self.assertEqual(response_obj.get("answers")[0].get("name"),
                              ans1.get("name"))
         self.assertEqual(response_obj.get("answers")[1].get("name"),
                              ans2.get("name"))

         response_obj = self.persistence_delegate.get_response(\
                question=question1, answers=[ans1])
         self.assertEqual(response_obj.get("question").get("name"),
                              question1.get("name"))
         self.assertEqual(response_obj.get("answers")[0].get("name"),
                              ans1.get("name"))
                              

#+END_SRC


***  Get Feedbacks
    This function returns all feedbacks if present in the database.  If the feedbacks is
    not present, =None= type is returned.
#+NAME: persistence_get_feedbacks
#+BEGIN_SRC python
    def get_feedbacks(self, **kwargs):
        ret_val = None
        try:
            ret_val = Feedback.apply_filters(**kwargs)
        except NotFoundError as e:
            ret_val = None
        
        return ret_val

#+END_SRC

****  Tests
#+NAME: test_persistence_get_feedbacks
#+BEGIN_SRC python
    def test_get_feedbacks(self):
         print "test_persistence_get_feedbacks"

         name = "how are labs?"
         q_type = "radio"
         question1 = Question(name=name, question_type=q_type)
         question1.save()
         ans = "excellent labs"
         answer1 = Answer(name=ans)
         answer1.save()
         gateway_ip = "10.100.40.2"
         lab_name = "cse01"
         exp_name = "data01"
         version = "open-edx-virtual-labs-v2.0"
         date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         user_id = "John123"

         fb = Feedback(gateway_ip=gateway_ip,
                        lab_name=lab_name,
                        exp_name=exp_name,
                        date=date,
                        version=version,
                        user_id=user_id,
                        responses=[])
         fb.save()

         feedback_obj = self.persistence_delegate.get_feedbacks(gateway_ip=\
                                                        gateway_ip, date=date)
         self.assertEqual(feedback_obj[0].get("gateway_ip"),
                              gateway_ip)
         self.assertEqual(feedback_obj[0].get("date"), date)

#+END_SRC



***  Get Feedback By ID
    This function returns a feedback object by an ID if present in database,
    otherwise, =None= type is returned.
#+NAME: persistence_get_feedback_by_id
#+BEGIN_SRC python
    def get_feedback_by_id(self, id):
        ret_val = None
        try:
            ret_val = Feedback.get_by_id(id)
        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            ret_val = None
        
        return ret_val

#+END_SRC

****  Tests
#+NAME: test_persistence_get_feedback_by_id
#+BEGIN_SRC python
    def test_get_feedback_by_id(self):
         print "test_persistence_get_feedback_by_id"

         name = "how are labs?"
         q_type = "radio"
         question1 = Question(name=name, question_type=q_type)
         question1.save()
         ans = "excellent labs"
         answer1 = Answer(name=ans)
         answer1.save()
         gateway_ip = "10.100.40.2"
         lab_name = "cse01"
         exp_name = "data01"
         version = "open-edx-virtual-labs-v2.0"
         date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
         user_id = "John123"
         fb = Feedback(gateway_ip=gateway_ip,
                        lab_name=lab_name,
                        exp_name=exp_name,
                        date=date,
                        version=version,
                        user_id = user_id,
                        responses=[])
         fb.save()

         feedback_obj = self.persistence_delegate.get_feedback_by_id(1)
         self.assertEqual(feedback_obj.get("gateway_ip"),
                              gateway_ip)
         self.assertEqual(feedback_obj.get("date"), date)

#+END_SRC



* Infra                                                         :boilerplate:

** sources
*** Imports 

#+name: imports_for_persistence_delegate
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.persistence.entities import *
from runtime.exceptions.custom_exceptions import *
from flask import current_app

#+end_src


** Tests
*** Imports 

#+name: imports_for_tests_persistence
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from runtime.system.persistence_delegate import *


config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }
#+end_src


*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:
  
** sources
   
#+BEGIN_SRC python :tangle persistence_delegate.py :eval no :noweb yes
<<imports_for_persistence_delegate>>
<<class_persistence_delegate>>
<<persistence_key_exists>>
<<persistence_get_object>>

<<persistence_get_discipline>>

<<persistence_get_lab>>
<<persistence_get_experiment>>
<<persistence_get_responses>>
<<persistence_get_response>>

<<persistence_discipline_exists>>

<<persistence_lab_exists>>
<<persistence_experiment_exists>>
<<persistence_feedback_exists>>
<<persistence_response_exists>>

<<persistence_add_discipline>>

<<persistence_add_lab>>
<<persistence_delete_lab>>
<<persistence_delete_experiment>>

<<persistence_delete_discipline>>

<<persistence_add_experiment>>
<<persistence_add_feedback>>
<<persistence_update_lab>>
<<persistence_update_experiment>>

<<persistence_update_discipline>>

<<persistence_get_feedbacks>>
<<persistence_get_feedback_by_id>>
<<persistence_get_feedback_usage>>
<<persistence_get_feedback_dump>>
<<persistence_add_responses_to_feedback>>

#+end_src


** tests
#+BEGIN_SRC python :tangle test_persistence_delegate.py :eval no :noweb yes
<<imports_for_tests_persistence>>
<<test_class_persistence_delegate>>
#<<test_persistence_key_exists>>

<<test_persistence_get_discipline>>

<<test_persistence_get_lab>>
<<test_persistence_get_experiment>>
#<<test_persistence_get_responses>>
#<<test_persistence_get_response>>

<<test_persistence_discipline_exists>>

<<test_persistence_lab_exists>>
<<test_persistence_experiment_exists>>
#<<test_persistence_feedback_exists>>
#<<test_persistence_response_exists>>

<<test_persistence_add_discipline>>
<<test_persistence_add_lab>>

<<test_persistence_delete_discipline>>

<<test_persistence_delete_lab>>
<<test_persistence_delete_experiment>>
<<test_persistence_add_experiment>>
#<<test_persistence_add_feedback>>

<<test_persistence_udpate_discipline>>
<<test_persistence_update_lab>>
<<test_persistence_update_lab>>
#<<test_persistence_get_feedbacks>>
#<<test_persistence_get_feedback_by_id>>
#<<test_persistence_get_feedback_usage>>
#<<test_persistence_get_feedback_dump>>
#<<test_persistence_add_responses_to_feedback>>
<<run_test_cases>>

#+end_src

