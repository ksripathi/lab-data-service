#+TITLE: Persistence Delegate for the System
#+AUTHOR: VLEAD
#+DATE: [2016-07-07 Thu]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Persistence Delegate
  Persistence Delegate encapsulates a set of functions where each function performs a
  specific task.  With the use of these delegates, the core implementation of
  the =system= will not alter but by plugging delegates that are specific to
  each environment, for example, be it either objects or persistence, the
  =system= for that particular environment is derived while not modifying the
  =system= class.
  
** Initialize Persistence Delegate
   Provides all the delegates that operate on objects.

*** class_persistence_delegate 
#+NAME: class_persistence_delegate
#+BEGIN_SRC python
class PersistenceDelegate():
   
    def __init__(self):
        self.entities = {'session': Session,
                         'lab': Lab,
                         'experiment' : Experiment,
                         'section' : Section

                        }

#+END_SRC


*** Tests
#+NAME: test_class_persistence_delegate
#+BEGIN_SRC python
class TestPersistenceDelegate(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        self.persistence_delegate = PersistenceDelegate()
        
    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistence_delegate = None

#+END_SRC


** Other functions

   Other functions that help =System= perform the operations. 
   
***  Check if =lab= already exists
    This function checks if a lab is already in the lab-set of the =System=.
#+NAME: persistence_lab_exists
#+BEGIN_SRC python
    def lab_exists(self, lb_id):
        ret_val = False

        try:
            if Lab.get_by_id(lb_id) is not None:
                ret_val = True
        except Exception as e:
            pass

        return ret_val
        
#+END_SRC

**** Tests
#+NAME: test_persistence_lab_exists
#+BEGIN_SRC python
    def test_lab_exists(self):
        print "test_lab_exists"
        lab_name1="Computer Programming"
        lab_id1="CSE01"
        overview1 = "overview"
        lab = Lab(lab_name=lab_name1, lab_id=lab_id1, overview=overview1, experiments=[])

        lab1 = self.persistence_delegate.add_lab(lab)

        lab_name2="Data Structures"
        lab_id2="CSE02"
        overview2 = "overview"
        lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2, overview=overview2, experiments=[])

        self.assertEqual(self.persistence_delegate.lab_exists(lab1.id),
                            True)
        self.assertEqual(self.persistence_delegate.lab_exists(lab2.id),
                            False)

#+END_SRC


***  Check if =experiment= already exists
    This function checks if a user is already in the user-set of the =System=.
#+NAME: persistence_experiment_exists
#+BEGIN_SRC python
    def experiment_exists(self, eid):
        ret_val = False

        try:
            if Experiment.get_by_id(eid) is not None:
                ret_val = True
        except Exception as e:
            pass

        return ret_val
        
#+END_SRC

**** Tests
#+NAME: test_persistence_experiment_exists
#+BEGIN_SRC python
    def test_experiment_exists(self):
        print "test_experiment_exists"
        exp_name1 = "Number Systems"
        exp_id1 = "EE99777"
        overview1 = "overview"
        experiment1 = Experiment(exp_name=exp_name1, exp_id=exp_id1,
                                     overview=overview1, sections=[])
        exp1 = self.persistence_delegate.add_experiment(experiment1)

        exp_name2 = "Transformations"
        exp_id2 = "EE98747"
        overview2 = "overview"
        experiment2 = Experiment(exp_name=exp_name2, exp_id=exp_id2, \
                                     overview=overview2, sections=[])

        self.assertEqual(self.persistence_delegate.experiment_exists\
                             (experiment1.id), True)
        self.assertEqual(self.persistence_delegate.experiment_exists\
                             (experiment2.id), False)

#+END_SRC


***  Check if =section= already exists
    This function checks if a section name is already in the section-set of the =System=.
#+NAME: persistence_section_exists
#+BEGIN_SRC python
    def section_exists(self, section):
        name = section.get("name")
        return section == self.get_section(name=name)
        
#+END_SRC

**** Tests
#+NAME: test_persistence_section_exists
#+BEGIN_SRC python
    def test_section_exists(self):
        print "test_section_exists"
        name1 = "Theory"
        section1 = Section(name=name1)
        self.persistence_delegate.add_section(section1)
        name2 = "Assessment"
        section2 = Section(name=name2)
        self.assertEqual(self.persistence_delegate.section_exists(section1),
                            True)
        self.assertEqual(self.persistence_delegate.section_exists(section2),
                            False)

#+END_SRC

     
***  Add lab to the system
    This function adds lab to the system.
#+NAME: persistence_add_lab
#+BEGIN_SRC python
    def add_lab(self, lab):
        lab.save()
        return lab

#+END_SRC

**** Tests
#+NAME: test_persistence_add_lab
#+BEGIN_SRC python
    def test_add_lab(self):
         print "test_add_lab"
         exp_name = "Number Systems"
         exp_id = "EE99777"
         overview = "exp"
         experiment = Experiment(exp_name=exp_name, exp_id=exp_id, \
                                     overview=overview, sections=[])
         experiment.save()

         lab_name1="Computer Programming"
         lab_id1="CSE01"
         overview="lab"
         lab1 = Lab(lab_name=lab_name1, lab_id=lab_id1, \
                        overview=overview, experiments=[experiment])
         lab1 = self.persistence_delegate.add_lab(lab1)
        
         lab_name2="Data Structures"
         lab_id2="CSE02"
         overview="lab overview"
         lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2, overview=overview, experiments=[])

         self.assertEqual(self.persistence_delegate.lab_exists(lab1.id),
                          True)
         self.assertEqual(self.persistence_delegate.lab_exists(lab2.id),
                          False)

#+END_SRC


***  Add experiment to the system
    This function adds experiment to the system.
#+NAME: persistence_add_experiment
#+BEGIN_SRC python
    def add_experiment(self, experiment):
        experiment.save()
        return experiment

#+END_SRC

**** Tests
#+NAME: test_persistence_add_experiment
#+BEGIN_SRC python
    def test_add_experiment(self):
         print "test_add_experiment"
         exp_name1 = "Number Systems"
         exp_id1 = "EE99777"
         overview1 = "overview"
         experiment1 = Experiment(exp_name=exp_name1, exp_id=exp_id1, 
                                      overview=overview1, sections=[])
         experiment1 = self.persistence_delegate.add_experiment(experiment1)
         
         exp_name2="Transformations"
         exp_id2="EE99870"
         overview2="overview"
         experiment2 = Experiment(exp_name=exp_name2, exp_id=exp_id2,
                                      overview=overview2, sections=[])
         
         experiment = Experiment.get_by_id(1)

         self.assertEqual(self.persistence_delegate.experiment_exists(experiment1.id),
                          True)
         self.assertEqual(self.persistence_delegate.experiment_exists(experiment2.id),
                          False)
        
#+END_SRC


***  Add section to the system
    This function adds section to the system.
#+NAME: persistence_add_section
#+BEGIN_SRC python
    def add_section(self, section):
        section.save()
        return section

#+END_SRC

**** Tests
#+NAME: test_persistence_add_section
#+BEGIN_SRC python
    def test_add_section(self):
         print "test_add_section"
         name = "Theory"
         section = Section(name=name)
         section = self.persistence_delegate.add_section(section)
         section = section.get_by_id(1)
         self.assertEqual(section.get("name"), name)

#+END_SRC


***  Update lab 
    This function updates existing lab.
#+NAME: persistence_update_lab
#+BEGIN_SRC python
    def update_lab(self, lab, lab_name, lab_id, overview):
        lab.set(lab_name=lab_name, lab_id=lab_id, overview=overview)
        lab.save()
        return lab

#+END_SRC

**** Tests
#+NAME: test_persistence_update_lab
#+BEGIN_SRC python
    def test_update_lab(self):
         print "test_update_lab"
         lab_name = "Data Structures"
         lab_id = "cse01"
         overview = "overview lab"
         experiments = []
         lab = Lab(lab_name=lab_name, lab_id=lab_id, overview=overview, experiments=experiments)
         
         lab1 = self.persistence_delegate.add_lab(lab)
         lab_name1 = "Computer Programming"
         lab_id1 = "cse02"
         overview1 = "overview"
         lab2 = self.persistence_delegate.update_lab\
           (lab1, lab_name1, lab_id1, overview=overview1),
         lab2 = Lab.get_by_id(1)

         self.assertEqual(lab2.get("lab_id"), lab_id1)
         self.assertEqual(lab2.get("lab_name"), lab_name1)
         self.assertEqual(lab2.get("overview"), overview1)

#+END_SRC


***  Update Experiment 
    This function updates existing experiment.
#+NAME: persistence_update_experiment
#+BEGIN_SRC python
    def update_experiment(self, experiment, exp_name, exp_id, overview):
        experiment.set(exp_name=exp_name, exp_id=exp_id, overview=overview)
        experiment.save()
        return experiment

#+END_SRC

**** Tests
#+NAME: test_persistence_update_experiment
#+BEGIN_SRC python
    def test_update_experiment(self):
         print "test_update_experiment"
         exp_name = "Data Structures"
         exp_id = "cse01"
         overview = "overview"
         exp = Experiment(exp_name=exp_name, exp_id=exp_id, \
                              overview=overview, sections=[])
         exp1 = self.persistence_delegate.add_experiment(exp)
         exp_name1 = "Computer Programming"
         exp_id1 = "cse02"
         overview1 = "overvewi exp"
         exp2 = self.persistence_delegate.update_experiment\
           (exp1, exp_name1, exp_id1, overview),
         exp2 = Experiment.get_by_id(1)
         self.assertEqual(exp2.get("exp_name"), exp_name1)

#+END_SRC


***  Update Section
    This function updates existing section.
#+NAME: persistence_update_section
#+BEGIN_SRC python
    def update_section(self, section, name):
        section.set(name=name)
        section.save()
        return section

#+END_SRC

**** Tests
#+NAME: test_persistence_update_section
#+BEGIN_SRC python
    def test_update_section(self):
         print "test_update_section"
         name = "Theory"
         section = Section(name=name)
         section1 = self.persistence_delegate.add_section(section)
         name1 = "Procedure"         
         section2 = self.persistence_delegate.update_section\
           (section1, name1)
         section2 = Section.get_by_id(1)
         self.assertEqual(section2.get("name"), name1)

#+END_SRC


***  Delete lab 
    This function delete existing lab.
#+NAME: persistence_delete_lab
#+BEGIN_SRC python
    def delete_lab(self, l_id):
        record = Lab.get_by_id(l_id)
        if not record:
            abort(404, 'No Lab with id %s' % (l_id))
        else:
            try:
                record.delete()
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                print e
                abort(500, str(e))

        return l_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_lab
#+BEGIN_SRC python
    def test_delete_lab(self):
         print "test_delete_lab"
         lab_name = "Data Structures"
         lab_id = "cse01"
         overview = "overview"
         lab = Lab(lab_name=lab_name, lab_id=lab_id, overview=overview, experiments=[])
         lab1 = self.persistence_delegate.add_lab(lab)

         lab_name1 = "Computer Programming"
         lab_id1 = "cse02"
         overview = "overview"
         lab1 = Lab(lab_name=lab_name1, lab_id=lab_id1, overview=overview, experiments=[])
         lab2 = self.persistence_delegate.add_lab(lab1)

         self.persistence_delegate.delete_lab(1)

         self.assertEqual(len(Lab.get_all()), 1)

#+END_SRC


***  Delete Exeriment 
    This function delete existing experiment.
#+NAME: persistence_delete_experiment
#+BEGIN_SRC python
    def delete_experiment(self, e_id):
        record = Experiment.get_by_id(e_id)
        if not record:
            abort(404, 'No Experiment with id %s' % (e_id))
        else:
            try:
                record.delete()
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                print e
                abort(500, str(e))

        return e_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_experiment
#+BEGIN_SRC python
    def test_delete_experiment(self):
         print "test_delete_experiment"
         exp_name = "arrays"
         exp_id = "cse01"
         overview = "overview"
         exp = Experiment(exp_name=exp_name, exp_id=exp_id, \
                              overview=overview, sections=[])
         exp1 = self.persistence_delegate.add_experiment(exp)

         exp_name1 = "linked list"
         exp_id1 = "cse02"
         overview = "overview"
         exp1 = Experiment(exp_name=exp_name1, exp_id=exp_id1, \
                               overview=overview, sections=[])
         exp2 = self.persistence_delegate.add_experiment(exp1)

         self.persistence_delegate.delete_experiment(1)

         self.assertEqual(len(Experiment.get_all()), 1)

#+END_SRC


***  Delete Section 
    This function delete existing section.
#+NAME: persistence_delete_section
#+BEGIN_SRC python
    def delete_section(self, s_id):
        record = Section.get_by_id(s_id)
        if not record:
            abort(404, 'No Section with id %s' % (e_id))
        else:
            try:
                record.delete()
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                print e
                abort(500, str(e))

        return s_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_section
#+BEGIN_SRC python
    def test_delete_section(self):
         print "test_delete_section"
         name = "theory"
         section = Section(name=name)
         section1 = self.persistence_delegate.add_section(section)
 
         name1 = "Procedure"
         section1 = Section(name=name1)
         section2 = self.persistence_delegate.add_section(section1)

         self.persistence_delegate.delete_section(1)

         self.assertEqual(len(Section.get_all()), 1)

#+END_SRC


***  Add experiments to a Lab
    This function adds experiments to a given lab.
#+NAME: persistence_add_experiments_to_lab
#+BEGIN_SRC python
    def add_experiments_to_lab(self, labid, experiments):
        lab = self.get_lab_by_id(labid)
        experiment_list = []
        for experiment in experiments:
            if self.experiment_exists(experiment):
                experiment = self.get_experiment(exp_id=experiment.get('exp_id'),
                                                 exp_name=experiment.get('exp_name'))
            else:
                experiment.save()

            experiment_list.append(experiment)

        lab.set(experiments=experiment_list)
        return lab

#+END_SRC

****  Tests
#+NAME: test_persistence_add_experiments_to_lab
#+BEGIN_SRC python
    def test_add_saved_experiments_to_lab(self):
         print "test_add_experiments_to_lab_in_persistence_delegate"

         lab_name="Data Structures"
         lab_id="CSE02"
         overview = "overview"
         lab = Lab(lab_name=lab_name, lab_id=lab_id, overview=overview, experiments=[])
         lab.save()

         exp_name = "Number Systems"
         exp_id = "EE99777"
         overview = "overview"
         experiment = Experiment(exp_name=exp_name, exp_id=exp_id, \
                                     overview=overview, sections=[])
         experiment.save()
        
         lab1 = Lab.get_by_id(1)

         lab1 = self.persistence_delegate.add_experiments_to_lab(lab1.id, \
                                                             [experiment])
        
         self.assertEqual(len(lab1.get("experiments")), 1)
         self.assertEqual(lab1.get("experiments")[0].get("exp_id"), exp_id)
         self.assertEqual(lab1.get("experiments")[0].get("exp_name"),\
                                                      exp_name)

#+END_SRC


***  Add sections to a Experiment
    This function adds sections to a given experiment.
#+NAME: persistence_add_sections_to_experiment
#+BEGIN_SRC python
    def add_sections_to_experiment(self, eid, sections):
        exp = self.get_experiment_by_id(eid)
        section_list = []
        for section in sections:
            if self.section_exists(section):
                section = self.get_section(name=section.get('name'))
            else:
                section.save()

            section_list.append(section)

        exp.set(sections=section_list)
        return exp

#+END_SRC

****  Tests
#+NAME: test_persistence_add_sections_to_experiment
#+BEGIN_SRC python
    def test_add_saved_sections_to_experiment(self):
         print "test_add_sections_to_experiment_in_persistence_delegate"

         exp_name = "Number Systems"
         exp_id = "EE99777"
         overview = "overview"
         exp = Experiment(exp_name=exp_name, exp_id=exp_id, \
                                     overview=overview, sections=[])
         exp.save()
        
         section1 = Section(name='Theory')
         section1.save()
         section2 = Section(name='Procedure')
         section2.save()

         exp1 = self.persistence_delegate.add_sections_to_experiment\
                                     (exp.id, [section1, section2])
        
         self.assertEqual(len(exp1.get("sections")), 2)
         self.assertEqual(exp1.get("sections")[0].get("name"), 'Theory')
         self.assertEqual(exp1.get("sections")[1].get("name"), 'Procedure')

#+END_SRC


***  Get an object
    A generic function to find an object of type =cls= matching a given a criteria

#+NAME: persistence_get_object
#+BEGIN_SRC python
    def get_object(self, cls, **kwargs):
        ret_val = None
        try:
            ret_val = cls.apply_filters(**kwargs)[0]
        except NotFoundError as e:
            ret_val = None
        
        return ret_val

#+END_SRC
	

***  Get Lab
    This function returns a lab if present in the database.  If the lab is
    not present, =None= type is returned.
#+NAME: persistence_get_lab
#+BEGIN_SRC python
    def get_lab(self, **kwargs):
        return self.get_object(Lab, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_lab
#+BEGIN_SRC python
    def test_get_lab(self):
         print "test_get_lab"
         lab_name1="Computer Programming"
         lab_id1="CSE01"
         overview="overview"
         lab = Lab(lab_name=lab_name1, lab_id=lab_id1, overview=overview)
         lab.save()

         lab_obj = self.persistence_delegate.get_lab(lab_name=
                                                lab.get("lab_name"))
         self.assertEqual(lab_obj.get("lab_name"),
                              lab.get("lab_name"))

#+END_SRC



***  Get Section
    This function returns a section if present in the database.  If the lab is
    not present, =None= type is returned.
#+NAME: persistence_get_section
#+BEGIN_SRC python
    def get_section(self, **kwargs):
        return self.get_object(Section, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_section
#+BEGIN_SRC python
    def test_get_section(self):
         print "test_get_section"
         name = "Theory"
         section = Section(name=name)
         section.save()

         section_obj = self.persistence_delegate.get_section(name=
                                                section.get("name"))
         self.assertEqual(section_obj.get("name"),
                              section.get("name"))

#+END_SRC



***  Get Experiment
    This function returns experiment if present in the database.  If the experiment is
    not present, =None= type is returned.
#+NAME: persistence_get_experiment
#+BEGIN_SRC python
    def get_experiment(self, **kwargs):
        return self.get_object(Experiment, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_experiment
#+BEGIN_SRC python
    def test_get_experiment(self):
         print "test_get_experiment"

         exp_name = "Number Systems"
         exp_id = "EE99777"
         overview = "overview"
         exp = Experiment(exp_name=exp_name, exp_id=exp_id,
                              overview=overview, sections=[])
         exp.save()
         exp_obj = self.persistence_delegate.get_experiment(exp_name=
                                                exp.get("exp_name"))
         self.assertEqual(exp_obj.get("exp_name"),
                              exp.get("exp_name"))

#+END_SRC



***  Get Lab By ID
    This function returns a lab object by an ID if present in database,
    otherwise, =None= type is returned.
#+NAME: persistence_get_lab_by_id
#+BEGIN_SRC python
    def get_lab_by_id(self, id):
        ret_val = None
        try:
            ret_val = Lab.get_by_id(id)
        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            ret_val = None
        
        return ret_val

#+END_SRC

****  Tests
#+NAME: test_persistence_get_lab_by_id
#+BEGIN_SRC python
    def test_get_lab_by_id(self):
         print "test_persistence_get_lab_by_id"

         lab_name1="Computer Programming"
         lab_id1="CSE01"
         overview="overview"
         lab = Lab(lab_name=lab_name1, lab_id=lab_id1, overview=overview, experiments=[])
         lab.save()

         lab_obj = self.persistence_delegate.get_lab_by_id(1)
         self.assertEqual(lab_obj.get("lab_id"),
                              lab_id1)
         self.assertEqual(lab_obj.get("lab_name"), lab_name1)

#+END_SRC



***  Get Experiment By ID
    This function returns a experiment object by an ID if present in database,
    otherwise, =None= type is returned.

#+NAME: persistence_get_experiment_by_id
#+BEGIN_SRC python
    def get_experiment_by_id(self, id):
        ret_val = None
        try:
            ret_val = Experiment.get_by_id(id)
        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            ret_val = None
        
        return ret_val

#+END_SRC

****  Tests
#+NAME: test_persistence_get_experiment_by_id
#+BEGIN_SRC python
    def test_get_experiment_by_id(self):
         print "test_persistence_get_experiment_by_id"

         exp_name = "Number Systems"
         exp_id = "EE99777"
         overview = "overview"
         exp = Experiment(exp_name=exp_name, exp_id=exp_id,
                              overview=overview, sections=[])
         exp.save()

         exp_obj = self.persistence_delegate.get_experiment_by_id(1)
         self.assertEqual(exp_obj.get("exp_id"),
                              exp_id)
         self.assertEqual(exp_obj.get("exp_name"), exp_name)

#+END_SRC

      
* Infra                                                         :boilerplate:

** sources
*** Imports 

#+name: imports_for_persistence_delegate
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.persistence.entities import *
from runtime.exceptions.custom_exceptions import *
from flask import current_app, abort

#+end_src


** Tests
*** Imports 

#+name: imports_for_tests_persistence
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from runtime.system.persistence_delegate import *


config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }
#+end_src


*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:
  
** sources
   
#+BEGIN_SRC python :tangle persistence_delegate.py :eval no :noweb yes
<<imports_for_persistence_delegate>>
<<class_persistence_delegate>>
<<persistence_key_exists>>
<<persistence_get_object>>

<<persistence_get_lab>>
<<persistence_get_section>>
<<persistence_get_experiment>>

<<persistence_lab_exists>>
<<persistence_section_exists>>
<<persistence_experiment_exists>>

<<persistence_add_lab>>
<<persistence_add_experiment>>
<<persistence_add_section>>

<<persistence_delete_lab>>
<<persistence_delete_section>>
<<persistence_delete_experiment>>

<<persistence_update_lab>>
<<persistence_update_section>>
<<persistence_update_experiment>>

<<persistence_get_lab_by_id>>
<<persistence_get_experiment_by_id>>

<<persistence_add_experiments_to_lab>>
<<persistence_add_sections_to_experiment>>

#+end_src


** tests
#+BEGIN_SRC python :tangle test_persistence_delegate.py :eval no :noweb yes
<<imports_for_tests_persistence>>
<<test_class_persistence_delegate>>

<<tes_persistence_get_lab>>
<<test_persistence_get_section>>
<<test_persistence_get_experiment>>

<<test_persistence_lab_exists>>
<<test_persistence_experiment_exists>>
<<test_persistence_section_exists>>

<<test_persistence_add_lab>>
<<test_persistence_add_section>>
<<test_persistence_add_experiment>>

<<test_persistence_delete_lab>>
<<test_persistence_delete_section>>
<<test_persistence_delete_experiment>>

<<test_persistence_update_lab>>
<<test_persistence_update_experiment>>
<<test_persistence_update_section>>

<<test_persistence_get_lab_by_id>>
<<test_persistence_get_experiment_by_id>>

<<test_persistence_add_experiments_to_lab>>
<<test_persistence_add_sections_to_experiment>>
<<run_test_cases>>

#+end_src

