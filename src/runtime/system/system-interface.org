#+TITLE: System Interface implementation for LDS
#+AUTHOR: VLEAD
#+DATE: [2016-07-22 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  System Interface is the glue that between the =rest= and =system=.  The world
  of =rest= uses =json= and the world of =system= uses objects.  System
  Interface allows these two worlds to talk to each other. 

  
* The =SystemInterface= class
** Constructor
#+NAME: class_system_interface
#+begin_src python
class SystemInterface ():

    def __init__(self):
        raise Error('Can not instantiate')

    @staticmethod
    def initialize(cls):
        System.initialize_system(cls)

#+end_src

** Add Lab
#+NAME: class_add_lab
#+begin_src python
    @staticmethod
    def add_lab(data_dict):
        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']
        exp_cls = System.delegate.entities['experiment']

        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])
        experiments = data_dict['experiments']
        data_dict['experiments'] = []

        lab = lab_cls(lab_name=data_dict['lab_name'],
                                lab_id=data_dict['lab_id'],
                                overview=data_dict['overview'],
                                experiments=data_dict['experiments'])
        try:
            current_app.logger.debug("running operation add_lab")
            lab = System.do("add_lab", lab=lab, session=session)
 
            current_app.logger.debug("completed operation add_lab")

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        exp_list = []
        try:
            for exp in experiments:
                experiment = exp_cls(exp_name=str(exp['exp_name']),
                                        exp_id=str(exp['exp_id']), 
                                        overview=str(exp['overview']), 
                                        sections=[])
                
                exp_list.append(experiment)
            current_app.logger.debug("running operation add_experiments_to_lab")
            lab = System.do("add_experiments_to_lab",
                                    experiments=exp_list,
                                    labid=int(lab.id),
                                    session=session)
            current_app.logger.debug("running operation add_experiments_to_lab")
            return lab.to_client()
        except Exception as e:
            lab.delete()
            current_app.logger.error("Exception = %s" % str(e))
            raise e

#+end_src

*** TestAddLab
 #+NAME: test_class_add_lab
 #+BEGIN_SRC python
class TestAddLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_lab_in_system_interface(self):
        print "test_add_lab_in_system_interface"
        data_dict = {'lab_name': 'data structure',
                    'lab_id': 'cse02',
                    'overview' : 'overview',
                    'key' : KEY,
                    'experiments': [{'exp_name': 'arrays', 'exp_id': 'exp123',\
                                         'overview' : 'overview', 
                                         'sections' : [] }]
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab_cls = System.delegate.entities['lab']
        lab = lab_cls.get_all()[0]
        
        self.assertEqual(lab.get("lab_name"), data_dict['lab_name'])
        self.assertEqual(lab.get("lab_id"), data_dict['lab_id'])
        self.assertEqual(lab.get("experiments")[0].get("exp_name"), 'arrays')
        self.assertEqual(lab.get("experiments")[0].get("exp_id"), 'exp123')


    def test_add_lab_raises_type_error_in_system_interface(self):
        print "test_add_lab_raises_type_error_in_system_interface"

        data_dict = {'lab_name': 'data structure',
                    'lab_id': 123,
                    'overview' : 'overview',
                    'key' : KEY,
                    'experiments': [{'exp_name': 'arrays', 'exp_id':
                                         'exp123', 'overview' : 'overview',
                                         'sections' : [] }]
                   }

        with self.assertRaises(TypeError):
            SystemInterface.add_lab(data_dict)

 #+END_SRC

** Get Labs
#+NAME: class_get_labs
#+begin_src python
    @staticmethod
    def get_labs():
        lab_cls = System.delegate.entities['lab']
        try:
            current_app.logger.debug("getting labs")
            labs = lab_cls.get_all()
            lab_dict_list = []
            for lab in labs:
                lab_x = lab.to_client()
                lab_dict_list.append(lab_x)
            current_app.logger.debug("got labs")
            return  lab_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabs
 #+NAME: test_class_get_labs
 #+BEGIN_SRC python
class TestGetLabs(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_in_system_interface(self):
        print "test_get_labs_in_system_interface"

        data_dict = {'lab_name': 'data structure',
                    'lab_id': 'cse01',
                    'key' : KEY,
                    'overview' : 'overview',
                    'experiments': [{'exp_name': 'arrays', 'exp_id': \
                                         'exp123', 'overview' : 'overview', 'sections' : [] }]
                   }

        data_dict1 = {'lab_name': "Automata",
            'lab_id': 'DFA',
            'key' : KEY,
            'overview' : 'overview',
            'experiments': [{'exp_name': 'arrays', 'exp_id': 'exp234', \
                                 'overview' : 'overview', 'sections' : [] }]
           }

        lab1 = SystemInterface.add_lab(data_dict)
        lab2 = SystemInterface.add_lab(data_dict1)

        labs_list = SystemInterface.get_labs()
        
        self.assertEqual(labs_list[0].get("lab_name"), data_dict['lab_name'])
        self.assertEqual(labs_list[1].get("lab_name"), data_dict1['lab_name'])
        self.assertEqual(labs_list[0].get("lab_id"), 
                             data_dict['lab_id'])
        self.assertEqual(labs_list[1].get("lab_id"), 
                             data_dict1['lab_id'])

 #+END_SRC

** Get Lab By Id
#+NAME: class_get_lab_by_id
#+begin_src python
    @staticmethod
    def get_lab_by_id(id):
        lab_cls = System.delegate.entities['lab']
        try:
            current_app.logger.debug("getting lab by id")
            lab = lab_cls.get_by_id(id)
            if not lab:
                return ("No lab found with id: %s" % (id))

            return lab.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabById
 #+NAME: test_class_get_lab_by_id
 #+BEGIN_SRC python
class TestGetLabById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab_by_id_in_system_interface(self):
        print "test_get_lab_by_id_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'array',
                    'lab_id': 'cse02',
                    'overview' : 'overview',
                    'experiments': [{'exp_name': 'arrays', 'exp_id': 
                                         'exp123', 'overview' : 'overview', 
                                         'sections' : [] }]
                   }

        data_dict1 = {
                    'key' : KEY,
                    'lab_name': 'stack',
                    'lab_id': 'cse03',
                    'overview' : 'overview',
                    'experiments': [{'exp_name': 'arrays', 'exp_id':
                                         'exp234', 'overview' : 'overview',
                                         'sections' : [] }]
                   }

        lab1 = SystemInterface.add_lab(data_dict)
        lab2 = SystemInterface.add_lab(data_dict1)

        lab_data_one = SystemInterface.get_lab_by_id(1)
        lab_data_two = SystemInterface.get_lab_by_id(2)
        
        self.assertEqual(lab_data_one.get("lab_name"), data_dict['lab_name'])
        self.assertEqual(lab_data_two.get("lab_name"), data_dict1['lab_name'])
        self.assertEqual(lab_data_one.get("lab_id"), 
                             data_dict['lab_id'])
        self.assertEqual(lab_data_two.get("lab_id"), 
                             data_dict1['lab_id'])

 #+END_SRC

** Delete Lab
#+NAME: class_delete_lab
#+begin_src python
    @staticmethod
    def delete_lab(lab_id, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))
        try:
            current_app.logger.debug("running operation delete_lab")
            lab = System.do("delete_lab", lab_id=str(lab_id), session=session)
            current_app.logger.debug("completed operation delete_lab")
            return lab
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteLab
 #+NAME: test_class_delete_lab
 #+BEGIN_SRC python
class TestDeleteLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_lab_in_system_interface(self):
        print "test_delete_lab_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse01',
                    'overview' : 'overview',
                    'experiments': [{'exp_name': 'arrays', 'exp_id':
                                         'exp123', 'overview' : 'overview',
                                         'sections' : [] }]
                   }

        data_dict1 = {
                    'key' : KEY,
                    'lab_name': 'Computer Programming',
                    'lab_id': 'cse02',
                    'overview' : 'overview',
                    'experiments': [{'exp_name': 'arrays', 'exp_id':
                                         'exp234', 'overview' : 'overview',
                                         'sections' : [] }]
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)
        lab_id = SystemInterface.delete_lab("cse02", KEY)
        
        self.assertEqual(lab_id, "cse02")

 #+END_SRC

** Get Lab by LabId
#+NAME: class_get_lab_by_lab_id
#+begin_src python
    @staticmethod
    def get_lab(lab_id):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=KEY)
        try:
            current_app.logger.debug("running operation get_lab_by_lab_id")
            lab = System.do("get_lab", lab_id=str(lab_id), session=session)
            current_app.logger.debug("completed operation get_lab_by_lab_id")
            if not lab:
                return ("No lab found with labid: %s" % (lab_id))
            return lab.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabByLabId
 #+NAME: test_class_get_lab_by_labid
 #+BEGIN_SRC python
class TestGetLabByLabId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab_by_labid_in_system_interface(self):
        print "test_get_lab_by_labid_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse01',
                    'overview' : 'overview',
                    'experiments': []
                   }

        data_dict1 = {
                    'key' : KEY,
                    'lab_name': 'Computer Programming',
                    'lab_id': 'cse02',
                    'overview' : 'overview',
                    'experiments': []
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)

        lab = SystemInterface.get_lab(data_dict['lab_id'])
        lab1 = SystemInterface.get_lab(data_dict1['lab_id'])
        
        self.assertEqual(lab.get("lab_id"), data_dict['lab_id'])
        self.assertEqual(lab1.get("lab_id"), data_dict1['lab_id'])

 #+END_SRC

** Update Lab
#+NAME: class_update_lab
#+begin_src python
    @staticmethod
    def update_lab(data_dict):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=data_dict['key'])

        if 'lab_name' not in data_dict:
            lab_name=str(lab.get("lab_name"))
        else:
            lab_name=data_dict['lab_name']

        if 'overview' not in data_dict:
            overview=str(lab.get("overview"))
        else:
            overview=data_dict['overview']

        try:
            current_app.logger.debug("running operation update_lab")
            lab = System.do("update_lab", lab_id=str(data_dict['lab_id']),
                                    lab_name=lab_name, 
                                    overview=overview,
                                    session=session)
            current_app.logger.debug("completed operation update_lab")
            return lab.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateLab
 #+NAME: test_class_update_lab
 #+BEGIN_SRC python
class TestUpdateLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_lab_name_in_system_interface(self):
        print "test_update_lab_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse02',
                    'overview' : 'overview',
                    'experiments': [{'exp_name': 'arrays', \
                                         'exp_id': 'exp123', \
                                         'overview' : 'overview', \
                                         'sections' : [] }]
                   }

        data_dict1 = {
                    'key' : KEY,
                    'overview' : 'computer programming overview',
                    'lab_name': 'Computer Programming',
                    'lab_id': 'cse02'
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.update_lab(data_dict1)
        
        self.assertEqual(lab1.get("lab_name"), data_dict1['lab_name'])
        self.assertEqual(lab1.get("overview"), data_dict1['overview'])

 #+END_SRC

** Add Experiment
#+NAME: class_add_experiment
#+begin_src python
    @staticmethod
    def add_experiment(data_dict):
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']
        experiment_cls = System.delegate.entities['experiment']

        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        sections = data_dict['sections']
        data_dict['sections'] = []

        experiment = experiment_cls(exp_name=data_dict['exp_name'],
                                exp_id=data_dict['exp_id'],
                                overview=data_dict['overview'],
                                sections=data_dict['sections'])
        try:
            current_app.logger.debug("running operation add_experiment")
            question = System.do("add_experiment", experiment=experiment, 
                                    session=session)
            current_app.logger.debug("completed operation add_experiment")

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        section_list = []
        try:
            for section in sections:
                section = section_cls(name=str(section['name']))
                section_list.append(section)
            current_app.logger.debug("running operation"
                                     "add_sections_to_experiments")
            experiment = System.do("add_sections_to_experiment",
                                    sections=section_list,
                                    expid=int(experiment.id),
                                    session=session)
            current_app.logger.debug("running operation"
                                     "add_sections_to_experiment")
            return experiment.to_client()
        except Exception as e:
            experiment.delete()
            current_app.logger.error("Exception = %s" % str(e))
            raise e

#+end_src

*** TestAddExperiment
 #+NAME: test_class_add_experiment
 #+BEGIN_SRC python
class TestAddExperiment(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_experiment_in_system_interface(self):
        print "test_add_experiment_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'exp_name': 'array',
                    'exp_id': 'cse02',
                    'overview' : 'overview', 
                    'sections' : []
                   }

        experiment = SystemInterface.add_experiment(data_dict)

        self.assertEqual(experiment.get("exp_name"), 
                             data_dict['exp_name'])
        self.assertEqual(experiment.get("exp_id"), data_dict['exp_id'])
        
    def test_add_experiment_raises_type_error_in_system_interface(self):
        print "test_add_experiment_raises_type_error_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'exp_name': 'cse02',
                    'overview' : 'overview',
                    'exp_id': 123,
                    'sections': []
		    }
        with self.assertRaises(TypeError):
            SystemInterface.add_experiment(data_dict)
 #+END_SRC

** Add Institute
#+NAME: class_add_institute
#+begin_src python
    @staticmethod
    def add_institute(data_dict):
        session_cls = System.delegate.entities['session']       
        institute_cls = System.delegate.entities['institute']
#        lab_cls = System.delegate.entities['lab']

        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        institute = institute_cls(inst_name=str(data_dict['inst_name']),
                                  inst_id=str(data_dict['inst_id']))

        try:
            current_app.logger.debug("running operation add_institute")
            institute = System.do("add_institute", institute=institute,
                                    session=session)
            current_app.logger.debug("completed operation add_institute")
            return institute.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+END_SRC
** Add Discipline
#+NAME: class_add_discipline
#+begin_src python
    @staticmethod
    def add_discipline(data_dict):
        session_cls = System.delegate.entities['session']
        discipline_cls = System.delegate.entities['discipline']

        session = session_cls(key=data_dict['key'])
        discipline = discipline_cls(dis_name=data_dict['dis_name'],
                                dis_id=data_dict['dis_id'])
        try:
            current_app.logger.debug("running operation add_discipline")
            question = System.do("add_discipline", discipline=discipline, 
                                    session=session)
            current_app.logger.debug("completed operation add_discipline")
            return discipline.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddInstitute 
 #+NAME: test_class_add_institute
 #+BEGIN_SRC python
class TestAddInstitute(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_institute_in_system_interface(self):
        print "test_add_institute_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)
        institute_cls = System.delegate.entities['institute']
        institute = institute_cls.get_all()[0]

        self.assertEqual(institute.get("inst_name"), 
                             data_dict['inst_name'])
        self.assertEqual(institute.get("inst_id"), data_dict['inst_id'])
        

 #+END_SRC
*** TestAddDiscipline
 #+NAME: test_class_add_discipline
 #+BEGIN_SRC python
class TestAddDiscipline(TestCase):

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_discipline_in_system_interface(self):
        print "test_add_discipline_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'array',
                    'dis_id': 'cse02'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        self.assertEqual(discipline.get("dis_name"), 
                             data_dict['dis_name'])
        self.assertEqual(discipline.get("dis_id"), data_dict['dis_id'])
        
    def test_add_discipline_raises_type_error_in_system_interface(self):
        print "test_add_discipline_raises_type_error_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'cse02',
                    'dis_id': 123
		    }
        with self.assertRaises(TypeError):
            SystemInterface.add_discipline(data_dict)

 #+END_SRC
*** TestAddDiscipline
 #+NAME: test_class_add_lab
 #+BEGIN_SRC python
class TestAddDiscipline(TestCase):

    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_discipline_in_system_interface(self):
        print "test_add_discipline_in_system_interface"

        data_dict = {'dis_name': 'data structure',
                    'dis_id': 'cse01',
                    'key' : KEY
                   }

        data_dict1 = {'dis_name': "Automata",
            'dis_id': 'DFA',
            'key' : KEY
           }


        dis = SystemInterface.add_lab(data_dict)
        dis1 = SystemInterface.add_lab(data_dict1)
        
        self.assertEqual(lab.get("dis_id"), 
                             data_dict['dis_id'])
        self.assertEqual(lab.get("dis_name"), data_dict['dis_name'])
        self.assertEqual(lab1.get("dis_id"), 
                             data_dict1['dis_id'])
        self.assertEqual(lab1.get("dis_name"), data_dict1['dis_name'])


    def test_add_lab_raises_type_error_in_system_interface(self):
        print "test_add_discipline_raises_type_error_in_system_interface"

        data_dict = {'discipline_name': 'data structure',
                    'dis_id': 123,
                    'key' : KEY
                   }

        with self.assertRaises(TypeError):
            SystemInterface.add_lab(data_dict)

 #+END_SRC

** Get Discipline

#+NAME: class_get_disciplines
#+begin_src python
    @staticmethod
    def get_disciplines():
        discipline_cls = System.delegate.entities['discipline']
        try:
            current_app.logger.debug("getting disciplines")
            disciplines = discipline_cls.get_all()
            dis_dict_list = []
            for dis in disciplines:
                dis_x = dis.to_client()
                dis_dict_list.append(dis_x)
            current_app.logger.debug("got discipline")
            return  dis_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetExperiments
 #+NAME: test_class_get_experiments
 #+BEGIN_SRC python
class TestGetExperiments(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiments_in_system_interface(self):
        print "test_get_experiments_in_system_interface"

        data_dict = {'exp_name': 'stack',
                    'exp_id': 'cse01',
                    'key' : KEY
                   }

        data_dict1 = {'exp_name': "arrays",
            'exp_id': 'cse02',
            'key' : KEY
           }

        exp1 = SystemInterface.add_experiment(data_dict)
        exp2 = SystemInterface.add_experiment(data_dict1)

        exp_list = SystemInterface.get_experiments()
        
        self.assertEqual(exp_list[0].get("exp_name"), data_dict['exp_name'])
        self.assertEqual(exp_list[1].get("exp_name"), data_dict1['exp_name'])
        self.assertEqual(exp_list[0].get("exp_id"), 
                             data_dict['exp_id'])
        self.assertEqual(exp_list[1].get("exp_id"), 
                             data_dict1['exp_id'])

 #+END_SRC

** Add Section
#+NAME: class_add_section
#+begin_src python
    @staticmethod
    def add_section(data_dict):
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']

        session = session_cls(key=data_dict['key'])
        section = section_cls(name=data_dict['name'])
        try:
            current_app.logger.debug("running operation add_section")
            question = System.do("add_section", section=section, 
                                    session=session)
            current_app.logger.debug("completed operation add_section")
            return section.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddSection
 #+NAME: test_class_add_section
 #+BEGIN_SRC python
class TestAddSection(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_section_in_system_interface(self):
        print "test_add_section_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name' : 'Theory'
                   }

        section = SystemInterface.add_section(data_dict)

        self.assertEqual(section.get("name"), 
                             data_dict['name'])
        
    def test_add_section_raises_type_error_in_system_interface(self):
        print "test_add_section_raises_type_error_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name' : 123
		    }
        with self.assertRaises(TypeError):
            SystemInterface.add_section(data_dict)
 #+END_SRC

** Get Experiments
#+NAME: class_get_experiments
#+begin_src python
    @staticmethod
    def get_experiments():
        experiment_cls = System.delegate.entities['experiment']
        try:
            current_app.logger.debug("getting experiments")
            experiments = experiment_cls.get_all()
            exp_dict_list = []
            for exp in experiments:
                exp_x = exp.to_client()
                exp_dict_list.append(exp_x)
            current_app.logger.debug("got experiments")
            return  exp_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetExperiments
 #+NAME: test_class_get_experiments
 #+BEGIN_SRC python
class TestGetExperiments(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiments_in_system_interface(self):
        print "test_get_experiments_in_system_interface"

        data_dict = {'exp_name': 'stack',
                    'exp_id': 'cse01',
                    'overview' : 'overview',
                    'sections': [],
                    'key' : KEY
                   }

        data_dict1 = {'exp_name': "arrays",
            'exp_id': 'cse02',
            'overview' : 'overview',
            'sections':[],
            'key' : KEY
           }

        exp1 = SystemInterface.add_experiment(data_dict)
        exp2 = SystemInterface.add_experiment(data_dict1)

        exp_list = SystemInterface.get_experiments()
        
        self.assertEqual(exp_list[0].get("exp_name"), data_dict['exp_name'])
        self.assertEqual(exp_list[1].get("exp_name"), data_dict1['exp_name'])
        self.assertEqual(exp_list[0].get("exp_id"), 
                             data_dict['exp_id'])
        self.assertEqual(exp_list[1].get("exp_id"), 
                             data_dict1['exp_id'])

 #+END_SRC

** Get Institutes
#+NAME: class_get_institutes
#+begin_src python
    @staticmethod
    def get_institutes():
        institute_cls = System.delegate.entities['institute']
        try:
            current_app.logger.debug("getting institutes")
            institutes = institute_cls.get_all()
            inst_dict_list = []
            for inst in institutes:
                inst_x = inst.to_client()
                inst_dict_list.append(inst_x)
            current_app.logger.debug("got institutes")
            return  inst_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetInstitutes
 #+NAME: test_class_get_institutes
 #+BEGIN_SRC python
class TestGetInstitutes(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institutes_in_system_interface(self):
        print "test_get_institutes_in_system_interface"

        data_dict = {'inst_name': 'IIT Kharagpur',
                    'inst_id': 'IITKgp',
                    'key' : KEY
                    }

        data_dict1 = {'inst_name': "IIT Delhi",
                     'inst_id': 'IITD',
                     'key' : KEY
                     }

        inst1 = SystemInterface.add_institute(data_dict)
        inst2 = SystemInterface.add_institute(data_dict1)

        inst_list = SystemInterface.get_institutes()
        
        self.assertEqual(inst_list[0].get("inst_name"), data_dict['inst_name'])
        self.assertEqual(inst_list[1].get("inst_name"), data_dict1['inst_name'])
        self.assertEqual(inst_list[0].get("inst_id"), 
                             data_dict['inst_id'])
        self.assertEqual(inst_list[1].get("inst_id"), 
                             data_dict1['inst_id'])

 #+END_SRC

** Get Sections

#+NAME: class_get_sections
#+begin_src python
    @staticmethod
    def get_sections():
        section_cls = System.delegate.entities['section']
        try:
            current_app.logger.debug("getting sections")
            sections = section_cls.get_all()
            section_dict_list = []
            for section in sections:
                section_x = section.to_client()
                section_dict_list.append(section_x)
            current_app.logger.debug("got sections")
            return  section_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetSections
 #+NAME: test_class_get_sections
 #+BEGIN_SRC python
class TestGetSections(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_section_in_system_interface(self):
        print "test_get_section_in_system_interface"

        data_dict = {'name': 'Theory',
                    'key' : KEY
                   }

        data_dict1 = {'name': 'Aim',
                     'key' : KEY
                     }

        section1 = SystemInterface.add_section(data_dict)
        section2 = SystemInterface.add_section(data_dict1)

        section_list = SystemInterface.get_sections()
        
        self.assertEqual(section_list[0].get("name"), data_dict['name'])
        self.assertEqual(section_list[1].get("name"), data_dict1['name'])

 #+END_SRC

** Get Section By Id

#+NAME: class_get_section_by_id
#+begin_src python
    @staticmethod
    def get_section_by_id(id):
        section_cls = System.delegate.entities['section']
        try:
            current_app.logger.debug("getting section by id")
            section = section_cls.get_by_id(id)
            if not section:
                return ("No section found with id: %s" % (id))

            return section.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetSectionById
 #+NAME: test_class_get_section_by_id
 #+BEGIN_SRC python
class TestGetSectionById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_section_by_id_in_system_interface(self):
        print "test_get_section_by_id_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name' : "Theory"
                   }

        data_dict1 = {
                    'key' : KEY,
                    'name' : "Quiz"
                   }

        section1 = SystemInterface.add_section(data_dict)
        section2 = SystemInterface.add_section(data_dict1)

        section_data_one = SystemInterface.get_section_by_id(1)
        section_data_two = SystemInterface.get_section_by_id(2)
        
        self.assertEqual(section_data_one.get("name"), data_dict['name'])
        self.assertEqual(section_data_two.get("name"), data_dict1['name'])

 #+END_SRC

** Get Experiment By Id
#+NAME: class_get_experiment_by_id
#+begin_src python
    @staticmethod
    def get_experiment_by_id(id):
        experiment_cls = System.delegate.entities['experiment']
        try:
            current_app.logger.debug("getting experiment by id")
            experiment = experiment_cls.get_by_id(id)
            if not experiment:
                return ("No experiment found with id: %s" % (id))

            return experiment.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetExperimentById
 #+NAME: test_class_get_experiment_by_id
 #+BEGIN_SRC python
class TestGetExperimentById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiment_by_id_in_system_interface(self):
        print "test_get_experiment_by_id_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'exp_name': 'array',
                    'overview' : 'overview',
                    'exp_id': 'cse02',
                    'sections': []
                   }

        data_dict1 = {
                    'key' : KEY,
                    'exp_name': 'stack',
                    'overview' : 'overview',
                    'exp_id': 'cse03',
                    'sections': []
                   }

        exp1 = SystemInterface.add_experiment(data_dict)
        exp2 = SystemInterface.add_experiment(data_dict1)

        exp_data_one = SystemInterface.get_experiment_by_id(1)
        exp_data_two = SystemInterface.get_experiment_by_id(2)
        
        self.assertEqual(exp_data_one.get("exp_name"), data_dict['exp_name'])
        self.assertEqual(exp_data_two.get("exp_name"), data_dict1['exp_name'])
        self.assertEqual(exp_data_one.get("exp_id"), 
                             data_dict['exp_id'])
        self.assertEqual(exp_data_two.get("exp_id"), 
                             data_dict1['exp_id'])

 #+END_SRC

** Get Institute By Id
#+NAME: class_get_institute_by_id
#+begin_src python
    @staticmethod
    def get_institute_by_id(id):
        institute_cls = System.delegate.entities['institute']
        try:
            current_app.logger.debug("getting institute by id")
            institute = institute_cls.get_by_id(id)
            if not institute:
                return ("No institute found with id: %s" % (id))

            return institute.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetInstituteById
 #+NAME: test_class_get_institute_by_id
 #+BEGIN_SRC python
class TestGetInstituteById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institute_by_id_in_system_interface(self):
        print "test_get_institute_by_id_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK',
                    }

        data_dict1 = {
                    'key' : KEY,
                    'inst_name': 'IIT Delhi',
                    'inst_id': 'IITD',
                    }

        inst1 = SystemInterface.add_institute(data_dict)
        inst2 = SystemInterface.add_institute(data_dict1)

        inst_data_one = SystemInterface.get_institute_by_id(1)
        inst_data_two = SystemInterface.get_institute_by_id(2)
        
        self.assertEqual(inst_data_one.get("inst_name"), data_dict['inst_name'])
        self.assertEqual(inst_data_two.get("inst_name"), data_dict1['inst_name'])
        self.assertEqual(inst_data_one.get("inst_id"), 
                             data_dict['inst_id'])
        self.assertEqual(inst_data_two.get("inst_id"), 
                             data_dict1['inst_id'])

 #+END_SRC

** Update Experiment
#+NAME: class_update_experiment
#+begin_src python
    @staticmethod
    def update_experiment(data_dict):
        session_cls = System.delegate.entities['session']
        exp_cls = System.delegate.entities['experiment']

        session = session_cls(key=data_dict['key'])
        exp = exp_cls.get_by_id(data_dict['e_id'])

        if 'exp_name' not in data_dict:
            exp_name=str(exp.get("exp_name"))
        else:
            exp_name=data_dict['exp_name']

        if 'exp_id' not in data_dict:
            exp_id=str(exp.get("exp_id"))
        else:
            exp_id=data_dict['exp_id']

        if 'overview' not in data_dict:
            overview=str(exp.get("overview"))
        else:
            overview=data_dict['overview']

        try:
            current_app.logger.debug("running operation update_experiment")
            question = System.do("update_experiment", experiment=exp, exp_name=exp_name, 
                                    exp_id=exp_id,
                                    overview=overview,
                                    session=session)
            current_app.logger.debug("completed operation update_experiment")
            return exp.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateExperiment
 #+NAME: test_class_update_Experiment
 #+BEGIN_SRC python
class TestUpdateExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_experiment_name_in_system_interface(self):
        print "test_update_experiment_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'exp_name': 'Data Structures',
                    'overview' : 'overview',
                    'sections': [],
                    'exp_id': 'cse02'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'e_id': 1,
                    'exp_name': 'arrays'
                   }

        exp = SystemInterface.add_experiment(data_dict)
        exp1 = SystemInterface.update_experiment(data_dict1)
        
        self.assertEqual(exp1.get("exp_name"), data_dict1['exp_name'])

 #+END_SRC

** Update Institute
#+NAME: class_update_institute
#+begin_src python       
    @staticmethod
    def update_institute(data_dict):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=data_dict['key'])

        if 'inst_name' not in data_dict:
            inst_name=str(inst.get("inst_name"))
        else:
            inst_name=data_dict['inst_name']

        try:
            current_app.logger.debug("running operation update_institute")
            institute = System.do("update_institute", inst_id=str(data_dict['inst_id']),
                                    inst_name=inst_name, 
                                    session=session)
            current_app.logger.debug("completed operation update_institute")
            return institute.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateInstitute 
 #+NAME: test_class_update_Institute
 #+BEGIN_SRC python
class TestUpdateInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_institute_name_in_system_interface(self):
        print "test_update_institute_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK',
                    'overview' : 'overview'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'inst_name': 'IIT Delhi',
                    'inst_id': 'IITK'
                   }

        institute = SystemInterface.add_institute(data_dict)
        institute1 = SystemInterface.update_institute(data_dict1)
        
        self.assertEqual(institute1.get("inst_name"), data_dict1['inst_name'])

 #+END_SRC

** Update Section
#+NAME: class_update_section
#+begin_src python
    @staticmethod
    def update_section(data_dict):
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']

        session = session_cls(key=data_dict['key'])
        section = section_cls.get_by_id(data_dict['s_id'])

        if 'name' not in data_dict:
            name=str(section.get("name"))
        else:
            name=data_dict['name']

        try:
            current_app.logger.debug("running operation update_section")
            section = System.do("update_section", section=section, name=name,\
                                             session=session)
            current_app.logger.debug("completed operation update_section")
            return section.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateSection
 #+NAME: test_class_update_Section
 #+BEGIN_SRC python
class TestUpdateSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_section_name_in_system_interface(self):
        print "test_update_section_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name': 'Theory'
                   }

        data_dict1 = {
                    'key' : KEY,
                    's_id': 1,
                    'name': 'Quiz'
                   }

        section = SystemInterface.add_section(data_dict)
        section1 = SystemInterface.update_section(data_dict1)
        
        self.assertEqual(section1.get("name"), data_dict1['name'])

 #+END_SRC

** Delete Experiment
#+NAME: class_delete_experiment
#+begin_src python
    @staticmethod
    def delete_experiment(e_id):
        session_cls = System.delegate.entities['session']

        session = session_cls(key=KEY)
        try:
            current_app.logger.debug("running operation delete_experiment")
            exp = System.do("delete_experiment", e_id=int(e_id),
                                    session=session)
            current_app.logger.debug("completed operation delete_experiment")
            return exp
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteExperiment 
 #+NAME: test_class_delete_experiment
 #+BEGIN_SRC python
class TestDeleteExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_experiment_in_system_interface(self):
        print "test_delete_experiment_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'exp_name': 'Data Structures',
                    'overview' : 'overview',
                    'exp_id': 'cse01',
                    'sections': []

                   }

        data_dict1 = {
                    'key' : KEY,
                    'exp_name': 'Computer Programming',
                    'overview' : 'overview',
                    'exp_id': 'cse02',
                    'sections':[]
                   }

        exp = SystemInterface.add_experiment(data_dict)
        exp1 = SystemInterface.add_experiment(data_dict1)
        e_id = SystemInterface.delete_experiment(1)
        
        self.assertEqual(e_id, 1)

 #+END_SRC

** Delete Institute
#+NAME: class_delete_institute
#+begin_src python
    @staticmethod
    def delete_institute(inst_id, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))

        try:
            current_app.logger.debug("running operation delete_institute")
            institute = System.do("delete_institute", inst_id=str(inst_id), session=session)
            current_app.logger.debug("completed operation delete_institute")
            return institute
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteInstitute 
 #+NAME: test_class_delete_institute
 #+BEGIN_SRC python
class TestDeleteInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_institute_in_system_interface(self):
        print "test_delete_institute_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'inst_name': 'IIT Kharagpur',
                    'inst_id': 'IITKgp'
                     }

        institute = SystemInterface.add_institute(data_dict)
        institute1 = SystemInterface.add_institute(data_dict1)
        inst_id = SystemInterface.delete_institute("IITK", KEY)
        
        self.assertEqual(inst_id, "IITK")

 #+END_SRC

** Delete Section
#+NAME: class_delete_section
#+begin_src python
    @staticmethod
    def delete_section(s_id):
        session_cls = System.delegate.entities['session']

        session = session_cls(key=KEY)
        try:
            current_app.logger.debug("running operation delete_section")
            section = System.do("delete_section", s_id=int(s_id),
                                    session=session)
            current_app.logger.debug("completed operation delete_section")
            return section
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteSection
 #+NAME: test_class_delete_section
 #+BEGIN_SRC python
class TestDeleteSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_section_in_system_interface(self):
        print "test_delete_section_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name': 'Quiz'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'name' : 'Theory'
                   }

        exp = SystemInterface.add_section(data_dict)
        exp1 = SystemInterface.add_section(data_dict1)
        s_id = SystemInterface.delete_section(1)
        
        self.assertEqual(s_id, 1)

 #+END_SRC

** Get Institute by InstituteId
#+NAME: class_get_institute_by_inst_id
#+begin_src python
    @staticmethod
    def get_institute(inst_id):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=KEY)
        try:
            current_app.logger.debug("running operation get_institute_by_inst_id")
            institute = System.do("get_institute", inst_id=str(inst_id), session=session)
            current_app.logger.debug("completed operation get_institute_by_inst_id")
            if not institute:
                return ("No institute found with instituteid: %s" % (inst_id))
            return institute.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetInstituteByInstituteId
 #+NAME: test_class_get_institute_by_instituteid
 #+BEGIN_SRC python
class TestGetInstituteByInstituteId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institute_by_instituteid_in_system_interface(self):
        print "test_get_institute_by_instituteid_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Delhi',
                    'inst_id': 'IITD'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK',
                    }

        institute = SystemInterface.add_institute(data_dict)
        institute1 = SystemInterface.add_institute(data_dict1)

        institute = SystemInterface.get_institute(data_dict['inst_id'])
        institute1 = SystemInterface.get_institute(data_dict1['inst_id'])
        
        self.assertEqual(institute.get("inst_id"), data_dict['inst_id'])
        self.assertEqual(institute1.get("inst_id"), data_dict1['inst_id'])

 #+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.system.system import *
import datetime
from flask import current_app
from runtime.config.system_config import KEY

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.system.system_interface import *
from runtime.config.system_config import KEY
from flask import current_app
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC

    
* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle system_interface.py :eval no :noweb yes
<<imports_for_sources>>
<<class_system_interface>>
<<class_add_lab>>
<<class_add_section>>
<<class_add_experiment>>
<<class_add_institute>>
<<class_add_discipline>>
<<class_get_labs>>
<<class_get_lab_by_id>>
<<class_get_section_by_id>>
<<class_get_institute_by_id>>
<<class_delete_lab>>
<<class_delete_discipline>>
<<class_delete_institute>>
<<class_update_lab>>
<<class_update_institute>>
<<class_update_Section>>
<<class_get_experiments>>
<<class_get_institutes>>
<<class_get_disciplines>>
<<class_get_experiment_by_id>>
<<class_update_experiment>>
<<class_delete_experiment>>
<<class_delete_section>>
<<class_get_lab_by_lab_id>>
<<class_get_sections>>
<<class_get_institute_by_inst_id>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_system_interface.py :eval no :noweb yes
<<imports_for_tests>>
<<test_class_add_lab>>
<<test_class_add_experiment>>
<<test_class_add_institute>>
<<test_class_add_discipline>>
<<test_class_add_section>>
<<test_class_get_labs>>
<<test_class_get_sections>>
<<test_class_get_lab_by_id>>
<<test_class_delete_lab>>
<<test_class_update_lab>>
<<test_class_get_experiments>>
<<test_class_get_institutes>>
<<test_class_get_disciplines>>
<<test_class_get_experiment_by_id>>
<<test_class_get_institute_by_id>>
<<test_class_get_section_by_id>>
<<test_class_update_experiment>>
<<test_class_update_institute>>
<<test_class_update_Section>>
<<test_class_delete_section>>
<<test_class_delete_experiment>>
<<test_class_delete_institute>>
<<test_class_get_lab_by_labid>>
<<test_class_get_institute_by_instituteid>>
<<run_test_cases>>
#+end_src
 

