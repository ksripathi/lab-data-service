#+TITLE: System Interface implementation for Feedback Portal
#+AUTHOR: VLEAD
#+DATE: [2016-07-22 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  System Interface is the glue that between the =rest= and =system=.  The world
  of =rest= uses =json= and the world of =system= uses objects.  System
  Interface is allows these two worlds to talk to each other. 


* The =SystemInterface= class

** Constructor

#+NAME: class_system_interface
#+begin_src python
class SystemInterface ():

    def __init__(self):
        raise Error('Can not instantiate')

    @staticmethod
    def initialize(cls):
        System.initialize_system(cls)

#+end_src


** AddLab

#+NAME: class_add_lab
#+begin_src python
    @staticmethod
    def add_lab(data_dict):
        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']

        lab = data_dict['lab']
        data_dict['session'] = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        try:
            fb = System.do("add_lab", **data_dict)

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddLab
 #+NAME: test_class_add_lab
 #+BEGIN_SRC python
class TestAddLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_lab_in_system_interface(self):
        print "test_add_lab_in_system_interface"

        data_dict = {'lab_name': 'data structure',
                    'lab_id': 'cse01',
                    'key' : KEY
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab_cls = System.delegate.entities['lab']
        lab = lab_cls.get_all()[0]
        
        self.assertEqual(lab.get("lab_name"), data_dict['lab_name'])
        self.assertEqual(lab.get("lab_id"), data_dict['lab_id'])

        data_dict1 = {'lab_name': "Automata",
            'lab_id': "DFA",
            'key' : KEY
           }

        lab = SystemInterface.add_lab(data_dict1)
        
        lab_cls = System.delegate.entities['lab']

        lab = lab_cls.get_by_id(2)
        
        self.assertEqual(2, len(lab_cls.get_all()))
        self.assertEqual(lab.get("lab_name"), data_dict1['lab_name'])
        self.assertEqual(lab.get("lab_id"), data_dict1['lab_id'])

    def test_add_lab_raises_type_error_in_system_interface(self):
        print "test_add_lab_raises_type_error_in_system_interface"

        data_dict = {'lab_name': 'data structure',
                    'lab_id': 123,
                    'key' : KEY
                   }

        with self.assertRaises(TypeError):
            SystemInterface.add_lab(data_dict)

 #+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.system.system import *
import datetime
from flask import current_app
from runtime.config.system_config import KEY

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.system.system_interface import *
from runtime.config.system_config import KEY
from flask import current_app
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle system_interface.py :eval no :noweb yes
<<imports_for_sources>>
<<class_system_interface>>
<<class_add_lab>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_system_interface.py :eval no :noweb yes
<<imports_for_tests>>
<<test_class_add_lab>>
<<run_test_cases>>
#+end_src
 

