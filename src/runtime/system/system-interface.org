#+TITLE: System Interface implementation for LDS
#+AUTHOR: VLEAD
#+DATE: [2016-07-22 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  System Interface is the glue that between the =rest= and =system=.  The world
  of =rest= uses =json= and the world of =system= uses objects.  System
  Interface allows these two worlds to talk to each other. 
  
  
* The =SystemInterface= class
** Constructor
#+NAME: class_system_interface
#+begin_src python
class SystemInterface ():

    def __init__(self):
        raise Error('Can not instantiate')

    @staticmethod
    def initialize(cls):
        System.initialize_system(cls)

#+end_src


** Add Lab
#+NAME: class_add_lab
#+begin_src python
    @staticmethod
    def add_lab(data_dict):
        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']
        exp_cls = System.delegate.entities['experiment']
        email_cls = System.delegate.entities['email']

        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])
        experiments = data_dict['experiments']

        exp_list = []
        for e_id in experiments:
            experiment = System.do("get_experiment", exp_id=e_id)
            exp_list.append(experiment)

        inst_id = data_dict['inst_id']
        institute = System.do("get_institute", inst_id=inst_id)

        integration_level = data_dict['integration_level']
        integrationstatus = System.do("get_integrationstatus", integration_level=integration_level)

        dis_id = data_dict['dis_id']
        discipline = System.do("get_discipline", dis_id=dis_id)

        assets = data_dict['assets']
        asset_list = []
        for asset in assets:
            asset = System.do("get_asset", path=asset)
            asset_list.append(asset)

        developers = data_dict['developers']
        developer_list = []
        for d_id in developers:
            email = email_cls(email=d_id)
            developer = System.do("get_developer", email=email)
            developer_list.append(developer)

        hosted_url = data_dict['hosted_url']
        hostinginfo = System.do("get_hostinginfo", hosted_url=hosted_url)

        lab = lab_cls(lab_name=data_dict['lab_name'],
                                lab_id=data_dict['lab_id'],
                                overview=data_dict['overview'],
                                institute=institute,
                                integrationstatus=integrationstatus,
                                discipline=discipline,
                                assets=asset_list,
                                experiments=exp_list,
                                developers=developer_list,
                                hostinginfo=hostinginfo)

        try:
            current_app.logger.debug("running operation add_lab")
            lab = System.do("add_lab", lab=lab, session=session)
            current_app.logger.debug("completed operation add_lab")
            return lab.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddLab
 #+NAME: test_class_add_lab
 #+BEGIN_SRC python
class TestAddLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_lab_in_system_interface(self):
        print "test_add_lab_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)
        
        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key': KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview', 
                    'sections': [],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'integration_level': 4,
                   }

        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {'lab_name': 'data structure',
                    'lab_id': 'cse02',
                    'overview': 'overview',
                    'key': KEY,
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'integration_level': 4,
                    'experiments': ['exp123'],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                    }

        lab = SystemInterface.add_lab(data_dict)
        lab_cls = System.delegate.entities['lab']
        lab = lab_cls.get_all()[0]
        
        self.assertEqual(lab.get("lab_name"), data_dict['lab_name'])
        self.assertEqual(lab.get("lab_id"), data_dict['lab_id'])
        self.assertEqual(lab.get("institute").get("inst_id"),
                             data_dict['inst_id'])
        self.assertEqual(lab.get("integrationstatus").get("integration_level"),
                             data_dict['integration_level'])
        self.assertEqual(lab.get("discipline").get("dis_id"),
                             data_dict['dis_id'])
        self.assertEqual(lab.get("assets")[0].get("path"), 
                             'vlabs.ac.in/images/static/logo.png'), 
        self.assertEqual(lab.get("hostinginfo").get("hosted_url"),
                             data_dict['hosted_url'])
        self.assertEqual(lab.get("experiments")[0].get("exp_name"), 'arrays')
        self.assertEqual(lab.get("experiments")[0].get("exp_id"), 'exp123')
        self.assertEqual(lab.get("developers")[0].get("email").get("email"), 'abc@gmail.com')

    def test_add_lab_raises_type_error_in_system_interface(self):
        print "test_add_lab_raises_type_error_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }
        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)
        
        data_dict = {
                    'key': KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview', 
                    'sections': [],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'integration_level': 4,
                   }

        experiment = SystemInterface.add_experiment(data_dict) 

        data_dict = {'lab_name': 'data structure',
                    'lab_id': 123,
                    'overview': 'overview',
                    'key': KEY,
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'experiments': ['exp123'],
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                    }

        with self.assertRaises(TypeError):
            SystemInterface.add_lab(data_dict)

 #+END_SRC


** Add Experiment
#+NAME: class_add_experiment
#+begin_src python
    @staticmethod
    def add_experiment(data_dict):
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']
        experiment_cls = System.delegate.entities['experiment']
        institute_cls = System.delegate.entities['institute']
        discipline_cls = System.delegate.entities['discipline']
        email_cls = System.delegate.entities['email']
        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        sections = data_dict['sections']
        data_dict['sections'] = []

        inst_id = data_dict['inst_id']
        institute = System.do("get_institute", inst_id=inst_id)

        dis_id = data_dict['dis_id']
        discipline = System.do("get_discipline", dis_id=dis_id)

        integration_level = data_dict['integration_level']
        integrationstatus = System.do("get_integrationstatus", integration_level=integration_level)

        assets = data_dict['assets']
        asset_list = []
        for asset in assets:
            asset = System.do("get_asset", path=asset)
            asset_list.append(asset)
        developers = data_dict['developers']
        developer_list = []
        for d_id in developers:
            email = email_cls(email=d_id)
            developer = System.do("get_developer", email=email)
            developer_list.append(developer)

        hosted_url = data_dict['hosted_url']
        hostinginfo = System.do("get_hostinginfo", hosted_url=hosted_url)

        experiment = experiment_cls(exp_name=data_dict['exp_name'],
                                exp_id=data_dict['exp_id'],
                                overview=data_dict['overview'],
                                sections=data_dict['sections'],
                                institute=institute,
                                discipline=discipline,
                                assets=asset_list,
                                integrationstatus=integrationstatus,
                                developers=developer_list,
                                hostinginfo=hostinginfo)
        try:
            current_app.logger.debug("running operation add_experiment")
            question = System.do("add_experiment", experiment=experiment, 
                                    session=session)
            current_app.logger.debug("completed operation add_experiment")

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        section_list = []
        try:
            for section in sections:
                section = section_cls(name=str(section))
                section_list.append(section)
            current_app.logger.debug("running operation"
                                     "add_sections_to_experiments")
            experiment = System.do("add_sections_to_experiment",
                                    sections=section_list,
                                    experiment=experiment,
                                    session=session)
            current_app.logger.debug("running operation"
                                     "add_sections_to_experiment")
            return experiment.to_client()

        except Exception as e:
            experiment.delete()
            current_app.logger.error("Exception = %s" % str(e))
            raise e

#+end_src

*** TestAddExperiment
 #+NAME: test_class_add_experiment
 #+BEGIN_SRC python
class TestAddExperiment(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_experiment_in_system_interface(self):
        print "test_add_experiment_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }
        developer = SystemInterface.add_developer(data_dict)
        
        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'exp_name': 'array',
                    'exp_id': 'cse02',
                    'overview': 'overview', 
                    'sections': ["Introduction", "Quize"],
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        experiment = SystemInterface.add_experiment(data_dict)

        self.assertEqual(experiment.get("exp_name"), 
                             data_dict['exp_name'])
        self.assertEqual(experiment.get("exp_id"), data_dict['exp_id'])
        self.assertEqual(experiment.get("institute").get("inst_id"),
                             data_dict['inst_id'])
        self.assertEqual(experiment.get("discipline").get("dis_id"),
                             data_dict['dis_id'])
        self.assertEqual(experiment.get("integrationstatus").get("integration_level"),
                             data_dict['integration_level'])
        self.assertEqual(experiment.get("assets")[0].get("path"), 
                             'vlabs.ac.in/images/static/logo.png'),
        self.assertEqual(experiment.get("hostinginfo").get("hosted_url"),
                             data_dict['hosted_url'])
        self.assertEqual(experiment.get("developers")[0].get("email").get("email"), 'abc@gmail.com')

    def test_add_experiment_raises_type_error_in_system_interface(self):
        print "test_add_experiment_raises_type_error_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }
        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }
        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key': KEY,
                    'exp_name': 'cse02',
                    'overview': 'overview',
                    'integration_level': 4,
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'exp_id': 123,
                    'sections': ["Theory", "Procedure"],
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
		    }
        with self.assertRaises(TypeError):
            SystemInterface.add_experiment(data_dict)
 #+END_SRC


** Add Institute
#+NAME: class_add_institute
#+begin_src python
    @staticmethod
    def add_institute(data_dict):
        session_cls = System.delegate.entities['session']       
        institute_cls = System.delegate.entities['institute']

        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        institute = institute_cls(inst_name=str(data_dict['inst_name']),
                                  inst_id=str(data_dict['inst_id']))

        try:
            current_app.logger.debug("running operation add_institute")
            institute = System.do("add_institute", institute=institute,
                                    session=session)
            current_app.logger.debug("completed operation add_institute")
            return institute.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+END_SRC
*** TestAddInstitute 
 #+NAME: test_class_add_institute
 #+BEGIN_SRC python
class TestAddInstitute(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_institute_in_system_interface(self):
        print "test_add_institute_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)
        institute_cls = System.delegate.entities['institute']
        institute = institute_cls.get_all()[0]

        self.assertEqual(institute.get("inst_name"), 
                             data_dict['inst_name'])
        self.assertEqual(institute.get("inst_id"), data_dict['inst_id'])
        

 #+END_SRC


** Add Discipline
#+NAME: class_add_discipline
#+begin_src python
    @staticmethod
    def add_discipline(data_dict):
        session_cls = System.delegate.entities['session']
        discipline_cls = System.delegate.entities['discipline']

        session = session_cls(key=data_dict['key'])
        discipline = discipline_cls(dis_name=data_dict['dis_name'],
                                dis_id=data_dict['dis_id'])
        try:
            current_app.logger.debug("running operation add_discipline")
            question = System.do("add_discipline", discipline=discipline, 
                                    session=session)
            current_app.logger.debug("completed operation add_discipline")
            return discipline.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src


*** TestAddDiscipline
 #+NAME: test_class_add_discipline
 #+BEGIN_SRC python
class TestAddDiscipline(TestCase):

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_discipline_in_system_interface(self):
        print "test_add_discipline_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'array',
                    'dis_id': 'cse02'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        self.assertEqual(discipline.get("dis_name"), 
                             data_dict['dis_name'])
        self.assertEqual(discipline.get("dis_id"), data_dict['dis_id'])
        
    def test_add_discipline_raises_type_error_in_system_interface(self):
        print "test_add_discipline_raises_type_error_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'cse02',
                    'dis_id': 123
		    }
        with self.assertRaises(TypeError):
            SystemInterface.add_discipline(data_dict)

 #+END_SRC


** Add Section
#+NAME: class_add_section
#+begin_src python
    @staticmethod
    def add_section(data_dict):
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']

        session = session_cls(key=data_dict['key'])
        section = section_cls(name=data_dict['name'])
        try:
            current_app.logger.debug("running operation add_section")
            question = System.do("add_section", section=section, 
                                    session=session)
            current_app.logger.debug("completed operation add_section")
            return section.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddSection
 #+NAME: test_class_add_section
 #+BEGIN_SRC python
class TestAddSection(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_section_in_system_interface(self):
        print "test_add_section_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name' : 'Theory'
                   }

        section = SystemInterface.add_section(data_dict)

        self.assertEqual(section.get("name"), 
                             data_dict['name'])
        
    def test_add_section_raises_type_error_in_system_interface(self):
        print "test_add_section_raises_type_error_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name' : 123
		    }
        with self.assertRaises(TypeError):
            SystemInterface.add_section(data_dict)
 #+END_SRC


** Add HostingInfo
#+NAME: class_add_hostinginfo
#+begin_src python
    @staticmethod
    def add_hostinginfo(data_dict):
        session_cls = System.delegate.entities['session']       
        hostinginfo_cls = System.delegate.entities['hostinginfo']

        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        hostinginfo = hostinginfo_cls(hosting_status=str(data_dict['hosting_status']),
                                  hosted_url=str(data_dict['hosted_url']),
                                  hosted_on=str(data_dict['hosted_on']))

        try:
            current_app.logger.debug("running operation add_hostinginfo")
            hostinginfo = System.do("add_hostinginfo", hostinginfo=hostinginfo,
                                    session=session)
            current_app.logger.debug("completed operation add_hostinginfo")
            return hostinginfo.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+END_SRC
*** TestAddHostingInfo
 #+NAME: test_class_add_hostinginfo
 #+BEGIN_SRC python
class TestAddHostingInfo(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_hostinginfo_in_system_interface(self):
        print "test_add_hostinginfo_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                    }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)
        hostinginfo_cls = System.delegate.entities['hostinginfo']
        hostinginfo = hostinginfo_cls.get_all()[0]

        self.assertEqual(hostinginfo.get("hosting_status"),
                             data_dict['hosting_status'])
        self.assertEqual(hostinginfo.get("hosted_url"), data_dict['hosted_url'])
        self.assertEqual(hostinginfo.get("hosted_on"), data_dict['hosted_on'])

 #+END_SRC


** Add Name
#+NAME: class_add_name
#+begin_src python
    @staticmethod
    def add_name(data_dict):
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']

        session = session_cls(key=data_dict['key'])
        name = name_cls(name=str(data_dict['name']))
        try:
            current_app.logger.debug("running operation add_section")
            question = System.do("add_name", name=name, session=session)
            current_app.logger.debug("completed operation add_name")
            return name.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddName
 #+NAME: test_class_add_name
 #+BEGIN_SRC python
class TestAddName(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_name_in_system_interface(self):
        print "test_add_name_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name' : 'Prof. S. Dharmaraja'
                   }

        name = SystemInterface.add_name(data_dict)

        self.assertEqual(name.get("name"), 
                             data_dict['name'])
        
    def test_add_name_raises_type_error_in_system_interface(self):
        print "test_add_name_raises_type_error_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name' : 123
		    }
        with self.assertRaises(TypeError):
            SystemInterface.add_name(data_dict)
 #+END_SRC
 

** Add Email
#+NAME: class_add_email
#+begin_src python
    @staticmethod
    def add_email(data_dict):
        session_cls = System.delegate.entities['session']
        email_cls = System.delegate.entities['email']

        session = session_cls(key=data_dict['key'])
        email = email_cls(email=str(data_dict['email']))
        try:
            current_app.logger.debug("running operation add_email")
            question = System.do("add_email", email=email, session=session)
            current_app.logger.debug("completed operation add_email")
            return email.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddEmail
 #+NAME: test_class_add_email
 #+BEGIN_SRC python
class TestAddEmail(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_email_in_system_interface(self):
        print "test_add_email_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'email' : 'dharmar@maths.iitd.ac.in'
                   }

        email = SystemInterface.add_email(data_dict)

        self.assertEqual(email.get("email"), 
                             data_dict['email'])
        
    def test_add_email_raises_type_error_in_system_interface(self):
        print "test_add_email_raises_type_error_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'email' : 123
		    }
        with self.assertRaises(TypeError):
            SystemInterface.add_email(data_dict)
 #+END_SRC

#** Get Emails
#+NAME: class_get_emails
#+begin_src python
    @staticmethod
    def get_emails():
        email_cls = System.delegate.entities['email']
        try:
            current_app.logger.debug("getting emails")
            emails = email_cls.get_all()
            email_dict_list = []
            for email in emails:
                email_x = email.to_client()
                email_dict_list.append(email_x)
            current_app.logger.debug("got emails")
            return  email_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

#*** TestGetEmails
 #+NAME: test_class_get_emails
 #+BEGIN_SRC python
class TestGetEmails(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_emails_in_system_interface(self):
        print "test_get_emails_in_system_interface"

        data_dict = {'email': 'dharamaraj@gmail.com',
                     'key': KEY
                    }

        data_dict1 = {'email': 'raja@gmail.com',
                      'key': KEY
                     }

        email1 = SystemInterface.add_email(data_dict)
        email2 = SystemInterface.add_email(data_dict1)

        emails_list = SystemInterface.get_emails()
        
        self.assertEqual(emails_list[0].get("email"), data_dict['email'])
        self.assertEqual(emails_list[1].get("email"), data_dict1['email'])

 #+END_SRC


** Add Developer
#+NAME: class_add_developer
#+begin_src python
    @staticmethod
    def add_developer(data_dict):
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']
        email_cls = System.delegate.entities['email']
        developer_cls = System.delegate.entities['developer']

        session = session_cls(key=data_dict['key'])
        name = name_cls(name=str(data_dict['name']))
        email = email_cls(email=str(data_dict['email']))

        developer = developer_cls(name=name, email=email)

        try:
            current_app.logger.debug("running operation add_developer")
            developer = System.do("add_developer", developer=developer,
                                    session=session)
            current_app.logger.debug("completed operation add_developer")

            return developer
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src
  

*** TestAddDeveloper
 #+NAME: test_class_add_developer
 #+BEGIN_SRC python
class TestAddDeveloper(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_developer_in_system_interface(self):
        print "test_add_developer_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. S. Dharmaraja',
                    'email': 'dharmar@maths.iitd.ac.in'
                   }

        developer = SystemInterface.add_developer(data_dict)

        self.assertEqual(developer.get("name").get("name"),
                             data_dict['name'])
        self.assertEqual(developer.get("email").get("email"),
                             data_dict['email'])

    def test_add_developer_raises_type_error_in_system_interface(self):
        print "test_add_developer_raises_type_error_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. S. Dharmaraja',
                    'email': 123456
		    }

        with self.assertRaises(TypeError):
            SystemInterface.add_developer(data_dict)
 #+END_SRC


** Add IntegrationStatus
#+NAME: class_add_integrationstatus
#+begin_src python
    @staticmethod
    def add_integrationstatus(data_dict):
        session_cls = System.delegate.entities['session']       
        integrationstatus_cls = System.delegate.entities['integrationstatus']

        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        integrationstatus = integrationstatus_cls(integration_level=data_dict['integration_level'])

        try:
            current_app.logger.debug("running operation add_integrationstatus")
            integrationstatus = System.do("add_integrationstatus", integrationstatus=integrationstatus,
                                    session=session)
            current_app.logger.debug("completed operation add_integrationstatus")
            return integrationstatus.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+END_SRC
*** TestAddIntegrationStatus
 #+NAME: test_class_add_integrationstatus
 #+BEGIN_SRC python
class TestAddIntegrationStatus(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_integrationstatus_in_system_interface(self):
        print "test_add_integrationstatus_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)
        integrationstatus_cls = System.delegate.entities['integrationstatus']
        integrationstatus = integrationstatus_cls.get_all()[0]

        self.assertEqual(integrationstatus.get("integration_level"), 
                             data_dict['integration_level'])

 #+END_SRC


** Get Labs
#+NAME: class_get_labs
#+begin_src python
    @staticmethod
    def get_labs():
        lab_cls = System.delegate.entities['lab']
        try:
            current_app.logger.debug("getting labs")
            labs = lab_cls.get_all()
            lab_dict_list = []
            for lab in labs:
                lab_x = lab.to_client()
                lab_dict_list.append(lab_x)
            current_app.logger.debug("got labs")
            return  lab_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabs
 #+NAME: test_class_get_labs
 #+BEGIN_SRC python
class TestGetLabs(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_in_system_interface(self):
        print "test_get_labs_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                    }

        asset1 = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/icon.png',
                    }

        asset2 = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key': KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview', 
                    'integration_level': 4,
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'sections': [],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE'
                   }

        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {'lab_name': 'data structure',
                    'lab_id': 'cse01',
                    'key': KEY,
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'experiments': ['exp123'],
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {'lab_name': "Automata",
                      'lab_id': 'DFA',
                      'key': KEY,
                      'overview': 'overview',
                      'inst_id': 'IITK',
                      'dis_id': 'CSE',
                      'assets': ['vlabs.ac.in/images/static/icon.png'],
                      'experiments': ['exp123'], 
                      'integration_level': 4,
                      'developers': ['abc@gmail.com'],
                      'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                      }


        lab1 = SystemInterface.add_lab(data_dict)
        lab2 = SystemInterface.add_lab(data_dict1)

        labs_list = SystemInterface.get_labs()
        
        self.assertEqual(labs_list[0].get("lab_name"), data_dict['lab_name'])
        self.assertEqual(labs_list[1].get("lab_name"), data_dict1['lab_name'])
        self.assertEqual(labs_list[0].get("lab_id"), 
                             data_dict['lab_id'])
        self.assertEqual(labs_list[1].get("lab_id"), 
                             data_dict1['lab_id'])

 #+END_SRC


** Get Labs by Institute
#+NAME: class_get_labs_by_institute
#+begin_src python
    @staticmethod
    def get_labs_by_institute(inst_name):
        institute = System.do("get_institute_by_institute_name",
                                  inst_name=str(inst_name))
        try:
            current_app.logger.debug("running operation get_labs_by_institute")
            labs = System.do("get_labs_by_institute", institute=institute)
            current_app.logger.debug("completed operation get_labs_by_institute")
            labs_dict_list = []
            for lab in labs:
                lab_x = lab.to_client()
                labs_dict_list.append(lab_x)
            current_app.logger.debug("got labs")
            return  labs_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabsByInstitute
 #+NAME: test_class_get_labs_by_institute
 #+BEGIN_SRC python
class TestGetLabsByInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_institute_in_system_interface(self):
        print "test_get_labs_by_institute_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset1 = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/icon.png',
                    }

        asset2 = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key': KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'sections': [],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE'
                   }

        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse01',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key': KEY,
                    'lab_name': 'Computer Programming',
                    'lab_id': 'cse02',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/icon.png'],
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)

        labs = SystemInterface.get_labs_by_institute("IIT Kanpur")

        self.assertEqual(labs[0]['institute']['inst_name'], "IIT Kanpur")

 #+END_SRC


** Get Labs by Discipline
#+NAME: class_get_labs_by_discipline
#+begin_src python
    @staticmethod
    def get_labs_by_discipline(dis_name):
        discipline = System.do("get_discipline_by_discipline_name",
                                  dis_name=str(dis_name))
        try:
            current_app.logger.debug("running operation get_labs_by_discipline")
            labs = System.do("get_labs_by_discipline", discipline=discipline)
            current_app.logger.debug("completed operation get_labs_by_institute")
            labs_dict_list = []
            for lab in labs:
                lab_x = lab.to_client()
                labs_dict_list.append(lab_x)
            current_app.logger.debug("got labs")
            return  labs_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabsByDiscipline
 #+NAME: test_class_get_labs_by_discipline
 #+BEGIN_SRC python
class TestGetLabsByDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_discipline_in_system_interface(self):
        print "test_get_labs_by_discipline_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'Computer Science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset1 = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/icon.png'
                   }

        asset2 = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'sections' : [],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE'
                   }

        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse01',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key': KEY,
                    'lab_name': 'Computer Programming',
                    'lab_id': 'cse02',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/icon.png'],
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)

        labs = SystemInterface.get_labs_by_discipline("Computer Science")

        self.assertEqual(labs[0]['discipline']['dis_name'], "Computer Science")

 #+END_SRC


** Get Labs by LabName
#+NAME: class_get_labs_by_lab_name
#+begin_src python
    @staticmethod
    def get_labs_by_lab_name(lab_name):

        try:
            current_app.logger.debug("running operation get_labs_by_lab_name")
            labs = System.do("get_labs_by_lab_name", lab_name=str(lab_name))
            current_app.logger.debug("completed operation get_labs_by_lab_name")
            labs_dict_list = []
            for lab in labs:
                lab_x = lab.to_client()
                labs_dict_list.append(lab_x)
            current_app.logger.debug("got labs")
            return  labs_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabsByLabName
 #+NAME: test_class_get_labs_by_lab_name
 #+BEGIN_SRC python
class TestGetLabsByLabName(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_lab_name_in_system_interface(self):
        print "test_get_labs_by_lab_name_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key': KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'sections': [],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE'
                   }

        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse01',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key': KEY,
                    'lab_name': 'Computer Programming',
                    'lab_id': 'cse02',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)

        labs = SystemInterface.get_labs_by_lab_name(data_dict['lab_name'])

        self.assertEqual(labs[0]['lab_name'], data_dict['lab_name'])

 #+END_SRC


** Get Labs by Asset
#+NAME: class_get_labs_by_asset
#+begin_src python
    @staticmethod
    def get_labs_by_asset(dis_name):
        asset = System.do("get_asset_by_asset_type",
                                  asset_type=str(asset_type))
        try:
            current_app.logger.debug("running operation get_labs_by_asset")
            labs = System.do("get_labs_by_asset", assets=[asset])
            current_app.logger.debug("completed operation get_labs_by_asset")
            labs_dict_list = []
            for lab in labs:
                lab_x = lab.to_client()
                labs_dict_list.append(lab_x)
            current_app.logger.debug("got labs")
            return  labs_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabsByAsset 
 #+NAME: test_class_get_labs_by_asset
 #+BEGIN_SRC python
class TestGetLabsByAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_asset_in_system_interface(self):
        print "test_get_labs_by_asset_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'Computer Science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                    }

        asset1 = SystemInterface.add_asset(data_dict)


        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/icon.png',
                    }

        asset2 = SystemInterface.add_asset(data_dict)


        data_dict = {
                    'key': KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4, 
                    'sections': [],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        experiment = SystemInterface.add_experiment(data_dict

        data_dict = {
                    'key': KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse01',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key': KEY,
                    'lab_name': 'Computer Programming',
                    'lab_id': 'cse02',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/icon.png'],
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)

        labs = SystemInterface.get_labs_by_asset("Image")

        self.assertEqual(labs[0]['asset']['asset_type'], "Image")

 #+END_SRC

*** TestGetLabsByIntegrationstatus 
 #+NAME: test_class_get_labs_by_integrationstatus
 #+BEGIN_SRC python
class TestGetLabsByIntegrationstatus(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_integrationstatus_in_system_interface(self):
        print "test_get_labs_by_integrationstatus_in_system_interface"
        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }
        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'Computer Science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                    }

        asset1 = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/icon.png',
                    }

        asset2 = SystemInterface.add_asset(data_dict)


        data_dict = {
                    'key': KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4, 
                    'sections': [],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {
                    'key': KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse01',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key': KEY,
                    'lab_name': 'Computer Programming',
                    'lab_id': 'cse02',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/icon.png'],
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)

        labs = SystemInterface.get_labs_by_integrationstatus("4")

        self.assertEqual(labs[0]['integrationstatus']['integration_level'], "4")

 #+END_SRC

 
** Get Experiments
#+NAME: class_get_experiments
#+begin_src python
    @staticmethod
    def get_experiments():
        experiment_cls = System.delegate.entities['experiment']
        try:
            current_app.logger.debug("getting experiments")
            experiments = experiment_cls.get_all()
            exp_dict_list = [] 
            for exp in experiments:
                exp_x = exp.to_client()
                exp_dict_list.append(exp_x)
            current_app.logger.debug("got experiments")
            return  exp_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetExperiments
 #+NAME: test_class_get_experiments
 #+BEGIN_SRC python
class TestGetExperiments(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiments_in_system_interface(self):
        print "test_get_experiments_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)
          
        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }
        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {'exp_name': 'stack',
                    'exp_id': 'cse01',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'integration_level': 4,
                    'sections': [],
                    'key': KEY,
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'inst_name': 'IIT Kharagpur',
                    'inst_id': 'IITKgp'
                    }

        institute1 = SystemInterface.add_institute(data_dict1)

        data_dict1 = {
                    'key' : KEY,
                    'dis_name': 'electronics and communication',
                    'dis_id': 'ECE'
                   }

        discipline1 = SystemInterface.add_discipline(data_dict1)

        data_dict1 = {'exp_name': "arrays",
                      'exp_id': 'cse02',
                      'overview': 'overview',
                      'assets': ['vlabs.ac.in/images/static/logo.png'],
                      'integration_level': 4,
                      'sections':[],
                      'key': KEY,
                      'inst_id': 'IITKgp',
                      'dis_id': 'ECE',
                      'developers': ['abc@gmail.com'],
                      'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                     }

        exp1 = SystemInterface.add_experiment(data_dict)
        exp2 = SystemInterface.add_experiment(data_dict1)

        exp_list = SystemInterface.get_experiments()
        
        self.assertEqual(exp_list[0].get("exp_name"), data_dict['exp_name'])
        self.assertEqual(exp_list[1].get("exp_name"), data_dict1['exp_name'])
        self.assertEqual(exp_list[0].get("exp_id"), 
                             data_dict['exp_id'])
        self.assertEqual(exp_list[1].get("exp_id"), 
                             data_dict1['exp_id'])

 #+END_SRC


** Get Institutes
#+NAME: class_get_institutes
#+begin_src python
    @staticmethod
    def get_institutes():
        institute_cls = System.delegate.entities['institute']
        try:
            current_app.logger.debug("getting institutes")
            institutes = institute_cls.get_all()
            inst_dict_list = []
            for inst in institutes:
                inst_x = inst.to_client()
                inst_dict_list.append(inst_x)
            current_app.logger.debug("got institutes")
            return  inst_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetInstitutes
 #+NAME: test_class_get_institutes
 #+BEGIN_SRC python
class TestGetInstitutes(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institutes_in_system_interface(self):
        print "test_get_institutes_in_system_interface"

        data_dict = {'inst_name': 'IIT Kharagpur',
                    'inst_id': 'IITKgp',
                    'key' : KEY
                    }

        data_dict1 = {'inst_name': "IIT Delhi",
                     'inst_id': 'IITD',
                     'key' : KEY
                     }

        inst1 = SystemInterface.add_institute(data_dict)
        inst2 = SystemInterface.add_institute(data_dict1)

        inst_list = SystemInterface.get_institutes()
        
        self.assertEqual(inst_list[0].get("inst_name"), data_dict['inst_name'])
        self.assertEqual(inst_list[1].get("inst_name"), data_dict1['inst_name'])
        self.assertEqual(inst_list[0].get("inst_id"), 
                             data_dict['inst_id'])
        self.assertEqual(inst_list[1].get("inst_id"), 
                             data_dict1['inst_id'])

 #+END_SRC


** Get Sections

#+NAME: class_get_sections
#+begin_src python
    @staticmethod
    def get_sections():
        section_cls = System.delegate.entities['section']
        try:
            current_app.logger.debug("getting sections")
            sections = section_cls.get_all()
            section_dict_list = []
            for section in sections:
                section_x = section.to_client()
                section_dict_list.append(section_x)
            current_app.logger.debug("got sections")
            return  section_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetSections
 #+NAME: test_class_get_sections
 #+BEGIN_SRC python
class TestGetSections(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_section_in_system_interface(self):
        print "test_get_section_in_system_interface"

        data_dict = {'name': 'Theory',
                    'key' : KEY
                   }

        data_dict1 = {'name': 'Aim',
                     'key' : KEY
                     }

        section1 = SystemInterface.add_section(data_dict)
        section2 = SystemInterface.add_section(data_dict1)

        section_list = SystemInterface.get_sections()
        
        self.assertEqual(section_list[0].get("name"), data_dict['name'])
        self.assertEqual(section_list[1].get("name"), data_dict1['name'])

 #+END_SRC


** Get Disciplines

#+NAME: class_get_disciplines
#+begin_src python
    @staticmethod
    def get_disciplines():
        discipline_cls = System.delegate.entities['discipline']
        try:
            current_app.logger.debug("getting disciplines")
            disciplines = discipline_cls.get_all()
            dis_dict_list = []
            for dis in disciplines:
                dis_x = dis.to_client()
                dis_dict_list.append(dis_x)
            current_app.logger.debug("got discipline")
            return  dis_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetDisciplines
 #+NAME: test_class_get_disciplines
 #+BEGIN_SRC python
class TestGetDisciplines(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_disciplines_in_system_interface(self):
        print "test_get_disciplines_in_system_interface"

        data_dict = {'dis_name': 'data structure',
                    'dis_id': 'cse01',
                    'key' : KEY
                   }

        data_dict1 = {'dis_name': "Automata",
                      'dis_id': 'DFA',
                      'key' : KEY
                     }

        dis = SystemInterface.add_discipline(data_dict)
        dis1 = SystemInterface.add_discipline(data_dict1)

        dis_list = SystemInterface.get_disciplines()
        
        self.assertEqual(dis_list[0].get("dis_name"), data_dict["dis_name"])
        self.assertEqual(dis_list[1].get("dis_name"), data_dict1["dis_name"])
        self.assertEqual(dis_list[0].get("dis_id"), 
                             data_dict["dis_id"])
        self.assertEqual(dis_list[1].get("dis_id"), 
                             data_dict1["dis_id"])

 #+END_SRC
 

** Get HostingInfos
#+NAME: class_get_hostinginfos
#+begin_src python
    @staticmethod
    def get_hostinginfos():
        hostinginfo_cls = System.delegate.entities['hostinginfo']
        try:
            current_app.logger.debug("getting hostinginfos")
            hostinginfos = hostinginfo_cls.get_all()
            host_dict_list = []
            for host in hostinginfos:
                host_x = host.to_client()
                host_dict_list.append(host_x)
            current_app.logger.debug("got hostinginfos")
            return  host_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetHostingInfos
 #+NAME: test_class_get_hostinginfos
 #+BEGIN_SRC python
class TestGetHostingInfos(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_hostinginfos_in_system_interface(self):
        print "test_get_hostinginfos_in_system_interface"

        data_dict = {'hosting_status': 'hosted',
                     'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                     'hosted_on': 'cloud',
                     'key' : KEY
                    }

        data_dict1 = {'hosting_status': 'not hosted',
                      'hosted_url': 'http://cse12-iiith.vlabs.ac.in',
                      'hosted_on': 'server',
                      'key' : KEY
                     }

        host1 = SystemInterface.add_hostinginfo(data_dict)
        host2 = SystemInterface.add_hostinginfo(data_dict1)

        host_list = SystemInterface.get_hostinginfos()
        
        self.assertEqual(host_list[0].get("hosting_status"), data_dict['hosting_status'])
        self.assertEqual(host_list[1].get("hosting_status"), data_dict1['hosting_status'])
        self.assertEqual(host_list[0].get("hosted_url"), data_dict['hosted_url'])
        self.assertEqual(host_list[1].get("hosted_url"), data_dict1['hosted_url'])
        self.assertEqual(host_list[0].get("hosted_on"), data_dict['hosted_on'])
        self.assertEqual(host_list[1].get("hosted_on"), data_dict1['hosted_on'])

 #+END_SRC


** Get Names

#+NAME: class_get_names
#+begin_src python
    @staticmethod
    def get_names():
        name_cls = System.delegate.entities['name']
        try:
            current_app.logger.debug("getting names")
            names = name_cls.get_all()
            name_dict_list = []
            for name in names:
                name_x = name.to_client()
                name_dict_list.append(name_x)
            current_app.logger.debug("got names")
            return  name_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetNames
 #+NAME: test_class_get_names
 #+BEGIN_SRC python
class TestGetNames(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_name_in_system_interface(self):
        print "test_get_name_in_system_interface"

        data_dict = {'name': 'Prof. Dharamaraj',
                    'key': KEY
                   }

        data_dict1 = {'name': 'Prof. Yamaraja',
                     'key': KEY
                     }

        name1 = SystemInterface.add_name(data_dict)
        name2 = SystemInterface.add_name(data_dict1)

        name_list = SystemInterface.get_names()
        
        self.assertEqual(name_list[0].get("name"), data_dict['name'])
        self.assertEqual(name_list[1].get("name"), data_dict1['name'])

 #+END_SRC


** Get Emails

#+NAME: class_get_emails
#+begin_src python
    @staticmethod
    def get_emails():
        email_cls = System.delegate.entities['email']
        try:
            current_app.logger.debug("getting emails")
            emails = email_cls.get_all()
            email_dict_list = []
            for email in emails:
                email_x = email.to_client()
                email_dict_list.append(email_x)
            current_app.logger.debug("got emails")
            return  email_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetEmails
 #+NAME: test_class_get_emails
 #+BEGIN_SRC python
class TestGetEmails(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_email_in_system_interface(self):
        print "test_get_email_in_system_interface"

        data_dict = {'email': 'abc@gmail.com',
                    'key': KEY
                   }

        data_dict1 = {'email': 'xyz@gmail.com',
                     'key': KEY
                     }

        email1 = SystemInterface.add_email(data_dict)
        email2 = SystemInterface.add_email(data_dict1)

        email_list = SystemInterface.get_emails()
        
        self.assertEqual(email_list[0].get("email"), data_dict['email'])
        self.assertEqual(email_list[1].get("email"), data_dict1['email'])

 #+END_SRC


** Get Developers

#+NAME: class_get_developers
#+begin_src python
    @staticmethod
    def get_developers():
        developer_cls = System.delegate.entities['developer']
        try:
            current_app.logger.debug("getting developes")
            developers = developer_cls.get_all()
            developer_dict_list = []
            for developer in developers:
                developer_x = developer.to_client()
                developer_dict_list.append(developer_x)
            current_app.logger.debug("got developers")
            return  developer_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetDevelopers
 #+NAME: test_class_get_developers
 #+BEGIN_SRC python
class TestGetDevelopers(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_developer_in_system_interface(self):
        print "test_get_developer_in_system_interface"

        data_dict = {'name': 'Prof. Dharamaja',
                     'email': 'abc@gmail.com',
                     'key': KEY
                   }

        data_dict1 = {'name': 'Prof. Yamraja',
                      'email': 'xyz@gmail.com',
                      'key': KEY
                     }

        developer1 = SystemInterface.add_developer(data_dict)
        developer2 = SystemInterface.add_developer(data_dict1)

        developer_list = SystemInterface.get_developers()
        
        self.assertEqual(developer_list[0].get("name").get("name"),
                             data_dict['name'])
        self.assertEqual(developer_list[1].get("name").get("name"),
                             data_dict1['name'])

 #+END_SRC


** Get IntegrationStatuss
#+NAME: class_get_integrationstatuss
#+begin_src python
    @staticmethod
    def get_integrationstatuss():
        integrationstatus_cls = System.delegate.entities['integrationstatus']
        try:
            current_app.logger.debug("getting integrationstatuss")
            integrationstatuss = integrationstatus_cls.get_all()
            intstatus_dict_list = []
            for intstatus in integrationstatuss:
                intstatus_x = intstatus.to_client()
                intstatus_dict_list.append(intstatus_x)
            current_app.logger.debug("got integrationstatuss")
            return  intstatus_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetIntigrationStatuss
 #+NAME: test_class_get_integrationstatuss
 #+BEGIN_SRC python
class TestGetIntegrationStatuss(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_integrationstatuss_in_system_interface(self):
        print "test_get_integrationstatuss_in_system_interface"

        data_dict = {'integration_level': 4,
                    'key' : KEY
                    }

        data_dict1 = {'integration_level': 2,
                     'key' : KEY
                     }

        intstatus1 = SystemInterface.add_integrationstatus(data_dict)
        intstatus2 = SystemInterface.add_integrationstatus(data_dict1)

        intstatus_list = SystemInterface.get_integrationstatuss()
        
        self.assertEqual(intstatus_list[0].get("integration_level"), data_dict['integration_level'])
        self.assertEqual(intstatus_list[1].get("integration_level"), data_dict1['integration_level'])

 #+END_SRC


** Get Lab By Id
#+NAME: class_get_lab_by_id
#+begin_src python
    @staticmethod
    def get_lab_by_id(id):
        lab_cls = System.delegate.entities['lab']
        try:
            current_app.logger.debug("getting lab by id")
            lab = lab_cls.get_by_id(id)
            if not lab:
                return ("No lab found with id: %s" % (id))

            return lab.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabById
 #+NAME: test_class_get_lab_by_id
 #+BEGIN_SRC python
class TestGetLabById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab_by_id_in_system_interface(self):
        print "test_get_lab_by_id_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)
       
        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset1 = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/icon.png',
                    }

        asset2 = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key': KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'sections': [],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE'
                   }

        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'array',
                    'lab_id': 'cse02',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'overview': 'overview',
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key': KEY,
                    'lab_name': 'stack',
                    'lab_id': 'cse03',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/icon.png'],
                    'overview': 'overview',
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        lab1 = SystemInterface.add_lab(data_dict)
        lab2 = SystemInterface.add_lab(data_dict1)

        lab_data_one = SystemInterface.get_lab_by_id(1)
        lab_data_two = SystemInterface.get_lab_by_id(2)
        
        self.assertEqual(lab_data_one.get("lab_name"), data_dict['lab_name'])
        self.assertEqual(lab_data_two.get("lab_name"), data_dict1['lab_name'])
        self.assertEqual(lab_data_one.get("lab_id"), 
                             data_dict['lab_id'])
        self.assertEqual(lab_data_two.get("lab_id"), 
                             data_dict1['lab_id'])

 #+END_SRC


** Get Section By Id

#+NAME: class_get_section_by_id
#+begin_src python
    @staticmethod
    def get_section_by_id(id):
        section_cls = System.delegate.entities['section']
        try:
            current_app.logger.debug("getting section by id")
            section = section_cls.get_by_id(id)
            if not section:
                return ("No section found with id: %s" % (id))

            return section.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetSectionById
 #+NAME: test_class_get_section_by_id
 #+BEGIN_SRC python
class TestGetSectionById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_section_by_id_in_system_interface(self):
        print "test_get_section_by_id_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name' : "Theory"
                   }

        data_dict1 = {
                    'key' : KEY,
                    'name' : "Quiz"
                   }

        section1 = SystemInterface.add_section(data_dict)
        section2 = SystemInterface.add_section(data_dict1)

        section_data_one = SystemInterface.get_section_by_id(1)
        section_data_two = SystemInterface.get_section_by_id(2)
        
        self.assertEqual(section_data_one.get("name"), data_dict['name'])
        self.assertEqual(section_data_two.get("name"), data_dict1['name'])

 #+END_SRC


** Get Experiment By Id
#+NAME: class_get_experiment_by_id
#+begin_src python
    @staticmethod
    def get_experiment_by_id(id):
        experiment_cls = System.delegate.entities['experiment']
        try:
            current_app.logger.debug("getting experiment by id")
            experiment = experiment_cls.get_by_id(id)
            if not experiment:
                return ("No experiment found with id: %s" % (id))

            return experiment.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetExperimentById
 #+NAME: test_class_get_experiment_by_id
 #+BEGIN_SRC python
class TestGetExperimentById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiment_by_id_in_system_interface(self):
        print "test_get_experiment_by_id_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict1 = {
                    'key' : KEY,
                    'inst_name': 'IIT Kharagpur',
                    'inst_id': 'IITKgp'
                    }

        institute1 = SystemInterface.add_institute(data_dict1)

        data_dict1 = {
                    'key' : KEY,
                    'dis_name': 'electronics and communication',
                    'dis_id': 'ECE'
                   }

        discipline1 = SystemInterface.add_discipline(data_dict1)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key': KEY,
                    'exp_name': 'array',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'exp_id': 'cse02',
                    'sections': [],
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key': KEY,
                    'exp_name': 'stack',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'exp_id': 'cse03',
                    'sections': [],
                    'inst_id': 'IITKgp',
                    'dis_id': 'ECE',
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        exp1 = SystemInterface.add_experiment(data_dict)
        exp2 = SystemInterface.add_experiment(data_dict1)

        exp_data_one = SystemInterface.get_experiment_by_id(1)
        exp_data_two = SystemInterface.get_experiment_by_id(2)
        
        self.assertEqual(exp_data_one.get("exp_name"), data_dict['exp_name'])
        self.assertEqual(exp_data_two.get("exp_name"), data_dict1['exp_name'])
        self.assertEqual(exp_data_one.get("exp_id"), data_dict['exp_id'])
        self.assertEqual(exp_data_two.get("exp_id"), data_dict1['exp_id'])
      
 #+END_SRC


** Get Institute By Id
#+NAME: class_get_institute_by_id
#+begin_src python
    @staticmethod
    def get_institute_by_id(id):
        institute_cls = System.delegate.entities['institute']
        try:
            current_app.logger.debug("getting institute by id")
            institute = institute_cls.get_by_id(id)
            if not institute:
                return ("No institute found with id: %s" % (id))

            return institute.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetInstituteById
 #+NAME: test_class_get_institute_by_id
 #+BEGIN_SRC python
class TestGetInstituteById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institute_by_id_in_system_interface(self):
        print "test_get_institute_by_id_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK',
                    }

        data_dict1 = {
                    'key' : KEY,
                    'inst_name': 'IIT Delhi',
                    'inst_id': 'IITD',
                    }

        inst1 = SystemInterface.add_institute(data_dict)
        inst2 = SystemInterface.add_institute(data_dict1)

        inst_data_one = SystemInterface.get_institute_by_id(1)
        inst_data_two = SystemInterface.get_institute_by_id(2)
        
        self.assertEqual(inst_data_one.get("inst_name"), data_dict['inst_name'])
        self.assertEqual(inst_data_two.get("inst_name"), data_dict1['inst_name'])
        self.assertEqual(inst_data_one.get("inst_id"), 
                             data_dict['inst_id'])
        self.assertEqual(inst_data_two.get("inst_id"), 
                             data_dict1['inst_id'])

 #+END_SRC


** Get Discipline By Id
#+NAME: class_get_discipline_by_id
#+begin_src python
    @staticmethod
    def get_discipline_by_id(id):
        discipline_cls = System.delegate.entities['discipline']
        try:
            current_app.logger.debug("getting discipline by id")
            discipline = discipline_cls.get_by_id(id)
            if not discipline:
                return ("No discipline found with id: %s" % (id))

            return discipline.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetDisciplineById
 #+NAME: test_class_get_discipline_by_id
 #+BEGIN_SRC python
class TestGetDisciplineById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_discipline_by_id_in_system_interface(self):
        print "test_get_discipline_by_id_in_system_interface"

        data_dict = {'dis_name': 'data structure',
                    'dis_id': 'cse01',
                    'key' : KEY
                   }

        data_dict1 = {'dis_name': "Automata",
                      'dis_id': 'DFA',
                      'key' : KEY
                     }

        dis = SystemInterface.add_discipline(data_dict)
        dis1 = SystemInterface.add_discipline(data_dict1)

        dis_data_one = SystemInterface.get_discipline_by_id(1)
        dis_data_two = SystemInterface.get_discipline_by_id(2)
        
        self.assertEqual(dis_data_one.get("dis_name"), data_dict["dis_name"])
        self.assertEqual(dis_data_two.get("dis_name"), data_dict1["dis_name"])
        self.assertEqual(dis_data_one.get("dis_id"), 
                             data_dict["dis_id"])
        self.assertEqual(dis_data_two.get("dis_id"), 
                             data_dict1["dis_id"])

 #+END_SRC


** Update Lab
#+NAME: class_update_lab
#+begin_src python
    @staticmethod
    def update_lab(data_dict):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=data_dict['key'])

        lab_id = str(data_dict['lab_id'])
        lab = System.do("get_lab", lab_id=lab_id)

        if 'lab_name' not in data_dict:
            lab_name=str(lab.get("lab_name"))
        else:
            lab_name=data_dict['lab_name']

        if 'overview' not in data_dict:
            overview=str(lab.get("overview"))
        else:
            overview=data_dict['overview']

        try:
            current_app.logger.debug("running operation update_lab")
            lab = System.do("update_lab", lab=lab,
                                    lab_name=lab_name, 
                                    overview=overview,
                                    session=session)
            current_app.logger.debug("completed operation update_lab")
            return lab.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateLab
 #+NAME: test_class_update_lab
 #+BEGIN_SRC python
class TestUpdateLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_lab_name_in_system_interface(self):
        print "test_update_lab_name_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key': KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                    }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)


        data_dict = {
                    'key': KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'sections' : [],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE'
                   }

        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse02',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'experiments': ['exp123'],
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'lab_name': 'Computer Programming',
                    'lab_id': 'cse02'
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.update_lab(data_dict1)
        
        self.assertEqual(lab1.get("lab_name"), data_dict1['lab_name'])
        self.assertEqual(lab1.get("lab_id"), data_dict['lab_id'])
        self.assertEqual(lab1.get("overview"), data_dict['overview'])

    def test_update_lab_overview_in_system_interface(self):
        print "test_update_lab_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                    }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key': KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'sections': [],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE'
                   }

        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {
                    'key': KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse02',
                    'overview': 'overview',
                    'integration_level': 4 ,
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'experiments': ['exp123'],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'overview': 'Computer Programming overview',
                    'lab_id': 'cse02'
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.update_lab(data_dict1)
        
        self.assertEqual(lab1.get("lab_id"), data_dict['lab_id'])
        self.assertEqual(lab1.get("lab_name"), data_dict['lab_name'])
        self.assertEqual(lab1.get("overview"), data_dict1['overview'])

 #+END_SRC


** Update Experiment
#+NAME: class_update_experiment
#+begin_src python
    @staticmethod
    def update_experiment(data_dict):
        session_cls = System.delegate.entities['session']
        exp_cls = System.delegate.entities['experiment']
        institute_cls = System.delegate.entities['institute']
        discipline_cls = System.delegate.entities['discipline']

        session = session_cls(key=str(data_dict['key']))
        exp_id = str(data_dict['exp_id'])
        experiment = System.do("get_experiment", exp_id=exp_id)
        if 'exp_name' not in data_dict:
            exp_name=str(experiment.get("exp_name"))
        else:
            exp_name=data_dict['exp_name']

        exp_id=str(data_dict['exp_id'])

        if 'overview' not in data_dict:
            overview=str(experiment.get("overview"))
        else:
            overview=data_dict['overview']

        try:
            current_app.logger.debug("running operation update_experiment")
            exp = System.do("update_experiment", exp_name=exp_name, 
                                    experiment=experiment,
                                    overview=overview,
                                    session=session)
            current_app.logger.debug("completed operation update_experiment")
            return exp.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateExperiment
 #+NAME: test_class_update_Experiment
 #+BEGIN_SRC python
class TestUpdateExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_experiment_name_in_system_interface(self):
        print "test_update_experiment_name_in_system_interface"


        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key': KEY,
                    'exp_name': 'Data Structures',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'sections': [],
                    'exp_id': 'cse02',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        exp = SystemInterface.add_experiment(data_dict)

        data_dict1 = {
                    'key' : KEY,
                    'exp_id': 'cse02',
                    'exp_name': 'arrays'
                   }
      
        exp1 = SystemInterface.update_experiment(data_dict1)
        
        self.assertEqual(exp1.get("exp_name"), data_dict1['exp_name'])

 #+END_SRC


** Update Institute
#+NAME: class_update_institute
#+begin_src python       
    @staticmethod
    def update_institute(data_dict):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=data_dict['key'])

        inst_id = str(data_dict['inst_id'])
        institute = System.do("get_institute", inst_id=inst_id)

        if 'inst_name' not in data_dict:
            inst_name=str(inst.get("inst_name"))
        else:
            inst_name=data_dict['inst_name']

        try:
            current_app.logger.debug("running operation update_institute")
            institute = System.do("update_institute", institute=institute,
                                    inst_name=inst_name, 
                                    session=session)
            current_app.logger.debug("completed operation update_institute")
            return institute.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateInstitute 
 #+NAME: test_class_update_Institute
 #+BEGIN_SRC python
class TestUpdateInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_institute_name_in_system_interface(self):
        print "test_update_institute_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK',
                    'overview' : 'overview'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'inst_name': 'IIT Delhi',
                    'inst_id': 'IITK'
                   }

        institute = SystemInterface.add_institute(data_dict)
        institute1 = SystemInterface.update_institute(data_dict1)
        
        self.assertEqual(institute1.get("inst_name"), data_dict1['inst_name'])

 #+END_SRC


** Update Section
#+NAME: class_update_section
#+begin_src python
    @staticmethod
    def update_section(data_dict):
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']

        session = session_cls(key=data_dict['key'])
        section = section_cls.get_by_id(data_dict['s_id'])

        if 'name' not in data_dict:
            name=str(section.get("name"))
        else:
            name=data_dict['name']

        try:
            current_app.logger.debug("running operation update_section")
            section = System.do("update_section", section=section, name=name,\
                                             session=session)
            current_app.logger.debug("completed operation update_section")
            return section.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateSection
 #+NAME: test_class_update_Section
 #+BEGIN_SRC python
class TestUpdateSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_section_name_in_system_interface(self):
        print "test_update_section_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name': 'Theory'
                   }

        data_dict1 = {
                    'key' : KEY,
                    's_id': 1,
                    'name': 'Quiz'
                   }

        section = SystemInterface.add_section(data_dict)
        section1 = SystemInterface.update_section(data_dict1)
        
        self.assertEqual(section1.get("name"), data_dict1['name'])

 #+END_SRC


** Update Discipline
#+NAME: class_update_discipline
#+begin_src python       
    @staticmethod
    def update_discipline(data_dict):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=data_dict['key'])

        dis_id = str(data_dict['dis_id'])
        discipline = System.do("get_discipline", dis_id=dis_id)

        if "dis_name" not in data_dict:
            dis_name=str(discipline.get("dis_name"))
        else:
            dis_name=data_dict["dis_name"]

        try:
            current_app.logger.debug("running operation update_discipline")
            discipline = System.do("update_discipline", discipline=discipline,
                                    dis_name=dis_name, 
                                    session=session)
            current_app.logger.debug("completed operation update_discipline")
            return discipline.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateDiscipline 
 #+NAME: test_class_update_Discipline
 #+BEGIN_SRC python
class TestUpdateDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_discipline_name_in_system_interface(self):
        print "test_update_discipline_name_in_system_interface"

        data_dict = {'dis_name': 'Computer Science',
                    'dis_id': 'CSE',
                    'key' : KEY
                   }

        data_dict1 = {'dis_name': 'Computer Science and Engineering',
            'dis_id': 'CSE',
            'key' : KEY
           }
        dis1 = SystemInterface.add_discipline(data_dict)
        dis = SystemInterface.update_discipline(data_dict1)
        
        self.assertEqual(dis.get("dis_name"), data_dict1['dis_name'])

 #+END_SRC


** Update HostingInfo
#+NAME: class_update_hostinginfo
#+begin_src python       
    @staticmethod
    def update_hostinginfo(data_dict):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=data_dict['key'])

        hosted_url = str(data_dict['hosted_url'])
        hostinginfo = System.do("get_hostinginfo", hosted_url=hosted_url)

        if 'hosting_status' not in data_dict:
            hosting_status=str(hostinginfo.get("hosting_status"))
        else:
            hosting_status=data_dict['hosting_status']

        if 'hosted_on' not in data_dict:
            hosted_on=str(hostinginfo.get("hosted_on"))
        else:
            hosted_on=data_dict['hosted_on']

        try:
            current_app.logger.debug("running operation update_hostinginfo")
            hostinginfo = System.do("update_hostinginfo", hostinginfo=hostinginfo,
                                    hosting_status=hosting_status, hosted_on=hosted_on,
                                    session=session)
            current_app.logger.debug("completed operation update_hostinginfo")
            return hostinginfo.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateHostingInfo
 #+NAME: test_class_update_hostinginfo
 #+BEGIN_SRC python
class TestUpdateHostingInfo(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_hostinginfo_in_system_interface(self):
        print "test_update_hostinginfo_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'hosting_status': 'not hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'server'
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)
        hostinginfo1 = SystemInterface.update_hostinginfo(data_dict1)
        
        self.assertEqual(hostinginfo1.get("hosting_status"), data_dict1['hosting_status'])
        self.assertEqual(hostinginfo1.get("hosted_on"), data_dict1['hosted_on'])

 #+END_SRC


** Update Developer
#+NAME: class_update_developer
#+begin_src python
    @staticmethod
    def update_developer(data_dict):
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']
        email_cls = System.delegate.entities['email']
        developer_cls = System.delegate.entities['developer']

        session = session_cls(key=str(data_dict['key']))
        email = email_cls(email=data_dict['email'])
        developer = System.do("get_developer", email=email)

        if 'name' not in data_dict:
            name=str(developer.get("name"))
        else:
            name=name_cls(name=str(data_dict['name']))

        try:
            current_app.logger.debug("running operation update_developer")
            developer = System.do("update_developer", name=name,
                                      developer=developer,
                                      session=session)
            current_app.logger.debug("completed operation update_developer")
            return developer

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateDeveloper
 #+NAME: test_class_update_Developer
 #+BEGIN_SRC python
class TestUpdateDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_developer_name_in_system_interface(self):
        print "test_update_developer_name_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaraja',
                    'email': 'dharamaraj@gmail.com'
                   }

        data_dict1 = {
                    'key': KEY,
                    'email': 'dharamaraj@gmail.com',
                    'name': 'Prof. Raja'
                   }

        developer = SystemInterface.add_developer(data_dict)
        developer1 = SystemInterface.update_developer(data_dict1)

        self.assertEqual(developer1.get("name").get("name"),
                             data_dict1['name'])

 #+END_SRC

 
** Delete Lab
#+NAME: class_delete_lab
#+begin_src python
    @staticmethod
    def delete_lab(lab_id, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))
        try:
            current_app.logger.debug("running operation delete_lab")
            lab = System.do("delete_lab", lab_id=str(lab_id), session=session)
            current_app.logger.debug("completed operation delete_lab")
            return lab
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteLab
 #+NAME: test_class_delete_lab
 #+BEGIN_SRC python
class TestDeleteLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_lab_in_system_interface(self):
        print "test_delete_lab_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                    }

        asset1 = SystemInterface.add_asset(data_dict)


        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/icon.png',
                    }

        asset2 = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key': KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview', 
                    'sections': [],
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'sections': [],
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        experiment = SystemInterface.add_experiment(data_dict)      

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse01',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'overview': 'overview',
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'lab_name': 'Computer Programming',
                    'lab_id': 'cse02',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/icon.png'],
                    'overview': 'overview',
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)
        lab_id = SystemInterface.delete_lab("cse02", KEY)
        
        self.assertEqual(lab_id, "cse02")

 #+END_SRC


** Delete Experiment
#+NAME: class_delete_experiment
#+begin_src python
    @staticmethod
    def delete_experiment(exp_id, key):
        session_cls = System.delegate.entities['session']

        session = session_cls(key=str(key))
        try:
            current_app.logger.debug("running operation delete_experiment")
            exp = System.do("delete_experiment", exp_id=str(exp_id),
                                    session=session)
            current_app.logger.debug("completed operation delete_experiment")
            return exp
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteExperiment 
 #+NAME: test_class_delete_experiment
 #+BEGIN_SRC python
class TestDeleteExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_experiment_in_system_interface(self):
        print "test_delete_experiment_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'exp_name': 'Data Structures',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'exp_id': 'cse01',
                    'sections': [],
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key': KEY,
                    'exp_name': 'Computer Programming',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'exp_id': 'cse02',
                    'sections':[],
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        exp = SystemInterface.add_experiment(data_dict)
        exp1 = SystemInterface.add_experiment(data_dict1)
        exp_id = SystemInterface.delete_experiment('cse02', KEY)
        
        self.assertEqual(exp_id, 'cse02')

 #+END_SRC


** Delete Institute
#+NAME: class_delete_institute
#+begin_src python
    @staticmethod
    def delete_institute(inst_id, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))

        try:
            current_app.logger.debug("running operation delete_institute")
            institute_id = System.do("delete_institute", inst_id=str(inst_id),
                                      session=session)
            current_app.logger.debug("completed operation delete_institute")
            return institute_id
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteInstitute 
 #+NAME: test_class_delete_institute
 #+BEGIN_SRC python
class TestDeleteInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_institute_in_system_interface(self):
        print "test_delete_institute_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'inst_name': 'IIT Kharagpur',
                    'inst_id': 'IITKgp'
                     }

        institute = SystemInterface.add_institute(data_dict)
        institute1 = SystemInterface.add_institute(data_dict1)
        inst_id = SystemInterface.delete_institute("IITKgp", KEY)
        
        self.assertEqual(inst_id, "IITKgp")

 #+END_SRC


** Delete Section
#+NAME: class_delete_section
#+begin_src python
    @staticmethod
    def delete_section(s_id):
        session_cls = System.delegate.entities['session']

        session = session_cls(key=KEY)
        try:
            current_app.logger.debug("running operation delete_section")
            section = System.do("delete_section", s_id=int(s_id),
                                    session=session)
            current_app.logger.debug("completed operation delete_section")
            return section
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteSection
 #+NAME: test_class_delete_section
 #+BEGIN_SRC python
class TestDeleteSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_section_in_system_interface(self):
        print "test_delete_section_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name': 'Quiz'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'name' : 'Theory'
                   }

        exp = SystemInterface.add_section(data_dict)
        exp1 = SystemInterface.add_section(data_dict1)
        s_id = SystemInterface.delete_section(1)
        
        self.assertEqual(s_id, 1)

 #+END_SRC


** Delete Discipline
#+NAME: class_delete_discipline
#+begin_src python       
    @staticmethod
    def delete_discipline(dis_id, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))

        try:
            current_app.logger.debug("running operation delete_discipline")
            discipline_id = System.do("delete_discipline", dis_id=str(dis_id),
                                    session=session)
            current_app.logger.debug("completed operation delete_discipline")
            return discipline_id
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteDiscipline 
 #+NAME: test_class_delete_Discipline
 #+BEGIN_SRC python
class TestDeleteDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_discipline_name_in_system_interface(self):
        print "test_update_discipline_name_in_system_interface"

        data_dict = {'dis_name': 'Computer Science',
                    'dis_id': 'CSE',
                    'key' : KEY
                   }

        dis1 = SystemInterface.add_discipline(data_dict)
        dis_id = SystemInterface.delete_discipline('CSE', KEY)
        
        self.assertEqual(dis_id, data_dict['dis_id'])

 #+END_SRC


** Delete HostingInfo
#+NAME: class_delete_hostinginfo
#+begin_src python
    @staticmethod
    def delete_hostinginfo(hosted_url, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))

        try:
            current_app.logger.debug("running operation delete_hostinginfo")
            hostinginfo_id = System.do("delete_hostinginfo", hosted_url=str(hosted_url),
                                      session=session)
            current_app.logger.debug("completed operation delete_hostinginfo")
            return hostinginfo_id
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteHostedInfo
 #+NAME: test_class_delete_hostinginfo
 #+BEGIN_SRC python
class TestDeleteHostingInfo(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_hostinginfo_in_system_interface(self):
        print "test_delete_hostinginfo_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'hosting_status': 'not hosted',
                    'hosted_url': 'http://cse12-iiith.vlabs.ac.in',
                    'hosted_on': 'server'
                     }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)
        hostinginfo1 = SystemInterface.add_hostinginfo(data_dict1)
        hosted_url = SystemInterface.delete_hostinginfo("http://cse14-iiith.vlabs.ac.in", KEY)
        
        self.assertEqual(hosted_url, "http://cse14-iiith.vlabs.ac.in")

 #+END_SRC


** Delete Name
#+NAME: class_delete_name
#+begin_src python
    @staticmethod
    def delete_name(name, key):
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']

        session = session_cls(key=str(key))
        name = name_cls(name=str(name))
        try:
            current_app.logger.debug("running operation delete_name")
            name = System.do("delete_name", name=name, session=session)
            current_app.logger.debug("completed operation delete_name")
            return name
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteName
 #+NAME: test_class_delete_name
 #+BEGIN_SRC python
class TestDeleteName(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_name_in_system_interface(self):
        print "test_delete_name_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaraja'
                   }

        data_dict1 = {
                    'key': KEY,
                    'name' : 'Prof. Raja'
                   }

        name = SystemInterface.add_name(data_dict)
        name1 = SystemInterface.add_name(data_dict1)
        name_id = SystemInterface.delete_name(data_dict1['name'],
                                                  data_dict1['key'])

        self.assertEqual(name_id.get("name"), data_dict1["name"])

 #+END_SRC


** Delete Email
#+NAME: class_delete_email
#+begin_src python
    @staticmethod
    def delete_email(email, key):
        session_cls = System.delegate.entities['session']
        email_cls = System.delegate.entities['email']

        session = session_cls(key=str(key))
        email = email_cls(email=str(email))

        try:
            current_app.logger.debug("running operation delete_email")
            email = System.do("delete_email", email=email,
                                    session=session)
            current_app.logger.debug("completed operation delete_email")
            return email
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteEmail
 #+NAME: test_class_delete_email
 #+BEGIN_SRC python
class TestDeleteEmail(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_email_in_system_interface(self):
        print "test_delete_email_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'email': 'abc@gmail.com'
                   }

        data_dict1 = {
                    'key': KEY,
                    'email' : 'xyz@gmail.com'
                   }

        email = SystemInterface.add_email(data_dict)
        email1 = SystemInterface.add_email(data_dict1)
        email_id = SystemInterface.delete_email(data_dict1['email'],
                                                data_dict1['key'])

        self.assertEqual(email_id.get("email"), data_dict1["email"])

 #+END_SRC


** Delete Developer
#+NAME: class_delete_developer
#+begin_src python
    @staticmethod
    def delete_developer(email, key):
        session_cls = System.delegate.entities['session']
        email_cls = System.delegate.entities['email']

        session = session_cls(key=str(key))
        email = email_cls(email=str(email))

        try:
            current_app.logger.debug("running operation delete_developer")
            developer = System.do("delete_developer", email=email,
                                    session=session)
            current_app.logger.debug("completed operation delete_developer")
            return developer

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteDeveloper
 #+NAME: test_class_delete_developer
 #+BEGIN_SRC python
class TestDeleteDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_developer_in_system_interface(self):
        print "test_delete_developer_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharmaraj',
                    'email': 'abc@gmail.com'
                   }

        data_dict1 = {
                    'key': KEY,
                    'name' : 'Prof. Raja',
                    'email': 'xyz@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)
        developer1 = SystemInterface.add_developer(data_dict1)
        dev = SystemInterface.delete_developer(data_dict['email'],
                                                      data_dict['key'])
        
        self.assertEqual(dev.get("email"), data_dict['email'])

 #+END_SRC


** Delete IntegrationStatus
#+NAME: class_delete_integrationstatus
#+begin_src python
    @staticmethod
    def delete_integrationstatus(integration_level, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))

        try:
            current_app.logger.debug("running operation delete_integrationstatus")
            integrationstatus_id = System.do("delete_integrationstatus", 
                                      integration_level=int(integration_level),
                                      session=session)
            current_app.logger.debug("completed operation delete_integrationstatus")
            return integrationstatus_id

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteIntegrationStatus
 #+NAME: test_class_delete_integrationstatus
 #+BEGIN_SRC python
class TestDeleteIntegrationStatus(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_integrationstatus_in_system_interface(self):
        print "test_delete_integrationstatus_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        data_dict1 = {
                    'key' : KEY,
                    'integration_level': 2
                     }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)
        integrationstatus1 = SystemInterface.add_integrationstatus(data_dict1)
        integration_level = SystemInterface.delete_integrationstatus(2, KEY)
        
        self.assertEqual(integration_level, 2)

 #+END_SRC


** Get Institute by InstituteId
#+NAME: class_get_institute_by_inst_id
#+begin_src python
    @staticmethod
    def get_institute(inst_id):
        session_cls = System.delegate.entities['session']
        try:
            current_app.logger.debug("running operation get_institute_by_inst_id")
            institute = System.do("get_institute", inst_id=str(inst_id))
            current_app.logger.debug("completed operation get_institute_by_inst_id")
            if not institute:
                return ("No institute found with instituteid: %s" % (inst_id))
            return institute.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetInstituteByInstituteId
 #+NAME: test_class_get_institute_by_instituteid
 #+BEGIN_SRC python
class TestGetInstituteByInstituteId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institute_by_instituteid_in_system_interface(self):
        print "test_get_institute_by_instituteid_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Delhi',
                    'inst_id': 'IITD'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK',
                    }

        institute = SystemInterface.add_institute(data_dict)
        institute1 = SystemInterface.add_institute(data_dict1)

        institute = SystemInterface.get_institute(data_dict['inst_id'])
        institute1 = SystemInterface.get_institute(data_dict1['inst_id'])
        
        self.assertEqual(institute.get("inst_id"), data_dict['inst_id'])
        self.assertEqual(institute1.get("inst_id"), data_dict1['inst_id'])

 #+END_SRC


** Get Lab by LabId
#+NAME: class_get_lab_by_lab_id
#+begin_src python
    @staticmethod
    def get_lab(lab_id):
        try:
            current_app.logger.debug("running operation get_lab_by_lab_id")
            lab = System.do("get_lab", lab_id=str(lab_id))
            current_app.logger.debug("completed operation get_lab_by_lab_id")
            if not lab:
                return ("No lab found with labid: %s" % (lab_id))
            return lab.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabByLabId
 #+NAME: test_class_get_lab_by_labid
 #+BEGIN_SRC python
class TestGetLabByLabId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab_by_labid_in_system_interface(self):
        print "test_get_lab_by_labid_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                    }
        asset1 = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/icon.png',
                    }

        asset2 = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key': KEY,
                    'exp_name': 'arrays',
                    'exp_id': 'exp123',
                    'overview': 'overview',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'sections': [],
                    'developers': ['abc@gmail.com'],
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse01',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/logo.png'],
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'lab_name': 'Computer Programming',
                    'lab_id': 'cse02',
                    'overview': 'overview',
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'assets': ['vlabs.ac.in/images/static/icon.png'],
                    'experiments': ['exp123'], 
                    'integration_level': 4,
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)

        lab = SystemInterface.get_lab(data_dict['lab_id'])
        lab1 = SystemInterface.get_lab(data_dict1['lab_id'])
        
        self.assertEqual(lab.get("lab_id"), data_dict['lab_id'])
        self.assertEqual(lab1.get("lab_id"), data_dict1['lab_id'])

 #+END_SRC


** Get Experiment by ExpId
#+NAME: class_get_lab_by_exp_id
#+begin_src python
    @staticmethod
    def get_experiment(exp_id):
        try:
            current_app.logger.debug("running operation get_lab_by_exp_id")
            exp = System.do("get_experiment", exp_id=str(exp_id))
            current_app.logger.debug("completed operation get_lab_by_exp_id")
            if not exp:
                return ("No exp found with expid: %s" % (exp_id))
            return exp.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetExpByExpId
 #+NAME: test_class_get_exp_by_expid
 #+BEGIN_SRC python
class TestGetExpByExpId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_exp_by_expid_in_system_interface(self):
        print "test_get_exp_by_expid_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'inst_name': 'IIT Kanpur',
                    'inst_id': 'IITK'
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'dis_name': 'computer science',
                    'dis_id': 'CSE'
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hostinginfo = SystemInterface.add_hostinginfo(data_dict)

        data_dict = {
                    'exp_name': 'Number Systems',
                    'exp_id': 'EE99777',
                    'overview': 'This is linked list experiment',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'sections': [],
                    'key': KEY,
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        data_dict1 = {
                    'exp_name': 'Binary Systems',
                    'exp_id': 'EE99778',
                    'overview': 'This is linked list experiment',
                    'assets': ['vlabs.ac.in/images/static/logo.png'], 
                    'integration_level': 4,
                    'sections': [],
                    'key': KEY,
                    'inst_id': 'IITK',
                    'dis_id': 'CSE',
                    'developers': ['abc@gmail.com'],
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in'
                   }

        exp = SystemInterface.add_experiment(data_dict)
        exp1 = SystemInterface.add_experiment(data_dict1)

        exp = SystemInterface.get_experiment(data_dict['exp_id'])
        exp1 = SystemInterface.get_experiment(data_dict1['exp_id'])
        
        self.assertEqual(exp.get("exp_id"), data_dict['exp_id'])
        self.assertEqual(exp1.get("exp_id"), data_dict1['exp_id'])

 #+END_SRC


** Get Discipline by DisId
#+NAME: class_get_discipline_by_dis_id
#+begin_src python
    @staticmethod
    def get_discipline(dis_id):
        try:
            current_app.logger.debug("running operation get_discipline_by_dis_id")
            dis = System.do("get_discipline", dis_id=str(dis_id))
            current_app.logger.debug("completed operation get_institute_by_inst_id")
            if not dis:
                return ("No discipline found with disid: %s" % (dis_id))
            return dis.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetDisciplineByDisId
 #+NAME: test_class_get_discipline_by_disid
 #+BEGIN_SRC python
class TestGetDisciplineByDisciplineId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_discipline_by_disid_in_system_interface(self):
        print "test_get_discipline_by_disid_in_system_interface"

        data_dict = {'dis_name': 'Computer Science',
                    'dis_id': 'CSE',
                    'key' : KEY
                   }

        data_dict1 = {'dis_name': 'Electronics',
                    'dis_id': 'ECE',
                    'key' : KEY
                   }

        dis = SystemInterface.add_discipline(data_dict)
        dis1 = SystemInterface.add_discipline(data_dict1)

        dis = SystemInterface.get_discipline(data_dict['dis_id'])
        dis1 = SystemInterface.get_discipline(data_dict1['dis_id'])
        
        self.assertEqual(dis.get("dis_id"), data_dict['dis_id'])
        self.assertEqual(dis1.get("dis_id"), data_dict1['dis_id'])

 #+END_SRC


** Get Developer by email
#+NAME: class_get_developer_by_email
#+begin_src python
    @staticmethod
    def get_developer(email_id):
        try:
            email_cls = System.delegate.entities['email']
            email = email_cls(email=str(email_id))

            current_app.logger.debug("running operation get_lab_by_lab_id")
            developer = System.do("get_developer", email=email)
            current_app.logger.debug("completed operation get_lab_by_lab_id")
            if not developer:
                return ("No Developer found with email: %s" % (email_id))
            return developer.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetDeveloperByEmail
 #+NAME: test_class_get_developer_by_email
 #+BEGIN_SRC python
class TestGetDeveloperByEmail(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_developer_by_email_in_system_interface(self):
        print "test_get_developer_by_email_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        developer = SystemInterface.get_developer(data_dict['email'])
        
        self.assertEqual(developer.get("email").get("email"), 
                             data_dict['email'])
 #+END_SRC


** Get IntegrationStatus by IL
#+NAME: class_get_integrationstatus_by_IL
#+begin_src python
    @staticmethod
    def get_integrationstatus_by_IL(integration_level):
        try:
            current_app.logger.debug("running operation get_integrationstatus_by_integration_level")
            integrationstatus_id = System.do("get_integrationstatus_by_IL", 
                                      integration_level=int(integration_level))
            current_app.logger.debug("completed operation get_integrationstatus_by_integration_level")
            return integrationstatus_id

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetIntegrationStatusByIL
 #+NAME: test_class_get_integrationstatus_by_IL
 #+BEGIN_SRC python
class TestGetIntegrationStatusByIL(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_integrationstatus_by_IL_in_system_interface(self):
        print "test_get_integrationstatus_by_IL_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        data_dict1 = {
                    'key' : KEY,
                    'integration_level': 2
                     }

        integrationstatus = SystemInterface.add_integrationstatus(data_dict)
        integrationstatus1 = SystemInterface.add_integrationstatus(data_dict1)
        integration_status = SystemInterface.get_integrationstatus_by_IL(2)
        
        self.assertEqual(integration_status.get("integration_level"), 2)

 #+END_SRC


** Add Asset
#+NAME: class_add_asset
#+begin_src python
    @staticmethod
    def add_asset(data_dict):
        session_cls = System.delegate.entities['session']       
        asset_cls = System.delegate.entities['asset']

        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        asset = asset_cls(asset_type=str(data_dict['asset_type']),
                                  path=str(data_dict['path']))

        try:
            current_app.logger.debug("running operation add_asset")
            asset = System.do("add_asset", asset=asset,
                                    session=session)
            current_app.logger.debug("completed operation add_asset")
            return asset.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddAsset 
#+NAME: test_class_add_asset
#+BEGIN_SRC python
class TestAddAsset(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_asset_in_system_interface(self):
        print "test_add_asset_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/static/images/icon.png'
                    }

        asset = SystemInterface.add_asset(data_dict)
        asset_cls = System.delegate.entities['asset']
        asset = asset_cls.get_all()[0]

        self.assertEqual(asset.get("asset_type"), 
                             data_dict['asset_type'])
        self.assertEqual(asset.get("path"), data_dict['path'])
        
#+END_SRC


** Update Asset
#+NAME: class_update_asset
#+begin_src python       
    @staticmethod
    def update_asset(data_dict):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=data_dict['key'])

        path = str(data_dict['path'])
        asset = System.do("get_asset", path=path)

        if 'asset_type' not in data_dict:
            asset_type=str(asset.get("asset_type"))
        else:
            asset_type=data_dict['asset_type']

        try:
            current_app.logger.debug("running operation update_asset")
            asset = System.do("update_asset", asset=asset,
                                    asset_type=asset_type, 
                                    session=session)
            current_app.logger.debug("completed operation update_asset")
            return asset.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src
*** TestUpdateAsset 
#+NAME: test_class_update_asset
#+BEGIN_SRC python
class TestUpdateAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_asset_name_in_system_interfaceinterface(self):
        print "test_update_asset_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/static/images/logo.png'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'asset_type': 'Video', 
                    'path': 'vlabs.ac.in/static/images/logo.png'
                    }

        asset = SystemInterface.add_asset(data_dict)
        asset1 = SystemInterface.update_asset(data_dict1)
        
        self.assertEqual(asset1.get("asset_type"), data_dict1['asset_type'])

#+END_SRC


** Delete Asset
#+NAME: class_delete_asset
#+begin_src python
    @staticmethod
    def delete_asset(path, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))

        try:
            current_app.logger.debug("running operation delete_asset")
            asset_path = System.do("delete_asset", path=str(path),
                                      session=session)
            current_app.logger.debug("completed operation delete_asset")
            return asset_path
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteAsset 
#+NAME: test_class_delete_asset
#+BEGIN_SRC python
class TestDeleteAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_asset_in_system_interface(self):
        print "test_delete_asset_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/static/images/logo.png'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'asset_type': 'Video',
                    'path': 'vlabs.ac.in/static/images/icon.png'
                    }

        asset = SystemInterface.add_asset(data_dict)
        asset1 = SystemInterface.add_asset(data_dict1)
        path = SystemInterface.delete_asset("vlabs.ac.in/static/images/icon.png", KEY)
        
        self.assertEqual(path, "vlabs.ac.in/static/images/icon.png")

#+END_SRC


** Get Assets
#+NAME: class_get_assets
#+begin_src python
    @staticmethod
    def get_assets():
        asset_cls = System.delegate.entities['asset']
        try:
            current_app.logger.debug("getting assets")
            assets = asset_cls.get_all()
            asset_dict_list = []
            for asset in assets:
                asset_x = asset.to_client()
                asset_dict_list.append(asset_x)
            current_app.logger.debug("got assets")
            return  asset_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.system.system import *
import datetime
from flask import current_app
from runtime.config.system_config import KEY

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.system.system_interface import *
from runtime.config.system_config import KEY
from flask import current_app
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC

    
* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle system_interface.py :eval no :noweb yes
<<imports_for_sources>>
<<class_system_interface>>

<<class_add_lab>>
<<class_add_section>>
<<class_add_experiment>>
<<class_add_institute>>
<<class_add_discipline>>
<<class_add_name>>
<<class_add_email>>
<<class_add_developer>>
<<class_get_labs>>
<<class_add_hostinginfo>>
<<class_add_integrationstatus>>

<<class_get_lab_by_id>>
<<class_get_section_by_id>>
<<class_get_institute_by_id>>
<<class_get_experiment_by_id>>
<<class_get_discipline_by_id>>
<<class_get_developer_by_email>>
<<class_get_integrationstatus_by_IL>>
<<class_delete_lab>>
<<class_delete_discipline>>
<<class_delete_institute>>
<<class_delete_experiment>>
<<class_delete_section>>
<<class_delete_discipline>>
<<class_delete_hostinginfo>>
<<class_delete_integrationstatus>>

<<class_update_lab>>
<<class_update_institute>>
<<class_update_Section>>
<<class_update_experiment>>
<<class_update_discipline>>
<<class_update_hostinginfo>>
<<class_update_asset>>

<<class_get_labs>>
<<class_get_experiments>>
<<class_get_institutes>>
<<class_get_disciplines>>
<<class_get_hostinginfos>>
<<class_get_integrationstatuss>>

<<class_get_lab_by_lab_id>>
<<class_get_lab_by_exp_id>>
<<class_get_institute_by_inst_id>>
<<class_get_discipline_by_dis_id>>
<<class_get_labs_by_institute>>
<<class_get_labs_by_lab_name>>
<<class_get_labs_by_discipline>>

<<class_get_sections>>
<<class_update_developer>>
<<class_get_names>>
<<class_get_emails>>
<<class_get_developers>>
<<class_delete_name>>
<<class_delete_email>>
<<class_delete_developer>>
<<class_add_asset>>
<<class_update_asset>>
<<class_delete_asset>>
<<class_get_assets>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_system_interface.py :eval no :noweb yes
<<imports_for_tests>>

<<test_class_add_lab>>
<<test_class_add_experiment>>
<<test_class_add_institute>>
<<test_class_add_discipline>>
<<test_class_add_section>>
<<test_class_add_name>>
<<test_class_add_email>>
<<test_class_add_developer>>
<<test_class_add_hostinginfo>>
<<test_class_add_integrationstatus>>

<<test_class_delete_lab>>
<<test_class_delete_experiment>>
<<test_class_delete_institute>>
<<test_class_delete_section>>
<<test_class_delete_Discipline>>
<<test_class_delete_hostinginfo>>
<<test_class_delete_integrationstatus>>

<<test_class_get_labs>>
<<test_class_get_sections>>
<<test_class_get_experiments>>
<<test_class_get_institutes>>
<<test_class_get_disciplines>>
<<test_class_get_hostinginfos>>
<<test_class_get_integrationstatuss>>


<<test_class_get_lab_by_id>>
<<test_class_get_experiment_by_id>>
<<test_class_get_institute_by_id>>
<<test_class_get_section_by_id>>

<<test_class_update_lab>>
<<test_class_update_experiment>>
<<test_class_update_institute>>
<<test_class_update_Section>>
<<test_class_update_Discipline>>
<<test_class_update_hostinginfo>>

<<test_class_get_lab_by_labid>>
<<test_class_get_labs_by_institute>>
<<test_class_get_labs_by_lab_name>>
<<test_class_get_labs_by_discipline>>

<<test_class_update_developer>>
<<test_class_get_names>>
<<test_class_get_emails>>
<<test_class_get_developers>>
<<test_class_delete_name>>
<<test_class_delete_email>>
<<test_class_delete_developer>>
<<test_class_get_exp_by_expid>>
<<test_class_get_institute_by_instituteid>>
<<test_class_get_discipline_by_disid>>
<<test_class_get_developer_by_email>>
<<test_class_get_integrationstatus_by_IL>>
<<test_class_add_asset>>
<<test_class_update_asset>>
<<test_class_delete_asset>>
<<test_class_get_assets>>
<<run_test_cases>>

#+end_src
 

