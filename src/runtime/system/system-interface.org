#+TITLE: System Interface implementation for Feedback Portal
#+AUTHOR: VLEAD
#+DATE: [2016-07-22 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  System Interface is the glue that between the =rest= and =system=.  The world
  of =rest= uses =json= and the world of =system= uses objects.  System
  Interface is allows these two worlds to talk to each other. 

  
* The =SystemInterface= class

** Constructor

#+NAME: class_system_interface
#+begin_src python
class SystemInterface ():

    def __init__(self):
        raise Error('Can not instantiate')

    @staticmethod
    def initialize(cls):
        System.initialize_system(cls)

#+end_src

** AddLab

#+NAME: class_add_lab
#+begin_src python
    @staticmethod
    def add_lab(data_dict):
        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']

        session = session_cls(key=data_dict['key'])
        lab = lab_cls(lab_name=data_dict['lab_name'],
                                lab_id=data_dict['lab_id'])
        try:
            current_app.logger.debug("running operation add_lab")
            question = System.do("add_lab", lab=lab, 
                                    session=session)
            current_app.logger.debug("completed operation add_lab")
            return lab.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err


#+end_src

*** TestAddLab
 #+NAME: test_class_add_lab
 #+BEGIN_SRC python
class TestAddLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_lab_in_system_interface(self):
        print "test_add_lab_in_system_interface"

        data_dict = {'lab_name': 'data structure',
                    'lab_id': 'cse01',
                    'key' : KEY
                   }

        data_dict1 = {'lab_name': "Automata",
            'lab_id': 'DFA',
            'key' : KEY
           }


        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)
        
        self.assertEqual(lab.get("lab_id"), 
                             data_dict['lab_id'])
        self.assertEqual(lab.get("lab_name"), data_dict['lab_name'])
        self.assertEqual(lab1.get("lab_id"), 
                             data_dict1['lab_id'])
        self.assertEqual(lab1.get("lab_name"), data_dict1['lab_name'])


    def test_add_lab_raises_type_error_in_system_interface(self):
        print "test_add_lab_raises_type_error_in_system_interface"

        data_dict = {'lab_name': 'data structure',
                    'lab_id': 123,
                    'key' : KEY
                   }

        with self.assertRaises(TypeError):
            SystemInterface.add_lab(data_dict)

 #+END_SRC

** GetLabs

#+NAME: class_get_labs
#+begin_src python
    @staticmethod
    def get_labs():
        lab_cls = System.delegate.entities['lab']
        try:
            current_app.logger.debug("getting labs")
            labs = lab_cls.get_all()
            lab_dict_list = []
            for lab in labs:
                lab_x = lab.to_client()
                lab_dict_list.append(lab_x)
            current_app.logger.debug("got labs")
            return  lab_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabs
 #+NAME: test_class_get_labs
 #+BEGIN_SRC python
class TestGetLabs(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_in_system_interface(self):
        print "test_get_labs_in_system_interface"

        data_dict = {'lab_name': 'data structure',
                    'lab_id': 'cse01',
                    'key' : KEY
                   }

        data_dict1 = {'lab_name': "Automata",
            'lab_id': 'DFA',
            'key' : KEY
           }

        lab1 = SystemInterface.add_lab(data_dict)
        lab2 = SystemInterface.add_lab(data_dict1)

        labs_list = SystemInterface.get_labs()
        
        self.assertEqual(labs_list[0].get("lab_name"), data_dict['lab_name'])
        self.assertEqual(labs_list[1].get("lab_name"), data_dict1['lab_name'])
        self.assertEqual(labs_list[0].get("lab_id"), 
                             data_dict['lab_id'])
        self.assertEqual(labs_list[1].get("lab_id"), 
                             data_dict1['lab_id'])

 #+END_SRC

** DeleteLab
#+NAME: class_delete_lab
#+begin_src python
    @staticmethod
    def delete_lab(l_id):
        session_cls = System.delegate.entities['session']

        session = session_cls(key=KEY)
        try:
            current_app.logger.debug("running operation delete_lab")
            lab = System.do("delete_lab", l_id=int(l_id),
                                    session=session)
            current_app.logger.debug("completed operation delete_lab")
            return lab
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteLab
 #+NAME: test_class_delete_lab
 #+BEGIN_SRC python
class TestDeleteLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_lab_in_system_interface(self):
        print "test_delete_lab_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse01'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'lab_name': 'Computer Programming',
                    'lab_id': 'cse02'
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)
        l_id = SystemInterface.delete_lab(1)
        
        self.assertEqual(l_id, 1)

 #+END_SRC

** UpdateLab
   
#+NAME: class_update_lab
#+begin_src python
    @staticmethod
    def update_lab(data_dict):
        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']

        session = session_cls(key=data_dict['key'])
        lab = lab_cls.get_by_id(data_dict['l_id'])

        if 'lab_name' not in data_dict:
            lab_name=str(lab.get("lab_name"))
        else:
            lab_name=data_dict['lab_name']

        if 'lab_id' not in data_dict:
            lab_id=str(lab.get("lab_id"))
        else:
            lab_id=data_dict['lab_id']

        try:
            current_app.logger.debug("running operation update_lab")
            question = System.do("update_lab", lab=lab, lab_name=lab_name, 
                                    lab_id=lab_id,
                                    session=session)
            current_app.logger.debug("completed operation update_lab")
            return lab.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateLab
 #+NAME: test_class_update_lab
 #+BEGIN_SRC python
class TestUpdateLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_lab_name_in_system_interface(self):
        print "test_update_lab_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'lab_name': 'Data Structures',
                    'lab_id': 'cse02'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'l_id': 1,
                    'lab_name': 'Computer Programming'
                   }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.update_lab(data_dict1)
        
        self.assertEqual(lab1.get("lab_name"), data_dict1['lab_name'])
        self.assertEqual(lab1.get("lab_id"),
                             data_dict['lab_id'])

 #+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.system.system import *
import datetime
from flask import current_app
from runtime.config.system_config import KEY

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.system.system_interface import *
from runtime.config.system_config import KEY
from flask import current_app
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle system_interface.py :eval no :noweb yes
<<imports_for_sources>>
<<class_system_interface>>
<<class_add_lab>>
<<class_get_labs>>
<<class_delete_lab>>
<<class_update_lab>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_system_interface.py :eval no :noweb yes
<<imports_for_tests>>
<<test_class_add_lab>>
<<test_class_get_labs>>
<<test_class_delete_lab>>
<<test_class_update_lab>>
<<run_test_cases>>
#+end_src
 

