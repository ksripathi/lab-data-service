#+TITLE: Test System with Persistence
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Initialize database for tests
  Before any test is run, the database is populated with questions. 
#+NAME: populate_db
#+BEGIN_SRC python
def populate_db():
    pass
#+END_SRC


* Test AddLab
#+NAME: test_add_lab
#+BEGIN_SRC python
class TestAddLab(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_lab(self):
        print "test_add_lab_in_system_persistence"

        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']
        institute_cls = System.delegate.entities['institute']
        discipline_cls = System.delegate.entities['discipline']
        experiment_cls = System.delegate.entities['experiment']

        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = experiment_cls(exp_name=exp_name, exp_id=exp_id,
                                        overview=overview, sections=[])
        experiment.save()

        inst_name = "IIT Kanpur"
        inst_id = "IITK"
        inst = institute_cls(inst_name=inst_name, inst_id=inst_id)
        inst.save()

        dis_name = "IIT Kanpur"
        dis_id = "IITK"
        discipline = discipline_cls(dis_name=dis_name, dis_id=dis_id)
        discipline.save()
                                
        lab_name1="Computer Programming"
        lab_id1="CSE01"
        key = KEY
        overview = "overview"
        session = session_cls(key=key)
        lab = lab_cls(lab_id=lab_id1, lab_name=lab_name1,        
                          institute=inst, discipline=discipline,                  
                          overview=overview, experiments=[experiment])

        lab1 = System.do("add_lab", lab=lab, session=session)
        new_lab = lab_cls.get_by_id(1)
        self.assertEqual(new_lab.get("lab_name"), lab_name1)
        self.assertEqual(new_lab.get("lab_id"), lab_id1)
            
#+END_SRC


* Test AddExperiment
#+NAME: test_add_experiment
#+BEGIN_SRC python
class TestAddExperiment(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_experiment(self):
        print "test_add_experiment_in_system_persistence"
        session_cls = System.delegate.entities['session']
        experiment_cls = System.delegate.entities['experiment']
        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = experiment_cls(exp_name=exp_name, exp_id=exp_id,
                                        overview=overview, sections=[])
        key = KEY
        session = session_cls(key=key)
        experiment = System.do("add_experiment", experiment=experiment, \
                                session=session)
        experiment1 = experiment_cls.get_by_id(1)
        self.assertEqual(experiment1.get("exp_name"), exp_name)
            
#+END_SRC



* Test AddInstitute 
#+NAME: test_add_institute
#+BEGIN_SRC python
class TestAddInstitute(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_institute(self):
        print "test_add_institute_in_system_persistence"
        session_cls = System.delegate.entities['session']
        institute_cls = System.delegate.entities['institute']
        inst_name = "IIT Kanpur"
        inst_id = "IITK"
        institute = institute_cls(inst_name=inst_name, inst_id=inst_id)
                                       
        key = KEY
        session = session_cls(key=key)
        institute = System.do("add_institute", institute=institute, \
                                session=session)
        institute1 = institute_cls.get_by_id(1)
        self.assertEqual(institute1.get("inst_name"), inst_name)
#+END_SRC


* Test AddDiscipline
#+NAME: test_add_discipline
#+BEGIN_SRC python
class TestAddDiscipline(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_discipline(self):
        print "test_add_discipline_in_system_persistence"
        session_cls = System.delegate.entities['session']
        discipline_cls = System.delegate.entities['discipline']
        dis_name = "arrays"
        dis_id = "cse02"
        discipline = discipline_cls(dis_name=dis_name, dis_id=dis_id)
        key = KEY
        session = session_cls(key=key)
        discipline = System.do("add_discipline", discipline=discipline, session=session)
        discipline1 = discipline_cls.get_by_id(1)
        self.assertEqual(discipline1.get("dis_name"), dis_name)
            
#+END_SRC


* Test AddSectionsToExperiment
#+NAME: test_add_sections_to_experiment
#+BEGIN_SRC python
class TestAddSectionsToExperiment(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_sections_to_experiment(self):
        print "test_add_sections_to_experiment_in_system_persistence"
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']
        experiment_cls = System.delegate.entities['experiment']

        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = experiment_cls(exp_name=exp_name, exp_id=exp_id,
                                        overview=overview, sections=[])
        key = KEY
        session = session_cls(key=key)
        experiment = System.do("add_experiment", experiment=experiment, \
                                session=session)
        experiment1 = experiment_cls.get_by_id(1)

        section1 = section_cls(name="Theory")
        section1.save()

        section2 = section_cls(name="Aim")
        section2.save()
        
        experiment = System.do("add_sections_to_experiment", 
                                experiment=experiment,
                                sections=[section1, section2],
                                session=session)

        self.assertEqual(experiment1.get("exp_name"), exp_name)
        self.assertEqual(experiment1.get("sections")[0].get("name"), "Theory")
        self.assertEqual(experiment1.get("sections")[1].get("name"), "Aim")            

#+END_SRC


* Test AddLabsToInstitute 
#+NAME: test_add_labs_to_institute
#+BEGIN_SRC python
class TestAddLabsToInstitute(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_labs_to_institute(self):
        print "test_add_labs_to_institute_in_system_persistence"
        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']
        institute_cls = System.delegate.entities['institute']

        inst_name = "arrays"
        inst_id = "cse02"
        institute = institute_cls(inst_name=inst_name, inst_id=inst_id)
                                        
        key = KEY
        session = session_cls(key=key)
        institute = System.do("add_institute", institute=institute, \
                                session=session)
        institute1 = institute_cls.get_by_id(1)

        lab1 = lab_cls(lab_name="Data Structures", lab_id="cse02")
        lab1.save()

        lab2 = lab_cls(lab_name="Computer Programming", lab_id="cse12")
        lab2.save()
        
        institute = System.do("add_labs_to_institute", 
                                instid=institute.id,
                                labs=[lab1, lab2],
                                session=session)

        self.assertEqual(institute1.get("inst_name"), inst_name)
        self.assertEqual(institute1.get("labs")[0].get("lab_name"), "Data Structures")
        self.assertEqual(institute1.get("labs")[1].get("lab_name"), "Computer Programming")            
#+END_SRC


* Test AddSection
#+NAME: test_add_section
#+BEGIN_SRC python
class TestAddSection(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_section(self):
        
        print "test_add_section_in_system_persistence"
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']

        section = section_cls(name="Theory")
        session = session_cls(key=KEY)
        section = System.do("add_section", section=section, session=session)
        new_section = section_cls.get_by_id(1)
        self.assertEqual(new_section.get("name"), "Theory")
            
#+END_SRC



* Test AddName
#+NAME: test_add_name
#+BEGIN_SRC python
class TestAddName(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_name(self):
        
        print "test_add_name_in_system_persistence"
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']

        name = name_cls(name="Prof. S. Dharmaraja")
        session = session_cls(key=KEY)
        name = System.do("add_name", name=name, session=session)
        new_name = name_cls.get_by_id(1)
        self.assertEqual(new_name.get("name"), "Prof. S. Dharmaraja")
            
#+END_SRC


* Test AddEmail
#+NAME: test_add_email
#+BEGIN_SRC python
class TestAddEmail(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_email(self):

        print "test_add_email_in_system_persistence"
        session_cls = System.delegate.entities['session']
        email_cls = System.delegate.entities['email']

        email = email_cls(email="dharmar@maths.iitd.ac.in")
        session = session_cls(key=KEY)
        email = System.do("add_email", email=email, session=session)
        new_email = email_cls.get_by_id(1)
        self.assertEqual(new_email.get("email"), "dharmar@maths.iitd.ac.in")

#+END_SRC


* Test AddHostingInfo 
#+NAME: test_add_hostinginfo
#+BEGIN_SRC python
class TestAddHostingInfo(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_hostinginfo(self):
        print "test_add_hostinginfo_in_system_persistence"
        session_cls = System.delegate.entities['session']
        hostinginfo_cls = System.delegate.entities['hostinginfo']
        hosting_status = "hosted"
        hosted_url = "http://cse14-iiith.vlabs.ac.in"
        hosted_on = "cloud"
        hostinginfo = hostinginfo_cls(hosting_status=hosting_status, hosted_url=hosted_url, hosted_on=hosted_on)
                                       
        key = KEY
        session = session_cls(key=key)
        hostinginfo = System.do("add_hostinginfo", hostinginfo=hostinginfo, \
                                session=session)
        hostinginfo1 = hostinginfo_cls.get_by_id(1)
        self.assertEqual(hostinginfo1.get("hosting_status"), hosting_status)
        self.assertEqual(hostinginfo1.get("hosted_on"), hosted_on)

#+END_SRC


* Test AddDeveloper
#+NAME: test_add_developer
#+BEGIN_SRC python
class TestAddDeveloper(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_developer(self):
        print "test_add_developer_in_system_persistence"
        session_cls = System.delegate.entities['session']
        developer_cls = System.delegate.entities['developer']
        email_cls = System.delegate.entities['email']
        name_cls = System.delegate.entities['name']

        name = name_cls(name="Prof. S. Dharmaraja")
        name.save()
        email = email_cls(email="dharmar@maths.iitd.ac.in")
        email.save()

        developer = developer_cls(name=name, email=email)
        key = KEY
        session = session_cls(key=key)

        developer = System.do("add_developer", developer=developer, session=session)

        self.assertEqual(developer.get("name").get("name"), name.get("name"))

#+END_SRC


* Test AddIntegrationStatus 
#+NAME: test_add_integrationstatus
#+BEGIN_SRC python
class TestAddIntegrationStatus(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_integrationstatus(self):
        print "test_add_integrationstatus_in_system_persistence"
        session_cls = System.delegate.entities['session']
        integrationstatus_cls = System.delegate.entities['integrationstatus']
        integration_level = 4
        integrationstatus = integrationstatus_cls(integration_level=integration_level)
                                       
        key = KEY
        session = session_cls(key=key)
        integrationstatus = System.do("add_integrationstatus", integrationstatus=integrationstatus, \
                                session=session)
        integrationstatus1 = integrationstatus_cls.get_by_id(1)
        self.assertEqual(integrationstatus1.get("integration_level"), integration_level)
#+END_SRC


* Test UpdateLab
#+NAME: test_update_lab
#+BEGIN_SRC python
class TestUpdateLab(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_lab(self):
        
        print "test_update_lab_in_system_persistence"
        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']
        institute_cls = System.delegate.entities['institute']
        discipline_cls = System.delegate.entities['discipline']
        experiment_cls = System.delegate.entities['experiment']

        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = experiment_cls(exp_name=exp_name, exp_id=exp_id,
                                        overview=overview, sections=[])
        experiment.save()

        inst_name = "IIT Kanpur"
        inst_id = "IITK"
        inst = institute_cls(inst_name=inst_name, inst_id=inst_id)
        inst.save()

        dis_name = "IIT Kanpur"
        dis_id = "IITK"
        discipline = discipline_cls(dis_name=dis_name, dis_id=dis_id)
        discipline.save()

        lab_name1="Computer Programming"
        lab_id1="CSE01"
        key = KEY
        overview = "overview"
        session = session_cls(key=key)
        lab = lab_cls(lab_id=lab_id1, lab_name=lab_name1, \
                          institute=inst, discipline=discipline,      
                          overview=overview, experiments=[experiment])

        lab.save()
        lab_name2="Computer Programming"
        overview2="CSE01 overview"

        lab1 = System.do("update_lab", lab_name=lab_name2, 
                                  lab=lab, overview=overview2,
                                  session=session)

        new_lab = lab_cls.get_by_id(1)

        self.assertEqual(new_lab.get("lab_name"), lab_name2)
        self.assertEqual(new_lab.get("overview"), overview2)
            
#+END_SRC


* Test UpdateExperiment
#+NAME: test_update_experiment
#+BEGIN_SRC python
class TestUpdateExperiment(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_exp(self):
        
        print "test_update_exp_in_system_persistence"
        session_cls = System.delegate.entities['session']
        exp_cls = System.delegate.entities['experiment']

        session = session_cls(key=KEY)
        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = exp_cls(exp_name=exp_name, exp_id=exp_id, 
                                overview=overview, sections=[])
        experiment.save()

        exp_name2 = "two dimentional arrays"
        overview2 = "exp overview"

        exp1 = System.do("update_experiment", exp_name=exp_name2,
                             experiment=experiment, overview=overview2,
                             session=session)

        new_exp = exp_cls.get_by_id(1)

        self.assertEqual(new_exp.get("exp_name"), exp_name2)
        self.assertEqual(new_exp.get("overview"), overview2)
        self.assertEqual(new_exp.get("exp_id"), exp_id)
            
#+END_SRC


* Test UpdateInstitute 
#+NAME: test_update_institute
#+BEGIN_SRC python
class TestUpdateInstitute(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_institute(self):

        print "test_update_institute_in_system_persistence"
        session_cls = System.delegate.entities['session']
        institute_cls = System.delegate.entities['institute']

        inst_name1="IIT Kanpur"
        inst_id1="IITK"
        key = KEY
        session = session_cls(key=key)
        institute = institute_cls(inst_id=inst_id1, inst_name=inst_name1)

        institute.save()

        inst_name2="IIT Kharagpur"

        institute1 = System.do("update_institute", inst_name=inst_name2,
                                 institute=institute, session=session)

        new_institute = institute_cls.get_by_id(1)

        self.assertEqual(new_institute.get("inst_name"), inst_name2)
#+END_SRC


* Test UpdateDiscipline 
#+NAME: test_update_discipline
#+BEGIN_SRC python
class TestUpdateDisciplilne(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_discipline(self):

        print "test_update_discipline_in_system_persistence"
        session_cls = System.delegate.entities['session']
        discipline_cls = System.delegate.entities['discipline']

        dis_name = "arrays"
        dis_id = "cse02"
        discipline = discipline_cls(dis_name=dis_name, dis_id=dis_id)
        discipline.save()
        key = KEY
        session = session_cls(key=key)

        dis_name1 = "lists"

        discipline1 = System.do("update_discipline", dis_name=dis_name1,
                                  discipline=discipline, session=session)

        self.assertEqual(discipline1.get("dis_name"), dis_name1)

#+END_SRC


* Test UpdateSection
#+NAME: test_update_section
#+BEGIN_SRC python
class TestUpdateSection(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_section(self):
        
        print "test_update_section_in_system_persistence"
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']

            
#+END_SRC


* Test UpdateHostingInfo 
#+NAME: test_update_hostinginfo
#+BEGIN_SRC python
class TestUpdateHostingInfo(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_hostinginfo(self):

        print "test_update_hostinginfo_in_system_persistence"
        session_cls = System.delegate.entities['session']
        hostinginfo_cls = System.delegate.entities['hostinginfo']

        hosting_status1 = "hosted"
        hosted_url1 = "http://cse14-iiith.vlabs.ac.in"
        hosted_on1 = "cloud"
        key = KEY
        session = session_cls(key=key)
        hostinginfo = hostinginfo_cls(hosting_status=hosting_status1, hosted_url=hosted_url1, hosted_on=hosted_on1)

        hostinginfo.save()

        hosting_status2 ="not hosted"
        hosted_on2 = "server"
        hostinginfo1 = System.do("update_hostinginfo", hosting_status=hosting_status2, hosted_on=hosted_on2,
                                 hostinginfo=hostinginfo, session=session)

        new_hostinginfo = hostinginfo_cls.get_by_id(1)

        self.assertEqual(new_hostinginfo.get("hosting_status"), hosting_status2)
        self.assertEqual(new_hostinginfo.get("hosted_on"), hosted_on2)

#+END_SRC


* Test DeleteExperiment
#+NAME:  test_delete_experiment 
#+BEGIN_SRC python
class TestDeleteExperiment(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_exp(self):
        
        print "test_delete_exp_in_system_persistence"
        session_cls = System.delegate.entities['session']
        experiment_cls = System.delegate.entities['experiment']

        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        key = KEY
        experiment = experiment_cls(exp_name=exp_name, exp_id=exp_id,
                                        overview=overview, sections=[])

        experiment.save()
        session = session_cls(key=key)
        exp_id1 = System.do("delete_experiment", exp_id = exp_id,
                                  session=session)

        self.assertEqual(exp_id1, exp_id)
            
#+END_SRC


* Test UpdateDeveloper
#+NAME: test_update_developer
#+BEGIN_SRC python
class TestUpdateDeveloper(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_developer(self):

        print "test_update_exp_in_system_persistence"
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']
        email_cls = System.delegate.entities['email']
        dev_cls = System.delegate.entities['developer']

        session = session_cls(key=KEY)
        dev_name = name_cls(name="Prof. Dharmaraja")
        dev_name.save()
        email_id = email_cls(email="raja@gmail.com")
        email_id.save()
        developer = dev_cls(name=dev_name, email=email_id)
        developer.save()
        dev_name2 = name_cls(name="Prof. Raja")
        dev_name2.save()

        dev1 = System.do("update_developer", developer=developer,
                             name=dev_name2,  session=session)

        new_dev = dev_cls.get_by_id(1)

        self.assertEqual(new_dev.get("name").get("name"),
                             dev_name2.get('name'))

#+END_SRC


* Test DeleteInstitute 
#+NAME:  test_delete_institute 
#+BEGIN_SRC python
class TestDeleteInstitute(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_institute(self):
        
        print "test_delete_institute_in_system_persistence"
        session_cls = System.delegate.entities['session']
        institute_cls = System.delegate.entities['institute']

        inst_name= "IIT Kanpur"
        inst_id= "IITK"
        key = KEY
        session = session_cls(key=key)
        institute = institute_cls(inst_id=inst_id, inst_name=inst_name)
                         
        institute.save()
        institute = System.do("delete_institute", inst_id = inst_id,
                                  session=session)

        self.assertEqual(institute, inst_id)
            
#+END_SRC



* Test DeleteName 
#+NAME:  test_delete_name 
#+BEGIN_SRC python
class TestDeleteName(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_name(self):
        print "test_delete_name_in_system_persistence"
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']

        name = "Prof. Dharmaraj"
        key = KEY
        session = session_cls(key=key)
        name1 = name_cls(name=name)

        name1.save()
        name2 = System.do("delete_name", name=name1, session=session)
        self.assertEqual(name, name2.get("name"))

#+END_SRC


* Test DeleteLab
#+NAME:  test_delete_lab 
#+BEGIN_SRC python
class TestDeleteLab(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_lab(self):
        
        print "test_delete_lab_in_system_persistence"
        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']
        institute_cls = System.delegate.entities['institute']
        discipline_cls = System.delegate.entities['discipline']
        experiment_cls = System.delegate.entities['experiment']

        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = experiment_cls(exp_name=exp_name, exp_id=exp_id,
                                        overview=overview, sections=[])
        experiment.save()

        inst_name = "IIT Kanpur"
        inst_id = "IITK"
        inst = institute_cls(inst_name=inst_name, inst_id=inst_id)
        inst.save()

        dis_name = "IIT Kanpur"
        dis_id = "IITK"
        discipline = discipline_cls(dis_name=dis_name, dis_id=dis_id)
        discipline.save()

        lab_name1="Computer Programming"
        lab_id1="CSE01"
        key = KEY
        overview = "overview"
        session = session_cls(key=key)
        lab = lab_cls(lab_id=lab_id1, lab_name=lab_name1, \
                          institute=inst, discipline=discipline,
                          overview=overview, experiments=[experiment])
        lab.save()
        lab_id = System.do("delete_lab", lab_id = lab_id1,
                                  session=session)

        self.assertEqual(lab_id, lab_id1)
            
#+END_SRC


* Test DeleteEmail
#+NAME:  test_delete_email 
#+BEGIN_SRC python
class TestDeleteEmail(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_email(self):

        print "test_delete_email_in_system_persistence"
        session_cls = System.delegate.entities['session']
        email_cls = System.delegate.entities['email']

        email = "abc@gmail.com"
        key = KEY
        session = session_cls(key=key)
        email1 = email_cls(email=email)

        email1.save()
        email2 = System.do("delete_email", email = email1, session=session)

        self.assertEqual(email1.get("email"), email2.get("email"))
#+END_SRC


* Test DeleteDiscipline
#+NAME:  test_delete_discipline 
#+BEGIN_SRC python
class TestDeleteDiscipline(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_discipline(self):
        
        print "test_delete_discipline_in_system_persistence"
        session_cls = System.delegate.entities['session']
        discipline_cls = System.delegate.entities['discipline']

        dis_name = "arrays"
        dis_id = "cse02"
        discipline = discipline_cls(dis_name=dis_name, dis_id=dis_id)
        discipline.save()
        key = KEY
        session = session_cls(key=key)

        dis_id1 = System.do("delete_discipline", dis_id = dis_id,
                                  session=session)

        self.assertEqual(dis_id, dis_id1)
            
#+END_SRC


* Test DeleteDeveloper
#+NAME:  test_delete_developer 
#+BEGIN_SRC python
class TestDeleteDeveloper(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_developer(self):

        print "test_delete_name_in_system_persistence"
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']
        email_cls = System.delegate.entities['email']
        developer_cls = System.delegate.entities['developer']

        dev_name = name_cls(name="Prof. Dharmaraj")
        dev_name.save()

        email_id = email_cls(email="abc@gmail.com")
        email_id.save()

        key = KEY
        session = session_cls(key=key)
        developer = developer_cls(name=dev_name, email=email_id)
        developer.save()

        email = System.do("delete_developer", email=email_id, session=session)

        self.assertEqual(email.get("email"), email_id.get("email"))

#+END_SRC


* Test DeleteHostingInfo 
#+NAME:  test_delete_hostinginfo 
#+BEGIN_SRC python
class TestDeleteHostingInfo(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_hostinginfo(self):
        
        print "test_delete_hostinginfo_in_system_persistence"
        session_cls = System.delegate.entities['session']
        hostinginfo_cls = System.delegate.entities['hostinginfo']

        hosting_status = "hosted"
        hosted_url = "http://cse14-iiith.vlabs.ac.in"
        hosted_on = "cloud"
        key = KEY
        session = session_cls(key=key)
        hostinginfo = hostinginfo_cls(hosting_status=hosting_status, hosted_url=hosted_url, hosted_on=hosted_on)
                         
        hostinginfo.save()
        hostinginfo = System.do("delete_hostinginfo", hosted_url = hosted_url,
                                  session=session)

        self.assertEqual(hostinginfo, hosted_url)
            
#+END_SRC


* Test DeleteIntegrationStatus 
#+NAME:  test_delete_integrationstatus 
#+BEGIN_SRC python
class TestDeleteIntegrationStatus(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_integrationstatus(self):
        
        print "test_delete_integrationstatus_in_system_persistence"
        session_cls = System.delegate.entities['session']
        integrationstatus_cls = System.delegate.entities['integrationstatus']

        integration_level= 4
        key = KEY
        session = session_cls(key=key)
        integrationstatus = integrationstatus_cls(integration_level=integration_level)
                         
        integrationstatus.save()
        integrationstatus = System.do("delete_integrationstatus", integration_level = integration_level,
                                  session=session)

        self.assertEqual(integrationstatus, integration_level)
            
#+END_SRC



* Test GetLab
#+NAME: test_get_lab
#+BEGIN_SRC python
class TestGetLab(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab(self):

        print "test_get_lab_in_system_persistence"
        lab_cls = System.delegate.entities['lab']
        institute_cls = System.delegate.entities['institute']
        discipline_cls = System.delegate.entities['discipline']

        lab_name1="Computer Programming"
        lab_id1="CSE01"
        overview = "overview"

        inst_name = "IIT Kanpur"
        inst_id = "IITK"
        inst = institute_cls(inst_name=inst_name, inst_id=inst_id)
        inst.save()

        dis_name = "IIT Kanpur"
        dis_id = "IITK"
        discipline = discipline_cls(dis_name=dis_name, dis_id=dis_id)
        discipline.save()

        lab = lab_cls(lab_id=lab_id1, lab_name=lab_name1, \
                          institute=inst, discipline=discipline,
                          overview=overview, experiments=[])

        lab.save()

        lab1 = System.do("get_lab", lab_id=lab_id1)


        self.assertEqual(lab1.get("lab_name"), lab_name1)
        self.assertEqual(lab1.get("lab_id"), lab_id1)
            
#+END_SRC




* Test GetLabsByInstitute
#+NAME: test_get_labs_by_institute
#+BEGIN_SRC python
class TestGetLabByInstitute(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_institute(self):

        print "test_get_labs_by_institute_in_system_persistence"
        lab_cls = System.delegate.entities['lab']
        institute_cls = System.delegate.entities['institute']
        discipline_cls = System.delegate.entities['discipline']

        lab_name1="Computer Programming"
        lab_id1="CSE01"
        overview = "overview"

        inst_name = "IIT Kanpur"
        inst_id = "IITK"
        inst = institute_cls(inst_name=inst_name, inst_id=inst_id)
        inst.save()

        dis_name = "IIT Kanpur"
        dis_id = "IITK"
        discipline = discipline_cls(dis_name=dis_name, dis_id=dis_id)
        discipline.save()

        lab = lab_cls(lab_id=lab_id1, lab_name=lab_name1, \
                          institute=inst, discipline=discipline,
                          overview=overview, experiments=[])

        lab.save()

        labs = System.do("get_labs_by_institute", institute=inst)

        self.assertEqual(labs[0].get("lab_name"), lab_name1)
        self.assertEqual(labs[0].get("lab_id"), lab_id1)
            
#+END_SRC




* Test GetName
#+NAME: test_get_name
#+BEGIN_SRC python
class TestGetName(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_name(self):

        print "test_get_name_in_system_persistence"
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']

        name1="Prof. Dharmaraj"
        key = KEY
        session = session_cls(key=key)
        name = name_cls(name=name1)

        name.save()

        name2 = System.do("get_name", name=name, session=session)

        self.assertEqual(name2.get("name"), name1)
#+END_SRC


* Test GetExperiment
#+NAME: test_get_exp
#+BEGIN_SRC python
class TestGetExp(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_exp(self):

        print "test_get_exp_in_system_persistence"
        exp_cls = System.delegate.entities['experiment']

        experiment_cls = System.delegate.entities['experiment']
        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = experiment_cls(exp_name=exp_name, exp_id=exp_id,
                                        overview=overview, sections=[])
        experiment.save()

        experiment1 = System.do("get_experiment", exp_id=exp_id)

        self.assertEqual(experiment1.get("exp_name"), exp_name)
        self.assertEqual(experiment1.get("exp_id"), exp_id)
            
#+END_SRC


* Test GetEmail
#+NAME: test_get_email
#+BEGIN_SRC python
class TestGetEmail(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_email(self):

        print "test_get_email_in_system_persistence"
        session_cls = System.delegate.entities['session']
        email_cls = System.delegate.entities['email']

        email1="abc@gmail.com"
        key = KEY
        session = session_cls(key=key)
        email = email_cls(email=email1)

        email.save()

        email2 = System.do("get_email", email=email, session=session)

        self.assertEqual(email2.get("email"), email1)

#+END_SRC


* Test GetInstitute 
#+NAME: test_get_institute
#+BEGIN_SRC python
class TestGetInstitute(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institute(self):

        print "test_get_institute_in_system_persistence"
        session_cls = System.delegate.entities['session']
        institute_cls = System.delegate.entities['institute']

        inst_name1= "IIT Kanpur"
        inst_id1= "IITK"
        institute = institute_cls(inst_id=inst_id1, inst_name=inst_name1)
        institute.save()

        institute1 = System.do("get_institute", inst_id=inst_id1)

        self.assertEqual(institute1.get("inst_name"), inst_name1)
        self.assertEqual(institute1.get("inst_id"), inst_id1)
            
#+END_SRC


* Test GetDiscipline
#+NAME: test_get_discipline
#+BEGIN_SRC python
class TestGetDiscipline(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_discipline(self):

        print "test_get_discipline_in_system_persistence"
        discipline_cls = System.delegate.entities['discipline']

        dis_name = "arrays"
        dis_id = "cse02"
        discipline = discipline_cls(dis_name=dis_name, dis_id=dis_id)
        discipline.save()

        exp1 = System.do("get_discipline", dis_id=dis_id)

        self.assertEqual(exp1.get("dis_name"), dis_name)
        self.assertEqual(exp1.get("dis_id"), dis_id)
            
#+END_SRC



* Test GetDeveloper
#+NAME: test_get_developer
#+BEGIN_SRC python
class TestGetDeveloper(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_developer(self):

        print "test_get_developer_in_system_persistence"
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']
        email_cls = System.delegate.entities['email']
        dev_cls = System.delegate.entities['developer']

        dev_name1 = name_cls(name="Prof. Dharmaraj")
        dev_name1.save()
        email_id1 = email_cls(email="abc@gmail.com")
        email_id1.save()
        key = KEY
        session = session_cls(key=key)
        developer = dev_cls(name=dev_name1, email=email_id1)
        developer.save()
        developer1 = System.do("get_developer", email=email_id1)

        self.assertEqual(developer1.get("name"), dev_name1)
        self.assertEqual(developer1.get("email"), email_id1)

#+END_SRC


* Test GetHostingInfo 
#+NAME: test_get_hostinginfo
#+BEGIN_SRC python
class TestGetHostingInfo(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_hostinginfo(self):

        print "test_get_hostinginfo_in_system_persistence"
        session_cls = System.delegate.entities['session']
        hostinginfo_cls = System.delegate.entities['hostinginfo']

        hosting_status1 = "hosted"
        hosted_url1 = "http://cse14-iiith.vlabs.ac.in"
        hosted_on1 = "cloud"
        hostinginfo = hostinginfo_cls(hosting_status=hosting_status1, hosted_url=hosted_url1, hosted_on=hosted_on1)
        hostinginfo.save()

        hostinginfo1 = System.do("get_hostinginfo", hosted_url=hosted_url1)

        self.assertEqual(hostinginfo1.get("hosting_status"), hosting_status1)
        self.assertEqual(hostinginfo1.get("hosted_url"), hosted_url1)
        self.assertEqual(hostinginfo1.get("hosted_on"), hosted_on1)
            
#+END_SRC


* Test GetIntegrationStatus 
#+NAME: test_get_integrationstatus
#+BEGIN_SRC python
class TestGetIntegrationStatus(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_integrationstatus(self):

        print "test_get_integrationstatus_in_system_persistence"
        session_cls = System.delegate.entities['session']
        integrationstatus_cls = System.delegate.entities['integrationstatus']

        integration_level1= 4
        integrationstatus = integrationstatus_cls(integration_level=integration_level1)
        integrationstatus.save()

        integrationstatus1 = System.do("get_integrationstatus", integration_level=integration_level1)

        self.assertEqual(integrationstatus1.get("integration_level"), integration_level1)
            
#+END_SRC


* Infra                                                         :boilerplate:
** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-

# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from runtime.system.system import *
from runtime.config.system_config import KEY
from runtime.utils.class_persistence_template import db

config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

#+BEGIN_SRC python :tangle test_persistence_system.py :eval no :noweb yes
<<imports_for_tests>>
<<populate_db>>
<<test_add_lab>>
<<test_delete_lab>>
<<test_delete_experiment>>
<<test_delete_institute>>
<<test_delete_discipline>>
<<test_delete_hostinginfo>>
<<test_add_experiment>>
<<test_add_institute>>
<<test_add_discipline>>
<<test_add_section>>
<<test_add_name>>
<<test_add_email>>
<<test_add_developer>>
<<test_add_integrationstatus>>
<<test_update_lab>>
<<test_update_experiment>>
<<test_update_developer>>
<<test_delete_name>>
<<test_delete_email>>
<<test_delete_developer>>
<<test_delete_integrationstatus>>
<<test_add_hostinginfo>>
<<test_update_lab>>
<<test_update_experiment>>
<<test_update_institute>>
<<test_update_discipline>>
<<test_update_hostinginfo>>
<<test_add_sections_to_experiment>>
<<test_get_lab>>
<<test_get_name>>
<<test_get_email>>
<<test_get_developer>>
<<test_get_institute>>
<<test_get_exp>>
<<test_get_discipline>>
<<test_get_hostinginfo>>
<<test_get_integrationstatus>>
<<test_get_labs_by_institute>>
<<run_test_cases>>

#+end_src
