#+TITLE: Test System with Persistence
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Initialize database for tests
  Before any test is run, the database is populated with questions. 
#+NAME: populate_db
#+BEGIN_SRC python
def populate_db():
    pass
#+END_SRC


* Test AddLab
#+NAME: test_add_lab
#+BEGIN_SRC python
class TestAddLab(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_lab(self):
        
        print "test_add_lab_in_system_persistence"
        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']
        experiment_cls = System.delegate.entities['experiment']

        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = experiment_cls(exp_name=exp_name, exp_id=exp_id,
                                        overview=overview, sections=[])

        lab_name1="Computer Programming"
        lab_id1="CSE01"
        key = KEY
        overview = "overview"
        session = session_cls(key=key)
        lab = lab_cls(lab_id=lab_id1, lab_name=lab_name1, \
                          overview=overview, experiments=[])
        lab1 = System.do("add_lab", lab = lab,
                                  session=session)
        new_lab = lab_cls.get_by_id(1)
        self.assertEqual(new_lab.get("lab_name"), lab_name1)
        self.assertEqual(new_lab.get("lab_id"), lab_id1)
            
#+END_SRC


* Test AddExperiment
#+NAME: test_add_experiment
#+BEGIN_SRC python
class TestAddExperiment(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_experiment(self):
        print "test_add_experiment_in_system_persistence"
        session_cls = System.delegate.entities['session']
        experiment_cls = System.delegate.entities['experiment']
        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = experiment_cls(exp_name=exp_name, exp_id=exp_id,
                                        overview=overview, sections=[])
        key = KEY
        session = session_cls(key=key)
        experiment = System.do("add_experiment", experiment=experiment, \
                                session=session)
        experiment1 = experiment_cls.get_by_id(1)
        self.assertEqual(experiment1.get("exp_name"), exp_name)
            
#+END_SRC


* Test AddSectionsToExperiment
#+NAME: test_add_sections_to_experiment
#+BEGIN_SRC python
class TestAddSectionsToExperiment(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_sections_to_experiment(self):
        print "test_add_sections_to_experiment_in_system_persistence"
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']
        experiment_cls = System.delegate.entities['experiment']

        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = experiment_cls(exp_name=exp_name, exp_id=exp_id,
                                        overview=overview, sections=[])
        key = KEY
        session = session_cls(key=key)
        experiment = System.do("add_experiment", experiment=experiment, \
                                session=session)
        experiment1 = experiment_cls.get_by_id(1)

        section1 = section_cls(name="Theory")
        section1.save()

        section2 = section_cls(name="Aim")
        section2.save()
        
        experiment = System.do("add_sections_to_experiment", 
                                expid=experiment.id,
                                sections=[section1, section2],
                                session=session)

        self.assertEqual(experiment1.get("exp_name"), exp_name)
        self.assertEqual(experiment1.get("sections")[0].get("name"), "Theory")
        self.assertEqual(experiment1.get("sections")[1].get("name"), "Aim")            
#+END_SRC


* Test AddSection
#+NAME: test_add_section
#+BEGIN_SRC python
class TestAddSection(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_section(self):
        
        print "test_add_section_in_system_persistence"
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']

        section = section_cls(name="Theory")
        session = session_cls(key=KEY)
        section = System.do("add_section", section=section, session=session)
        new_section = section_cls.get_by_id(1)
        self.assertEqual(new_section.get("name"), "Theory")
            
#+END_SRC


* Test UpdateLab
#+NAME: test_update_lab
#+BEGIN_SRC python
class TestUpdateLab(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_lab(self):
        
        print "test_update_lab_in_system_persistence"
        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']
        experiment_cls = System.delegate.entities['experiment']

        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = experiment_cls(exp_name=exp_name, exp_id=exp_id,
                                        overview=overview, sections=[])

        lab_name1="Computer Programming"
        lab_id1="CSE01"
        key = KEY
        overview = "overview"
        session = session_cls(key=key)
        lab = lab_cls(lab_id=lab_id1, lab_name=lab_name1, \
                          overview=overview, experiments=[])

        lab.save()
        lab_name2="Computer Programming"
        overview2="CSE01 overview"

        lab1 = System.do("update_lab", lab_name=lab_name2, 
                                  lab_id=lab_id1, overview=overview2,
                                  session=session)

        new_lab = lab_cls.get_by_id(1)

        self.assertEqual(new_lab.get("lab_name"), lab_name2)
        self.assertEqual(new_lab.get("overview"), overview2)
            
#+END_SRC


* Test UpdateExperiment
#+NAME: test_update_experiment
#+BEGIN_SRC python
class TestUpdateExperiment(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_exp(self):
        
        print "test_update_exp_in_system_persistence"
        session_cls = System.delegate.entities['session']
        exp_cls = System.delegate.entities['experiment']

        session = session_cls(key=KEY)
        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = exp_cls(exp_name=exp_name, exp_id=exp_id, 
                                overview=overview, sections=[])
        experiment.save()

        exp_name2 = "two dimentional arrays"
        exp_id2 = "cse03"

        exp1 = System.do("update_experiment", experiment=experiment, 
                                  exp_name=exp_name2, exp_id=exp_id2, 
                                  overview=overview, session=session)

        new_exp = exp_cls.get_by_id(1)

        self.assertEqual(new_exp.get("exp_name"), exp_name2)
        self.assertEqual(new_exp.get("exp_id"), exp_id2)
            
#+END_SRC


* Test UpdateSection
#+NAME: test_update_section
#+BEGIN_SRC python
class TestUpdateSection(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_section(self):
        
        print "test_update_section_in_system_persistence"
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']

        exp_name = "arrays"
        exp_id = "cse02"
        overview = "overview"
        experiment = experiment_cls(exp_name=exp_name, exp_id=exp_id, 
                                        overview=overview, sections=[])
        experiment.save()

        exp_name2 = "two dimentional arrays"
        exp_id2 = "cse03"

        exp1 = System.do("update_experiment", experiment=experiment, 
                                  exp_name=exp_name2, exp_id=exp_id2, 
                                  session=session)

        new_exp = exp_cls.get_by_id(1)

        self.assertEqual(new_exp.get("exp_name"), exp_name2)
        self.assertEqual(new_exp.get("exp_id"), exp_id2)
            
#+END_SRC


* Test GetLab
#+NAME: test_get_lab
#+BEGIN_SRC python
class TestGetLab(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab(self):

        print "test_get_lab_in_system_persistence"
        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']

        lab_name1="Computer Programming"
        lab_id1="CSE01"
        key = KEY
        overview = "overview"
        session = session_cls(key=key)
        lab = lab_cls(lab_id=lab_id1, lab_name=lab_name1, \
                          overview=overview, experiments=[])

        lab.save()

        lab1 = System.do("get_lab", lab_id=lab_id1,
                                  session=session)

        self.assertEqual(lab1.get("lab_name"), lab_name1)
        self.assertEqual(lab1.get("lab_id"), lab_id1)
            
#+END_SRC


* Infra                                                         :boilerplate:
** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-

# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from runtime.system.system import *
from runtime.config.system_config import KEY
from runtime.utils.class_persistence_template import db

config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

#+BEGIN_SRC python :tangle test_persistence_system.py :eval no :noweb yes
<<imports_for_tests>>
<<populate_db>>
<<test_add_lab>>
<<test_add_experiment>>
<<test_add_section>>
<<test_update_lab>>
<<test_update_experiment>>
<<test_add_sections_to_experiment>>
<<test_get_lab>>
<<run_test_cases>>
#+end_src
